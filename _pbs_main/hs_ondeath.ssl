procedure start;

//#include "Perk_Inc.h"
//#include "../headers/scenepid.h"
#include "define_lite.h"
#include "lib.strings.h"
#include "lib.arrays.h"
#include "mod.h"
#include "lib.inven.h"
//#include "quests_bounty.h"

variable begin
  ini_destroy_weapon_chance;
  ini_destroy_weapon_except;
  ini_weapon_drop;
  ini_weapon_drop_dist;
  ini_weapon_drop_dir;
  //ini_gecko_meat_drop;
  //ini_gecko_pelt_drop;
  ini_reduce_loot;
  ini_reduce_ammo_percent;
  ini_reduce_drugs_percent;
  ini_reduce_drugs_pids; // string
  ini_drop_monster_parts;
  //ini_BypassCodeUseFix;
end

//procedure Scrounger_Perks(variable critter);
procedure destroy_weapon(variable critter);
procedure drop_weapons(variable critter);
//procedure Gecko_Items(variable critter);
procedure reduce_loot(variable critter);
procedure drop_monster_parts(variable critter);
procedure drop_vanilla_monster_parts(variable critter);
procedure set_item_count(variable invenobj, variable item, variable newcount);
procedure parse_pid_list(variable str);


/*
  Runs immediately after a critter dies for any reason. No return values; this is just a convinence for when you need to do something after death for a large number of different critters and don't want to have to script each and every one of them.

  Critter arg1 - The critter that just died
*/

procedure start
begin
    variable critter;
	if (init_hook) then begin
	   ini_destroy_weapon_chance := get_ini_setting("combat.ini|ONDEATH|destroy_weapon_chance");
	   ini_destroy_weapon_except := get_ini_string("combat.ini|ONDEATH|destroy_weapon_except");
      ini_weapon_drop := get_ini_setting("combat.ini|ONDEATH|weapon_drop");
      ini_weapon_drop_dist := get_ini_setting("combat.ini|ONDEATH|weapon_drop_dist");
      ini_weapon_drop_dir := get_ini_setting("combat.ini|ONDEATH|weapon_drop_dir");

	   ini_reduce_loot := get_ini_setting("combat.ini|ONDEATH|reduce_loot");
      ini_reduce_ammo_percent := cap_number(get_ini_setting("combat.ini|ONDEATH|reduce_ammo_percent"), 0, 100);
      ini_reduce_drugs_percent := cap_number(get_ini_setting("combat.ini|ONDEATH|reduce_drugs_percent"), 0, 100);
      ini_reduce_drugs_pids := get_ini_string("combat.ini|ONDEATH|reduce_drugs_pids");
      
      ini_drop_monster_parts := get_ini_setting("combat.ini|ONDEATH|drop_monster_parts");
      //ini_Spefic_Fallout_2_Instalation := get_ini_setting("combat.ini|ONDEATH|Spefic_Fallout_2_Instalation"); 
	end
	else begin
		critter := get_sfall_arg;
	   //call Scrounger_Perks(critter);
	   /*if (ini_gecko_pelt_drop == 1) then begin
	      call Gecko_Items(critter);
	   end*/
	   if (critter and obj_type(critter) == OBJ_TYPE_CRITTER) then begin
	      if (ini_destroy_weapon_chance > 0) then begin
	         call destroy_weapon(critter);
	      end
	   	if (ini_reduce_loot) then begin
		      call reduce_loot(critter);
		   end
		   if (ini_weapon_drop) then begin
		      call drop_weapons(critter);
		   end
		   if (ini_drop_monster_parts) then begin
		      call drop_monster_parts(critter);
		   end
		   //display_msg("ONDEATH ");
	   end
	   
	   /*if (get_sfall_global_int("eleccrit") == critter) then begin
	      move_obj_inven_to_obj(get_sfall_global_int("elec_box"), critter);
	      destroy_object(get_sfall_global_int("elec_box"));
	      set_sfall_global("elec_box", 0);
	      set_sfall_global("eleccrit", 0);
	   end */
   end
end

/*procedure Scrounger_Perks(variable critter)
begin
	critter_flags := get_proto_data(obj_pid(critter), 32);
	if (not(critter_flags bwand 32)) then begin
		if (has_fake_perk("Fortune Finder") and (get_sfall_global_int(182) == 1)) then begin
			item_caps_adjust(critter, get_sfall_global_int(183) * has_fake_perk("Fortune Finder"));
		end
		if (has_fake_perk("Scrounger") and (get_sfall_global_int(185) == 1)) then begin
			if (obj_pid(critter_inven_obj(critter, 1)) > 0) then begin
				if (get_weapon_ammo_pid(critter_inven_obj(critter, 1)) > 0) then begin
					add_mult_objs_to_inven(critter, create_object_sid(get_weapon_ammo_pid(critter_inven_obj(critter, 1)), 0, 0, -1), get_sfall_global_int(186) * has_fake_perk("Scrounger"));
				end
			end
			if (obj_pid(critter_inven_obj(critter, 2)) > 0) then begin
				if (get_weapon_ammo_pid(critter_inven_obj(critter, 2)) > 0) then begin
					add_mult_objs_to_inven(critter, create_object_sid(get_weapon_ammo_pid(critter_inven_obj(critter, 2)), 0, 0, -1), get_sfall_global_int(186) * has_fake_perk("Scrounger"));
				end
			end
		end
	end
end*/

procedure parse_pid_list(variable str) begin
variable begin
   listS;
   listI;
   len; i;
end
    listS := string_split(ini_destroy_weapon_except, ",");
    len := len_array(listS);
    listI := temp_array(len, 4);
    i:=0;
    while (i<len) do begin
        set_array(listI, i, atoi(get_array(listS,i)));
        i++;
    end
    return listI;
end

procedure destroy_weapon(variable critter)
begin
    variable begin
      dist;
      dir;
      weapon := 0;
      i;
      exceptList;
    end
    exceptList := parse_pid_list(ini_destroy_weapon_except);
    i := 1;
    while (i <= 2) do begin
      weapon := critter_inven_obj(critter, i);
      if (weapon) then 
         if (obj_item_subtype(weapon) == item_type_weapon and not(is_in_array(obj_pid(weapon), exceptList)) and random(0,99) < ini_destroy_weapon_chance) then begin
           rm_obj_from_inven(critter, weapon);
           destroy_object(weapon);
         end
      i++;
    end
end

procedure drop_weapons(variable critter)
begin
    variable begin
      dist;
      dir;
      weapon := 0;
      dropped_hex := 0;
      critter_flags;
      i;
    end
	critter_flags := get_proto_data(obj_pid(critter), PROTO_CR_CRITTER_FLAGS);
	if not(critter_flags bwand CFLG_DROP) then begin
	    i := 1;
	    while (i <= 2) do begin
	      weapon := critter_inven_obj(critter, i);
	      if (weapon) then if (obj_item_subtype(weapon) == item_type_weapon and not(is_unarmed_weapon_pid(obj_pid(weapon)))) then begin
		        rm_obj_from_inven(critter, weapon);
		        dropped_hex := tile_num(critter);
		        if (ini_weapon_drop_dist > 0) then begin
		          dist := random(1, ini_weapon_drop_dist);
		          if (ini_weapon_drop_dir >= 0) then begin
		          	dir := ini_weapon_drop_dir + has_trait(TRAIT_OBJECT,critter,OBJECT_CUR_ROT);
		          	if (dir > 5) then dir := dir - 6;
		          end
		          else dir := random(0, 5);
		          i := 0;
		          while (i < dist and tile_contains_obj_pid(tile_num_in_direction(tile_num(critter), dir, i+1), elevation(dude_obj), PID_BLOCKING_HEX) == false) do begin
		            dropped_hex := tile_num_in_direction(tile_num(critter), dir, i+1);
		            i++;
		          end
		        end
		        move_to(weapon, dropped_hex, elevation(critter));
		      end
	      i++;
	    end
	end
end

procedure reduce_loot(variable critter)
begin
	variable begin
		item;
		list;
		count;
		newcount;
		packsize;
		pid;
		drugs_pids;
	end
	debug_msg("Reduce critter loot.");
	drugs_pids := string_split_ints(ini_reduce_drugs_pids, ",");
	list := inven_as_array(critter);
	foreach item in list begin
		if (obj_item_subtype(item) == item_type_ammo) then begin
			// reduce ammo in measures of individual rounds, not packs
			pid := obj_pid(item);
			count := actual_ammo_count(critter, item);
			packsize := get_proto_data(pid, PROTO_AM_PACK_SIZE);
			newcount := round(count * (100 - ini_reduce_ammo_percent) / 100.0);
			//display_msg("count: "+count+", pack: "+packsize+", new: "+newcount+" ("+ceil(1.0*newcount / packsize)+")");
			call set_item_count(critter, item, ceil(1.0*newcount / packsize));
			// if number of items reduced, object reference will be different
			item := obj_carrying_pid_obj(critter, pid);
			if (item and newcount % packsize > 0) then set_weapon_ammo_count(item, newcount % packsize);
		end else if (is_in_array(obj_pid(item), drugs_pids)) then begin
			// reduce with probability formula
			count := obj_is_carrying_obj_pid(critter, obj_pid(item));
			newcount := count * (100 - ini_reduce_drugs_percent) / 100.0;
			if (floor(newcount) < newcount) then newcount := floor(newcount) + (random(0, 99) < (newcount - floor(newcount))*100);
			else newcount := floor(newcount);
			call set_item_count(critter, item, newcount);
		end
	end
end

procedure drop_monster_parts(variable critter) begin
	if (can_steal_from_critter_pid(obj_pid(critter))) then begin
		if (is_deathclaw(critter)) 		then call add_item_pid(critter, PID_PBS_DEATH_CLAW);
		else if (is_molerat(critter)) 	then call add_item_pid(critter, PID_PBS_MOLERAT_HIDE);
		else if (is_floater(critter) or is_centaur(critter)) 	then call add_item_pid(critter, PID_PBS_TENTACLE);
		else if (is_alien(critter)) 	then call add_item_pid(critter, PID_PBS_ALIEN_HAND);
	end
end

// this function makes sure that vanilla monster parts are dropped 
// (in cases when critter died but destroy_p_proc wasn't executed)
// DEPRECATED since sfall 3.4 
/*procedure drop_vanilla_monster_parts(variable critter) begin
   variable pid;
   pid := 0;
   // geckos
   if (is_gecko(critter)) then begin
      if (has_trait(TRAIT_PERK, dude_obj, PERK_gecko_skinning_perk)) then begin
         if ((obj_pid(critter) == PID_GECKO_SMALL) or (obj_pid(critter) == PID_TOUGH_GECKO_SMALL)) then
            pid := PID_GECKO_PELT;
         else if ((obj_pid(critter) == PID_FIRE_GECKO) or (obj_pid(critter) == PID_TOUGH_FIRE_GECKO)) then
            pid := PID_FIRE_GECKO_PELT;
         else if ((obj_pid(critter) == PID_GOLDEN_GECKO ) or (obj_pid(critter) == PID_TOUGH_GOLDEN_GECKO)) then
            pid := PID_GOLDEN_GECKO_PELT;
      end
   // scorpions
   end else if (is_scorpion(critter)) then begin
	   if ((obj_pid(critter) == PID_SMALL_RADSCORPION) or (obj_pid(critter) == PID_BLACK_SCORPION)) then
         pid := PID_SMALL_SCORPION_TAIL;
      else
         pid := PID_SCORPION_TAIL;
	end
	if (pid) then if (obj_is_carrying_obj_pid(critter, pid) == 0) then
	   call add_item_pid(critter, pid);
end*/

procedure set_item_count(variable invenobj, variable item, variable newcount)
begin
	variable begin
		count;
		newitem;
	end
	count := obj_is_carrying_obj_pid(invenobj, obj_pid(item));
	if (newcount > count) then begin
		newitem := create_object_sid(obj_pid(item), 0, 0, -1);
		add_mult_objs_to_inven(invenobj, newitem, newcount - count);
	end else if (newcount < count) then begin
		count := rm_mult_objs_from_inven(invenobj, item, count - newcount);
		destroy_object(item);
	end
end







