procedure start;

/**

	Global script for traps system. 
	Should be of type 0 (local map) and repeated at least 5 times in second.
	
	This is the "main" script for traps system, functions:
	1) Exports all traps-related variables and procedures for other scripts.
	2) Loads INI variables.
	3) Implements triggering traps in real-time.
	4) Implements hotkey to place trap.
	
	Other scripts for traps:
	test2.int            - skill-based interactions with assembled traps on the ground
	hs_movecost.int      - triggering traps in combat
	hs_useobj.int        - placing trap from inventory or main interface
	hs_deathanim2.int    - fixes death animation for trap kills (doesn't include traps.h)

	@author phobos2077
	
*/


#include "sfall.h"
#include "define_lite.h"

#define _GL_TRAPS
#include "traps.h"
#undef _GL_TRAPS

variable angry_set;
//variable ar_explosions;

variable attack_delay := -1;
variable ini_assemble_hotkey;

procedure start begin
	variable arr, savedArrays;
	variable i, k, v;
	
	variable list;
	variable list2;
	variable obj;
	variable closest_crit;
	variable item;
	variable flag;
	variable n:=0;
	variable len;
	
	variable key1;
	
  if game_loaded then begin
  	//display_msg("traps init yo "+cur_map_index);
	set_global_script_type(0);
	set_global_script_repeat(100);
  	
  	// exported settings
	pbs_ini_trap_reveals_dude := get_ini_setting("combat.ini|TRAPS|trap_reveals_dude");
	pbs_ini_trap_friendfoe := get_ini_setting("combat.ini|TRAPS|trap_friendfoe");
	pbs_ini_trap_is_crime := get_ini_setting("combat.ini|TRAPS|trap_is_crime");
	ini_assemble_hotkey := parse_hotkey(get_ini_string("combat.ini|TRAPS|assemble_hotkey"));
	
	// migrate from old saves - nonzero value of this global indicates save from pre-3.4 sfall era
	if (get_sfall_global_int(SGVAR_TRAPS_BY_DUDE_LOCAL) != 0) then begin
	   display_msg("Migrating traps data to new format...");
   	foreach (k: v in ({SGVAR_TRAPS_BY_DUDE: ARR_TRAPS, SGVAR_TRAPS_BY_DUDE_LOCAL: -1, SGVAR_ANGRY_TEAMS: ARR_ANGRY_TEAMS, SGVAR_TRAPS_LAST_MAP: -1})) begin
      	arr := get_sfall_global_int(k);
      	if (arr and v != -1) then 
      	   save_array(v, arr); // save
      	set_sfall_global(k, 0); // clear sfall global
      	display_msg("set "+k+"=0");
   	end
   	// clear all arrays with numeric keys from savegame to make in clean
	   foreach (item in list_saved_arrays) begin
	      if (typeof(item) == VALTYPE_INT) then
	         free_array(load_array(item));
	   end
	end
	
	// initialize global and exported arrays
  	angry_set := load_create_array(ARR_ANGRY_TEAMS, 0);
  	pbs_local_traps := create_array_list(0);
	
  end else begin
	
	// check for angry people
	if (len_array(angry_set) > 0) then begin
		if (attack_delay == -1) then begin
			attack_delay := get_uptime + 1500;
		end else if (get_uptime > attack_delay) then begin
			debug_msg("angry: " + angry_set[0]);
			foreach n in angry_set begin
				closest_crit := 0;
				len := 999999;
				if (n) then begin
					foreach obj in list_as_array(LIST_CRITTERS) if obj then begin
						if (obj != dude_obj and not(is_critter_dead(obj)) and has_trait(TRAIT_OBJECT, obj, OBJECT_TEAM_NUM) == n and tile_distance_objs(obj, dude_obj) < len) then begin
							closest_crit := obj;
							len := tile_distance_objs(obj, dude_obj);
						end
					end
				end
				if (closest_crit) then begin
					attack_setup(closest_crit, dude_obj);
				end
			end
			resize_array(angry_set, 0);
			attack_delay := -1;
		end
	end
	
	// for TESTING
	/*if (key_pressed(DIK_F3)) then begin
		obj := create_object(PID_PBS_TRAP_KIT_SPIKE,0,0); add_mult_objs_to_inven(dude_obj, obj, 3);
		obj := create_object(PID_PBS_TRAP_KIT_MINE,0,0); add_mult_objs_to_inven(dude_obj, obj, 3);
		obj := create_object(PID_PBS_TRAP_KIT_SENSOR,0,0); add_mult_objs_to_inven(dude_obj, obj, 3);
		//foreach obj in list_as_array(LIST_CRITTERS) begin
			//if (obj != dude_obj and tile_distance_objs(dude_obj, obj) < 6 and not(anim_busy(obj))) then begin
				obj := create_object(16777459, tile_num_in_direction(dude_tile, 4, 4), dude_elevation);
				float_msg(dude_obj, "come here, "+proto_data(obj_pid(obj),cr_name), 0);
				//attack_setup(obj, dude_obj);
				//move_obj_inven_to_obj(obj, dude_obj);
				reg_anim_clear(obj);
				reg_anim_begin();
				reg_anim_obj_move_to_obj(obj, dude_obj, -1);
				reg_anim_end();
				//victim_obj := obj;
				
				//animate_move_obj_to_tile(obj, tile_num_in_direction(dude_tile,0,1), (ANIMATE_RUN ));
		  		//anim(obj, ANIMATE_ROTATION, 0);
			//end
		//end
		
	end*/
	
	if (hotkey_pressed(ini_assemble_hotkey)) then begin
	   if (not(key1)) then begin
	      item := critter_inven_obj(dude_obj, active_hand);
	      //display_msg("active: "+obj_name(item));
	      if (item) then if (is_trap_kit_pid(obj_pid(item))) then begin
	         if (try_assemble_trap(dude_obj, item) == true) then begin
	            variable pid, tmp;
	            pid := obj_pid(item);
	            // manually remove item and replace it with another from inventory
               inven_unwield(dude_obj);
               rm_obj_from_inven(dude_obj, item);
               destroy_object(item);
               obj := obj_carrying_pid_obj(dude_obj, pid);
               if (obj) then begin
                  n := obj_is_carrying_obj_pid(dude_obj, pid);
                  if (n > 1) then begin
                     // "split" one object from the stack
                     tmp := rm_mult_objs_from_inven(dude_obj, obj, 1);
                     tmp := get_weapon_ammo_count(obj);
                     set_weapon_ammo_count(obj, -1); // this way the following command should not "merge" this object back into existing stack
                     add_obj_to_inven(dude_obj, obj);
                     set_weapon_ammo_count(obj, tmp); // change charges back, but the item will remain in separate stack
                  end
                  wield_obj_critter(dude_obj, obj);
               end
	         end
	      end
	      key1 := true;
	   end else begin
	      key1 := false;
	   end
	end
	
	// traps setoff, realtime
	//display_msg("gl_traps: check setoff traps");
	arr := get_traps_for_map();
	if (len_array(arr) > 0) then begin
		foreach obj in list_as_array(LIST_CRITTERS) if (obj) then begin
			call check_setoff_traps(obj, arr);
		end
	end
	
  end
end
