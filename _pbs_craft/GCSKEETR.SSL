/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Skeeter
        Location: Gecko
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 10, 1998

           Credit given here to Tommy "the balls" who wrote the weapon upgrade code.
*/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\gecko.h"

#define NAME                    SCRIPT_GCSKEETR
//#define TOWN_REP_VAR            50
#define TOWN_REP_VAR            (GVAR_TOWN_REP_GECKO) //--was commented out for some reason and set to VC - killap
#define floater(x)		float_msg(self_obj, message_str(NAME,x),FLOAT_MSG_RED)

#define KNOWN                   1
#define GIVEN                   2

#define OFFERED                 1
#define TAKEN                   2

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

#define Vault_Known             (1)     // Temp Until get command from Jesse
#define Visited_City            (1)     // Temp Until get command from Jesse

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat;

/* Script Specific Procedure Calls */
procedure Node910;
procedure Node920;
procedure Node922;
procedure Node924;
procedure Node926;
procedure Node928;
procedure Node930;
procedure Node934;
procedure Node935;
procedure Node940;

procedure Node982;
procedure Node983;
procedure Node984;
procedure Node985;
procedure Node986;
procedure Node987;

procedure Node995;
procedure Node996;
procedure Node997;
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;
procedure Node034;
procedure Node035;
procedure Node036;
procedure Node110;
procedure Node111;
procedure Node112;
procedure Node113;
procedure Node137;
procedure Node138;
procedure Node139;
procedure Node140;
procedure Node150;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Repair_Kit                 (7)
#define LVAR_Upgrade                    (8)
#define LVAR_09_before                  (9)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


#define give_skeeter_money(x)         item_caps_adjust(dude_obj, -x);  \
                                       item_caps_adjust(self_obj, x)

// Begin Seraph's Fixes: changed each '250' to '25000' and added '/100' to the end
// Magnum: replaced '2000' with '400'
#define MCOST                          ((400 * (25000/(160 + (has_skill(dude_obj, SKILL_BARTER)))))/100)
// Desert Eagle: replaced '3000' with '1500'
#define DECOST                         ((1500 * (25000/(160 + (has_skill(dude_obj, SKILL_BARTER)))))/100)
// Hunting Rifle: replaced '4000' with '1750'
#define HRCOST                         ((1750 * (25000/(160 + (has_skill(dude_obj, SKILL_BARTER)))))/100)
// Assault Rifle: replaced '6000' with '2000'
#define ARCOST                         ((2000 * (25000/(160 + (has_skill(dude_obj, SKILL_BARTER)))))/100)
// FN FAL: replaced '12000' with '4000'
#define FNCOST                         ((4000 * (25000/(160 + (has_skill(dude_obj, SKILL_BARTER)))))/100)
// Cattle Prod: replaced '3000' with '1500'
#define CPCOST                         ((1500 * (25000/(160 + (has_skill(dude_obj, SKILL_BARTER)))))/100)
// End Seraph's Fixes


// by phobos2077:
#define _LEARN_CRAFT_SKEETER
#include "learn_craft.h"


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable k;
variable item;
variable combyn:=0;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_GECKO);
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET,AI_TOUGH_CITIZEN);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ( ( (global_var(GVAR_GECKO_MELTDOWN) == 1) or (global_var(GVAR_ENEMY_GECKO)) ) and (obj_can_see_obj(self_obj,dude_obj))) then begin //edit by killap - (global_var(GVAR_ENEMY_GECKO))
      set_local_var(LVAR_Hostile,1);
      attack(dude_obj);
   end
   else if ((local_var(LVAR_Hostile) == 2) and (obj_can_see_obj(self_obj,dude_obj))) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
       set_global_var(GVAR_ENEMY_GECKO,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   GetReaction;

   // CHANGE -nbk (Aldo doesn't care if your an enemy of the either side in Klamath)
   //             -he just wants a drink
   if (local_var(LVAR_Personal_Enemy) == 1) then begin
       call Node998;
   end
   else if ((get_critter_stat(dude_obj,STAT_iq) <= 3)) then begin
      call Node001;
   end
   else if ( (obj_is_carrying_obj_pid(dude_obj, PID_SUPER_TOOL_KIT)) and (local_var(LVAR_Repair_Kit) != GIVEN) ) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node025;
      gSay_End;
      end_dialogue;
   end
   else if (local_var(LVAR_Repair_Kit) == KNOWN) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node036;
      gSay_End;
      end_dialogue;
   end
   else if (local_var(LVAR_Upgrade) == OFFERED) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node032;
      gSay_End;
      end_dialogue;
   end
   else if (obj_is_carrying_obj_pid(dude_obj, PID_PLASMA_TRANSFORMER)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node006;
      gSay_End;
      end_dialogue;
   end
   else if (global_var(GVAR_GECKO_SKEETER_PART) == SKEETER_ASKED) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node008;
      gSay_End;
      end_dialogue;
   end
   else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_REPAIRED) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node007;
      gSay_End;
      end_dialogue;
   end
   else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_OPTIMIZED) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node007;
      gSay_End;
      end_dialogue;
   end
   else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node009;
      gSay_End;
      end_dialogue;
   end

end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

   if (local_var(LVAR_Repair_Kit) < GIVEN) then begin
      item:=create_object(PID_CAR_FUEL_CELL_CONTROLLER,0,0);
      add_obj_to_inven(self_obj,item);
   end

   set_global_var(GVAR_GECKO_SKEETER_STATUS,1); // added by killap - he is dead if this is set

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

procedure combat begin
end

procedure Node910 begin
   if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_REPAIRED) then
      call Node008;
   else
      call Node007;
end

procedure Node915 begin
 //remove repair_kit from pc inven,move fuel cell to pc,goto26
   if (obj_is_carrying_obj_pid(dude_obj, PID_SUPER_TOOL_KIT)) then begin
      set_local_var(LVAR_Repair_Kit, GIVEN);
      item:=obj_carrying_pid_obj(dude_obj, PID_SUPER_TOOL_KIT);
      rm_obj_from_inven(dude_obj,item);
      add_obj_to_inven(self_obj,item);
      item:=create_object(PID_CAR_FUEL_CELL_CONTROLLER,0,0);
      add_obj_to_inven(dude_obj,item);
      set_global_var(GVAR_QUEST_SUPER_REPAIR_KIT, SUPER_REPAIR_KIT_SUCCESS);
      GC_REP_ADJUST(5)
      display_msg(mstr(710));
      give_xp(EXP_SKEETER_REPAIR_KIT_GIVEN);
   end
   call Node026;
end

procedure Node920 begin
end

procedure Node922 begin
end

procedure Node924 begin
end

procedure Node926 begin
end

procedure Node928 begin
end

procedure Node930 begin
end

procedure Node934 begin
end

procedure Node935 begin
end

procedure Node940 begin
end

procedure Node995 begin
   if (get_critter_stat(dude_obj,STAT_ch) >= 7) then begin
       TopReact;
   end
   else begin
       BottomReact;
   end
end

procedure Node996 begin
   BottomReact;
end

procedure Node997 begin
   if (get_critter_stat(dude_obj,STAT_ch) >= 8) then
       call Node004;
   else
       call Node005;
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end

// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   floater(random(110,114));
end

procedure Node002 begin
   Reply(120);
   NOption(121,Node003,004);
   NOption(122,Node004,004);
end

procedure Node003 begin
   Reply(130);
   NOption(131,Node004,004);
end

procedure Node004 begin
   Reply(140);
   NOption(141,Node005,004);
   NOption(142,Node005,004);
   NOption(143,Node999,004);
   NOption(144,Node009,004);
end

procedure Node005 begin
   Reply(150);
   NOption(151,Node021,004);
end

procedure Node006 begin
   if (obj_is_carrying_obj_pid(dude_obj, PID_PLASMA_TRANSFORMER)) then begin
      item:=obj_carrying_pid_obj(dude_obj, PID_PLASMA_TRANSFORMER);
      rm_obj_from_inven(dude_obj,item);
      destroy_object(item);
      set_global_var(GVAR_GECKO_SKEETER_PART, SKEETER_RECEIVED);
      GC_REP_ADJUST(5)
      display_msg(mstr(700));
      give_xp(EXP_SKEETER_PART_RECIEVED);
      set_local_var(LVAR_Upgrade, OFFERED);
   end
   Reply(160);
   NOption(161,Node110,001);
   NOption(162,Node999,004);
end

procedure Node007 begin
   Reply(170);
   NOption(171,Node009,004);
   NOption(172,Node999,004);
end

procedure Node008 begin
   Reply(180);
   NOption(181,Node009,004);
   NOption(182,Node999,004);
end

procedure Node009 begin
   if (local_var(LVAR_09_before) == 0) then begin
      set_local_var(LVAR_09_before,1);
      Reply(190);
   end
   else begin
//need first time
      Reply(192);
   end
   if (dude_found_geck) then begin
   end
   else begin
      NOption(200,Node016,004);
   end
/////////////////////////////NEED CONDITIONAL -only do this if haven't got the battery
   if ( (global_var(GVAR_QUEST_SUPER_REPAIR_KIT) == 0) and (global_var(GVAR_DEN_SMITTY_PART) > 0) ) then
      NOption(201,Node002,004);

   NOption(202,Node110,004);
   NOption(203,Node015,004);
   NOption(204,Node999,004);
end

procedure Node010 begin
//need first time
   Reply(210);
   NOption(211,Node920,001);
   NOption(212,Node922,001);
   NOption(213,Node924,001);
   NOption(214,Node926,001);
   NOption(215,Node928,001);
   NOption(216,Node930,001);
   NOption(217,Node035,001);
   NOption(218,Node999,001);
end

procedure Node011 begin
   Reply(220);
   NOption(222,Node034,001);
   NOption(223,Node034,001);
   NOption(224,Node034,001);
   NOption(225,Node110,001);
   NOption(226,Node999,001);
end

procedure Node012 begin
   Reply(230);
   NOption(231,Node110,001);
   NOption(232,Node019,001);
   NOption(233,Node999,001);
end

procedure Node013 begin
   Reply(240);
   NOption(241,Node110,001);
   NOption(242,Node999,001);
end

procedure Node014 begin
   Reply(250);
   NOption(251,Node110,001);
   NOption(252,Node999,001);
end

procedure Node015 begin
   Reply(260);
   NOption(261,Node009,004);
   NOption(262,Node999,004);
end

procedure Node016 begin
   Reply(270);
   NOption(271,Node017,004);
   NOption(272,Node009,004);
   NOption(273,Node999,004);
end

procedure Node017 begin
   Reply(280);
   NOption(281,Node018,004);
end

procedure Node018 begin
   Reply(290);
   NOption(291,Node009,004);
   NOption(292,Node999,004);
end

procedure Node019 begin
   Reply(300);
   NOption(301,Node020,001);
   NOption(302,Node110,001);
   GOption(303,Node999,001);
end

procedure Node020 begin
   Reply(310);
   NOption(311,Node999,001);
   NOption(312,Node110,001);
   GOption(313,Node999,001);
end

procedure Node021 begin
   Reply(320);
   set_sfall_global(SGVAR_CRAFT_TOOLS, 1); // pbs: unlock crafting of Super Tool Kit
   display_msg(fixit_mstr(89));
   NOption(321,Node022,004);
end

procedure Node022 begin
   //add to our list of quests
   set_global_var(GVAR_QUEST_SUPER_REPAIR_KIT, SUPER_REPAIR_KIT_ACCEPT);
   set_local_var(LVAR_Repair_Kit, KNOWN);
   Reply(330);
   NOption(331,Node023,004); //set repair_kit=known,goto23
end

procedure Node023 begin
   Reply(340);
   NOption(341,Node009,004);
   NOption(342,Node024,004);
   NOption(343,Node999,004);
end

procedure Node024 begin
   Reply(360);
   NOption(361,Node009,004);
   BOption(362,combat,004);
   NOption(363,Node999,007);
end

procedure Node025 begin
//need if repair_kit=known
   if (local_var(LVAR_Repair_Kit) == KNOWN) then
      Reply(371);
   else
      Reply(370);

   NOption(372,Node915,004);
   NOption(373,Node999,004);
end

procedure Node026 begin
//need to check for other combinable parts
   call Node150;
   if (combyn == 0) then begin
      Reply(380);
   end
   else begin
      Reply(381);
      NOption(382,Node027,004);
   end

   NOption(383,Node009,004);
   NOption(384,Node999,004);
end

procedure Node027 begin
   Reply(390);
   NOption(391,Node028,004);
end

procedure Node028 begin
   Reply(400);
   NOption(401,Node029,004);
end

procedure Node029 begin
   Reply(410);
   NOption(411,Node030,004);
end

procedure Node030 begin
   Reply(420);
   NOption(421,Node031,004);
end

procedure Node031 begin
   set_global_var(GVAR_GECKO_SKEETER_PART, SKEETER_ASKED);
   Reply(430); //set skeeter part=asked
   NOption(431,Node999,004);
   NOption(432,Node999,004);
end

procedure Node032 begin
   Reply(440);
   NOption(441,Node110,004);
   NOption(442,Node999,004);
end

procedure Node033 begin
   Reply(450);
   NOption(451,Node110,001);
   NOption(452,Node999,001);
end

procedure Node034 begin
   Reply(460);
   NOption(461,Node940,001);
   NOption(462,Node110,001);
   NOption(463,Node999,001);
end

procedure Node035 begin
   Reply(470);
   NOption(471,Node110,001);
   NOption(472,Node999,001);
end

procedure Node036 begin
   Reply(500);
   NOption(501,Node999,001);
   NOption(502,Node999,001);
end

procedure Node110 begin
   Reply(600);
   if ((obj_is_carrying_obj_pid(dude_obj, PID_DESERT_EAGLE)) or (obj_is_carrying_obj_pid(dude_obj, PID_44_MAGNUM_REVOLVER))) then begin
      NOption(601, Node111, 004);
   end
   if ((obj_is_carrying_obj_pid(dude_obj, PID_HUNTING_RIFLE)) or (obj_is_carrying_obj_pid(dude_obj, PID_ASSAULT_RIFLE)) or (obj_is_carrying_obj_pid(dude_obj, PID_FN_FAL))) then begin
      NOption(602, Node112, 004);
   end
   if (obj_is_carrying_obj_pid(dude_obj, PID_CATTLE_PROD)) then begin
      NOption(603, Node113, 004);
   end
   // by phobos2077:
   if (get_sfall_global_int(SGVAR_CRAFT_AMMO) == 0) then begin
       NOption(1001, NodeCraft1, 004);
   end
   // ;
   NOption(604, Node009, 004);
   NOption(605, Node999, 004);
   //prev_node := 10;
end

procedure Node987 begin
   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      set_local_var(LVAR_Upgrade, TAKEN);
   end
   else begin
      give_skeeter_money(MCOST);
   end
   inven_unwield(dude_obj);
   remove_pid_qty(dude_obj, PID_44_MAGNUM_REVOLVER, 1)
   give_pid_qty(dude_obj, PID_44_MAGNUM_SPEEDLOADER, 1)
   call Node137;
end
procedure Node986 begin
   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      set_local_var(LVAR_Upgrade, TAKEN);
   end
   else begin
      give_skeeter_money(DECOST);
   end
   inven_unwield(dude_obj);
   remove_pid_qty(dude_obj, PID_DESERT_EAGLE, 1)
   give_pid_qty(dude_obj, PID_DESERT_EAGLE_EXT_MAG, 1)
   call Node137;
end
procedure Node985 begin
   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      set_local_var(LVAR_Upgrade, TAKEN);
   end
   else begin
      give_skeeter_money(HRCOST);
   end
   inven_unwield(dude_obj);
   remove_pid_qty(dude_obj, PID_HUNTING_RIFLE, 1)
   give_pid_qty(dude_obj, PID_SCOPED_HUNTING_RIFLE, 1)
   call Node137;
end
procedure Node984 begin
   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      set_local_var(LVAR_Upgrade, TAKEN);
   end
   else begin
      give_skeeter_money(ARCOST);
   end
   inven_unwield(dude_obj);
   remove_pid_qty(dude_obj, PID_ASSAULT_RIFLE, 1)
   give_pid_qty(dude_obj, PID_ASSAULT_RIFLE_EXT_MAG, 1)
   call Node137;
end
procedure Node983 begin
   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      set_local_var(LVAR_Upgrade, TAKEN);
   end
   else begin
      give_skeeter_money(FNCOST);
   end
   inven_unwield(dude_obj);
   remove_pid_qty(dude_obj, PID_FN_FAL, 1)
   give_pid_qty(dude_obj, PID_FN_FAL_NIGHT_SCOPE, 1)
   call Node137;
end
procedure Node982 begin
   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      set_local_var(LVAR_Upgrade, TAKEN);
   end
   else begin
      give_skeeter_money(CPCOST);
   end
   inven_unwield(dude_obj);
   remove_pid_qty(dude_obj, PID_CATTLE_PROD, 1)
   give_pid_qty(dude_obj, PID_SUPER_CATTLE_PROD, 1)
   call Node137;
end

procedure Node111 begin
variable temp_msg := "";
variable afford := false;
   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      if (obj_is_carrying_obj_pid(dude_obj, PID_44_MAGNUM_REVOLVER)) then begin
         temp_msg += mstr(680) + " ";
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_DESERT_EAGLE)) then begin
         temp_msg += mstr(681);
      end

      Reply(temp_msg);
      if (obj_is_carrying_obj_pid(dude_obj, PID_44_MAGNUM_REVOLVER)) then begin
         NOption(612, Node987, 004);
         afford := true;
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_DESERT_EAGLE)) then begin
         NOption(613, Node986, 004);
         afford := true;
      end
   end
   else begin
      if (obj_is_carrying_obj_pid(dude_obj, PID_44_MAGNUM_REVOLVER)) then begin
         temp_msg += mstr(610) + MCOST + mstr(5500) + " ";
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_DESERT_EAGLE)) then begin
         temp_msg += mstr(611) + DECOST + mstr(5500);
      end

      Reply(temp_msg);
      if ((obj_is_carrying_obj_pid(dude_obj, PID_44_MAGNUM_REVOLVER)) and (dude_caps >= MCOST)) then begin
         NOption(612, Node987, 004);
         afford := true;
      end
      if ((obj_is_carrying_obj_pid(dude_obj, PID_DESERT_EAGLE)) and (dude_caps >= DECOST)) then begin
         NOption(613, Node986, 004);
         afford := true;
      end
      if (afford == false) then begin
         NOption(617, Node999, 004);
      end
   end
   NOption(614, Node110, 004);
   NOption(615, Node009, 004);
   NOption(616, Node999, 004);
   //prev_node := 11;
end

procedure Node112 begin
variable temp_msg;
variable afford := false;

   if (local_var(LVAR_Upgrade) == OFFERED) then begin
      temp_msg := mstr(620);
      if (obj_is_carrying_obj_pid(dude_obj, PID_HUNTING_RIFLE)) then begin
         temp_msg += mstr(682) + " ";
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_ASSAULT_RIFLE)) then begin
         temp_msg += mstr(683) + " ";
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_FN_FAL)) then begin
         temp_msg += mstr(684);
      end

      Reply(temp_msg);
      if (obj_is_carrying_obj_pid(dude_obj, PID_HUNTING_RIFLE)) then begin
         NOption(624, Node985, 004);
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_ASSAULT_RIFLE)) then begin
         NOption(625, Node984, 004);
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_FN_FAL)) then begin
         NOption(626, Node983, 004);
      end
   end
   else begin
      temp_msg := mstr(620);
      if (obj_is_carrying_obj_pid(dude_obj, PID_HUNTING_RIFLE)) then begin
         temp_msg += mstr(621) + HRCOST + mstr(5500) + " ";
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_ASSAULT_RIFLE)) then begin
         temp_msg += mstr(622) + ARCOST + mstr(5500) + " ";
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_FN_FAL)) then begin
         temp_msg += mstr(623) + FNCOST + mstr(5500);
      end

      Reply(temp_msg);
      if ((obj_is_carrying_obj_pid(dude_obj, PID_HUNTING_RIFLE)) and (dude_caps >= HRCOST)) then begin
         NOption(624, Node985, 004);
         afford := true;
      end
      if ((obj_is_carrying_obj_pid(dude_obj, PID_ASSAULT_RIFLE)) and (dude_caps >= ARCOST)) then begin
         NOption(625, Node984, 004);
         afford := true;
      end
      if ((obj_is_carrying_obj_pid(dude_obj, PID_FN_FAL)) and (dude_caps >= FNCOST)) then begin
         NOption(626, Node983, 004);
         afford := true;
      end
      if (afford == false) then begin
         NOption(617, Node999, 004);
      end
   end


   NOption(614, Node110, 004);
   NOption(615, Node009, 004);
   NOption(616, Node999, 004);
   //prev_node := 12;
end

procedure Node113 begin
   if (local_var(LVAR_Upgrade) == OFFERED) then
      Reply(685);
   else
      Reply(mstr(630) + CPCOST + mstr(5500));

   if ( (dude_caps >= CPCOST) or (local_var(LVAR_Upgrade) == OFFERED) ) then begin
      NOption(631, Node982, 004);
   end else begin
      NOption(617, Node999, 004);
   end
   NOption(614, Node110, 004);
   NOption(615, Node009, 004);
   NOption(616, Node999, 004);
   //prev_node := 13;
end

procedure Node137 begin
   game_time_advance(game_ticks(3*3600)); //3 hours
   Reply(640);
   NOption(641, Node138, 004);
end

procedure Node138 begin
   Reply(650);
   NOption(651, Node139, 004);
end

procedure Node139 begin
   Reply(660);
   NOption(661, Node140, 004);
end

procedure Node140 begin
   Reply(670);
   NOption(671, Node110, 004);
   NOption(672, Node009, 004);
   NOption(673, Node999, 004);
end

procedure Node150 begin
   combyn:=0;
      if (obj_is_carrying_obj_pid(dude_obj, PID_44_MAGNUM_REVOLVER)) then begin
         combyn:=1;
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_DESERT_EAGLE)) then begin
         combyn:=1;
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_HUNTING_RIFLE)) then begin
         combyn:=1;
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_ASSAULT_RIFLE)) then begin
         combyn:=1;
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_FN_FAL)) then begin
         combyn:=1;
      end
      if (obj_is_carrying_obj_pid(dude_obj, PID_CATTLE_PROD)) then begin
         combyn:=1;
      end
end

//xxxxxxxxxxxxxxxxxxxx