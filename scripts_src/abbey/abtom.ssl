/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "abtom"
#include "../headers/define.h"
#include "../headers/abbey.h"

#define NAME                    SCRIPT_ABTOM
#define TOWN_REP_VAR            GVAR_TOWN_REP_ABBEY

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;
procedure talk_p_proc;

procedure Node998; //combat
procedure Node999; //end


procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node990;
procedure Node991;
procedure Node992;
procedure Node993;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define LVAR_Flags                      (4)
#define LVAR_Herebefore                 (5)
#define LVAR_Hostile                    (6)
#define LVAR_Personal_Enemy             (7)
#define LVAR_Said_Thanks                (8)
#define LVAR_Flee                       (9)
#define LVAR_Peterson_Talked            (10)

variable tmp;
variable tile;
/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      ndebug("param == 1");
      if ( (global_var(GVAR_ABBEY_GRAVES) == 1) ) then begin
         ndebug("global == 1");
         if ((game_time_hour > 000) and (game_time_hour < 400)) then begin
               rm_fixed_timer_event(self_obj, fixed_param);
               add_timer_event(self_obj, game_ticks(1), 3);
         end else begin
               rm_fixed_timer_event(self_obj, fixed_param);
               add_timer_event(self_obj, game_ticks(1), 4);
         end
      end else if ( (global_var(GVAR_ABBEY_GRAVES) == 2) ) then begin
            if (self_tile != 22847) then begin
               anim_move_to_point_rate(22847, 3)
            end
            rm_fixed_timer_event(self_obj, fixed_param);
            add_timer_event(self_obj, game_ticks(1), 1);
      end else if ( (global_var(GVAR_ABBEY_GRAVES) == 3) ) then begin
         if (self_tile != 26271) then begin
            anim_move_to_point_rate(26271, 3)
            rm_fixed_timer_event(self_obj, fixed_param);
            add_timer_event(self_obj, game_ticks(1), 1);
         end else begin
            rm_fixed_timer_event(self_obj, fixed_param);
            set_local_var(LVAR_Peterson_Talked,1);
            add_timer_event(self_obj, game_ticks(5), 2);
         end
      end else
          add_timer_event(self_obj, game_ticks(1), 1);
   end else if (fixed_param == 2) then begin
     ndebug("param == 3");
      if ((game_time_hour > 000) and  (game_time_hour < 600)) then begin
         if (self_tile != 26472) then begin
            anim_move_to_point_rate(26472, 3)
         end
         rm_fixed_timer_event(self_obj, fixed_param);
         add_timer_event(self_obj, game_ticks(1), 2);
      end else begin
         tmp := random(1,5);
         if (tmp == 1) then
            tile := 23470;
         else if (tmp == 2) then
            tile := 23064;
         else if (tmp == 3) then
            tile := 24870;
         else if (tmp == 4) then
            tile := 24864;
         else if (tmp == 5) then
            tile := 22860;
         if (anim_busy(self_obj) == false) then begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
               self_walk_to_tile(tile);
            reg_anim_end();
         end
         rm_fixed_timer_event(self_obj, fixed_param);
         add_timer_event(self_obj, game_ticks(10), 2);
      end
   end else if (fixed_param == 3) then begin //move to grave yard
      ndebug("param == 3");
      if (self_tile != 19259) then begin
         ndebug("self_tile !=19259");
      anim_move_to_point_rate(19259, 3)

       /*  if (anim_busy(self_obj) == false) then begin
            display_msg("MOVE!");
            reg_anim_clear(self_obj);
            reg_anim_begin();
               self_walk_to_tile(19259);
            reg_anim_end();
         end*/
      end
         rm_fixed_timer_event(self_obj, fixed_param);
         add_timer_event(self_obj, game_ticks(1), 1);
   end else if (fixed_param == 4) then begin
      if (self_tile != 22847) then begin

       anim_move_to_point_rate(22847, 3)

         /*if (anim_busy(self_obj) == false) then begin //move out of map
            reg_anim_clear(self_obj);
            reg_anim_begin();
               self_walk_to_tile(22847);
            reg_anim_end();
         end*/
      end
      rm_fixed_timer_event(self_obj, fixed_param);
      add_timer_event(self_obj, game_ticks(1), 1);
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure critter_p_proc begin

   if (self_visible) then begin
      if (self_tile == 22847) then begin
         set_self_invisible; //invisible
      end
   end

   if not(self_visible) then begin
      if (self_tile != 22847) then begin
         set_self_visible; //visible
      end
   end

   if (hostile and self_can_see_dude) then begin
      self_attack_dude;
   end else if (local_var(LVAR_Flee) == 1 ) then begin
      Flee_From_Dude
   end
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   if ( (global_var(GVAR_ABBEY_GRAVES) == 3) and (local_var(LVAR_Peterson_Talked) == 1) ) then
      display_msg(mstr(1003));
   else begin
      if (local_var(LVAR_Herebefore) == 0) then
         display_msg(mstr(100));
      else
         display_msg(mstr(102));
   end
end


procedure description_p_proc begin
   script_overrides;
   if ( (global_var(GVAR_ABBEY_GRAVES) == 3) and (local_var(LVAR_Peterson_Talked) == 1) ) then
      display_msg(mstr(1004));
   else
      display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end

procedure destroy_p_proc begin
   set_global_var(GVAR_ABBEY_GRAVES,4);
   inc_good_critter
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   if (local_var(LVAR_Peterson_Talked) == 0) then begin
     move_to(self_obj, 22847, self_elevation);
     set_self_invisible; //invisible
   end

   if ( (global_var(GVAR_ABBEY_GRAVES) == 3) and (local_var(LVAR_Peterson_Talked) == 1) ) then
      set_self_team(TEAM_ABBEY);

   add_timer_event(self_obj, game_ticks(1), 1);
end

procedure map_exit_p_proc begin
   if (global_var(GVAR_ABBEY_GRAVES) == 2) then begin
      destroy_object(self_obj);
   end
end
/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
  if (global_var(GVAR_ABBEY_GRAVES) == 2) then
      call Node013;
  else if (global_var(GVAR_ABBEY_GRAVES) > 2) then begin
      if (local_var(LVAR_Said_Thanks) == 1) then
         call Node012;
      else if (local_var(LVAR_Peterson_Talked) == 1) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_start;
            call Node009;
         gSay_end;
         end_dialogue;
      end else
         call Node015;
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_start;
         call Node001;
      gSay_end;
      end_dialogue;
   end
end

procedure Node001 begin
   Reply(200);
   NOption(201,Node002,4);
   NOption(206,Node999,4);
end

procedure Node002 begin
   Reply(202);
   BOption(203,Node003,4);
   NOption(204,Node003,4);
   NOption(206,Node999,4);

   set_local_var(LVAR_Herebefore,1);
end

procedure Node003 begin
   Reply(207);
   NOption(208,Node004,4);
   NOption(209,Node999,4);
end

procedure Node004 begin
   Reply(210);
   if (global_var(GVAR_GRAVES_UNEARTHED) > 0) then begin
      NOption(450,Node005,4);
      NOption(451,Node999,4);
   end
   NOption(211,Node005,4);
   NOption(206,Node999,4);
end

procedure NOde005 begin
   Reply(212);
   if (map_var(MVAR_Crops_Stolen) == 1) then
      NOption(217,Node007,4);
   NOption(213,Node993,4);
   NOption(205,Node999,4);
end

procedure Node006 begin
   Reply(214);
   NOption(215,Node992,4);
   NOption(216,Node990,4);
end

procedure Node007 begin
   Reply(218);
   NOption(220,Node008,4);
   NOption(219,Node990,4);
end

procedure Node008 begin
   Reply(221);
   NOption(222,Node991,4);
end

procedure Node009 begin
   Reply(301);
   NOption(302,Node010,4);
end

procedure Node010 begin
   Reply(303);
   NOption(304,Node011,4);
end

procedure Node011 begin
   variable item;

   item:=create_object(PID_LIGHTER,0,0);
   add_obj_to_inven(dude_obj,item);
   Reply(305);
   NOption(306,Node999,4);
   set_local_var(LVAR_Said_Thanks,1);
end


procedure Node012 begin
   floater(307);
end

procedure Node013 begin
   floater(1002);
end
procedure Node990 begin
   reg_anim_clear(self_obj);
   set_global_var(GVAR_ABBEY_GRAVES,2);
   display_msg(mstr(1001));
   give_xp(500);
   inc_global_var_amt(GVAR_TOWN_REP_ABBEY,10);
end

procedure Node991 begin
   reg_anim_clear(self_obj);
   set_global_var(GVAR_ABBEY_GRAVES,3);
   display_msg(mstr(1000));
   give_xp(500); // pbs: lowered from 1000
   inc_general_rep(5);
   inc_global_var_amt(GVAR_TOWN_REP_ABBEY,10);
end

procedure Node999 begin
end

procedure Node998 begin
   set_hostile;
   set_global_var(GVAR_TOWN_REP_ABBEY, -30);
end

procedure Node992 begin
   set_local_var(LVAR_Flee,1);
   attack_setup(dude_obj,self_obj);
end

procedure Node993 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -5 ) ) ) then
      call Node006;
   else
      call Node014;
end

procedure Node014 begin
   Reply(400);
   BOption(306,Node998,4);
end

procedure Node015 begin
   floater(223);
end
