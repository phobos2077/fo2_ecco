/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/* Random Encounter scripts. These will be filled in more once they
   have been designed.
*/

#include "..\headers\define.h"

#define NAME                    SCRIPT_ECTRAPPR

#include "..\headers\command.h"

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat_p_proc;
procedure timed_event_p_proc;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Restock_Time               (7)
#define LVAR_Leave                      (8)
#define LVAR_Restock_Time_Fix           (9) //added by killap

procedure NodeFleeing;
procedure NodeFighting;

#define GECKO_PRICE 25
#define GOLDEN_GECKO_PRICE 125
#define TAUNT_CHANCE 20
#define TIMER_DESTROY 1

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;

variable gecko_pelt;
variable gold_gecko_pelt;
variable gecko_pelt_num;
variable gecko_gold_pelt_num;
variable normal_price;
variable golden_price;
variable playerSoldSex;

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == TIMER_DESTROY) then begin
      destroy_object(self_obj);
   end
end

procedure map_enter_p_proc begin
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_RND_TRAPPER);
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET,AI_GENERIC_GUARDS);
   
   //added by killap - fix for game_time going negative after 7 years
   if (((game_time) < 0) and (local_var(LVAR_Restock_Time_Fix) == 0)) then begin
      set_local_var(LVAR_Restock_Time, game_time - 1);
      set_local_var(LVAR_Restock_Time_Fix, 1);
   end
   //end added   
   
   if (local_var(LVAR_Restock_Time) < game_time) then begin
      check_restock_item(PID_GECKO_PELT, 5, 7, 80)
      check_restock_item(PID_GOLDEN_GECKO_PELT, 1, 5, 60)
      set_local_var(LVAR_Restock_Time, (random(6,12) * ONE_GAME_DAY) + game_time);
   end
end

procedure critter_p_proc begin
   if ((local_var(LVAR_Hostile) == 2) and (obj_can_see_obj(self_obj,dude_obj))) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

   if (local_var(LVAR_Leave) == 1) then begin
      if (obj_on_screen(self_obj)) then begin
         if (not anim_busy(self_obj)) then begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
            animate_move_to_tile(tile_num_in_direction(self_tile, Run_Away_From_Dude_Dir, 6));
            reg_anim_end();
         end
      end else begin
         add_timer_event(self_obj, 0, TIMER_DESTROY);
      end
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

procedure talk_p_proc begin
   if (local_var(LVAR_Herebefore) == 0) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gdialog_set_barter_mod(-70);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
      set_local_var(LVAR_Herebefore, 1);
   end else begin
      call Node008;
   end

   if (playerSoldSex) then begin
      playerSoldSex := 0;
      if (dude_spouse_is_female) then
         poison(Miria_Ptr, 30);
      else if (dude_spouse_is_male) then
         poison(Davin_Ptr, 30);
      else
         poison(dude_obj, 30);
      call Node006;
   end
end

procedure destroy_p_proc begin
   //inc_evil_critter
   inc_neutral_critter //edit by killap
end

procedure look_at_p_proc begin
   script_overrides;
   if (get_critter_stat(self_obj,STAT_gender) == GENDER_MALE) then
       display_msg(mstr(100));
   else
       display_msg(mstr(200));
end

procedure description_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(101));
   else
      display_msg(mstr(102));
end

procedure use_skill_on_p_proc begin
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end
end

procedure combat_p_proc begin
   if (critter_is_fleeing(self_obj)) then begin
      if (Random(1, 100) <= TAUNT_CHANCE) then begin
         call NodeFleeing;
      end
   end else begin
      if (Random(1, 100) <= TAUNT_CHANCE) then begin
         call NodeFighting;
      end
   end
end

procedure Node999 begin
end

procedure Node001 begin
   Reply(103);
   NOption(104, Node002, 4);
   NOption(105, Node999, 4);
   NLowOption(106, Node007);
end

procedure Node002 begin
   Reply(107);
   NOption(108, Node003, 4);
   NOption(109, Node999, 4);
   NLowOption(110, Node999);
end

procedure NodeBuyNormal begin
   if (dude_caps >= normal_price) then begin
      item_caps_adjust(dude_obj, -normal_price);
      item_caps_adjust(self_obj, normal_price);
      rm_obj_from_inven(self_obj, gecko_pelt);
      add_obj_to_inven(dude_obj, gecko_pelt);
      call Node003;
   end else begin
      call Node005;
   end
end

procedure NodeBuyGolden begin
   if (dude_caps >= golden_price) then begin //edit was normal_price --edit by killap
      item_caps_adjust(dude_obj, -golden_price);
      item_caps_adjust(self_obj, golden_price);
      rm_obj_from_inven(self_obj, gold_gecko_pelt);
      add_obj_to_inven(dude_obj, gold_gecko_pelt);
      call Node003;
   end else begin
      call Node005;
   end
end

procedure Node003 begin
  /*
   variable amt;
   variable sub;
   variable gecko_pelt_inv_msg; // added by killap (expansion)
   
   gecko_pelt := obj_carrying_pid_obj(self_obj, PID_GECKO_PELT);
   gold_gecko_pelt := obj_carrying_pid_obj(self_obj, PID_GOLDEN_GECKO_PELT);
   gecko_pelt_num := obj_is_carrying_obj_pid(self_obj, PID_GECKO_PELT);
   gecko_gold_pelt_num := obj_is_carrying_obj_pid(self_obj, PID_GOLDEN_GECKO_PELT);

   amt := has_skill(self_obj, SKILL_BARTER) - has_skill(dude_obj, SKILL_BARTER);

   if (amt < 0.0) then begin
      amt *= -1;
      sub := 1;
   end

   amt := (amt * 1.0) / 100.0;
   if (amt > .50) then amt := .50;

   if (not sub) then
      normal_price := floor (GECKO_PRICE + (GECKO_PRICE * amt));
   else
      normal_price := floor (GECKO_PRICE - (GECKO_PRICE * amt));

   if (not sub) then
      golden_price := floor (GOLDEN_GECKO_PRICE + (GOLDEN_GECKO_PRICE * amt));
   else
      golden_price := floor (GOLDEN_GECKO_PRICE - (GOLDEN_GECKO_PRICE * amt));

   // added by killap - expansion
   if (gecko_pelt_num == 0 and gecko_gold_pelt_num > 0) then
      gecko_pelt_inv_msg := mstr(140) + gecko_gold_pelt_num + mstr(113);
   else if (gecko_pelt_num > 0 and gecko_gold_pelt_num == 0) then
      gecko_pelt_inv_msg := mstr(141) + gecko_pelt_num + mstr(112);
   else if (gecko_pelt_num == 0 and gecko_gold_pelt_num == 0) then
      gecko_pelt_inv_msg := mstr(142);
   else
      gecko_pelt_inv_msg := mstr(111) + gecko_pelt_num + mstr(112) + " " + gecko_gold_pelt_num + mstr(113);
   // end added

   Reply(gecko_pelt_inv_msg);
   
   if (gecko_pelt_num > 0) then
      NOption(mstr(134) + normal_price, NodeBuyNormal, 4);
   if (gecko_gold_pelt_num > 0) then
      NOption(mstr(135) + golden_price, NodeBuyGolden, 4);
   */   
   
   // by phobos2077: replaced dialog-based barter with normal barter
   gdialog_mod_barter(-70); 
   NOption(115, Node999, 4);
end

procedure Node004 begin
   Reply(116);
   NOption(117, Node999, 4);
end

procedure Node006a begin
   fadeout(1);
   playerSoldSex := 1;
   if ( (dude_spouse_is_female) or (dude_spouse_is_male) ) then
      debug_msg("you are married.");
   else
      up_sex_status;
   call Node999;
end

procedure Node005 begin
   if (dude_spouse_is_female) then
      Reply(118);
   else if (dude_spouse_is_male) then
      Reply(119);
   else
      Reply(120);
   NOption(121, Node006a, 4);
   NOption(122, Node999, 4);
end

procedure Node006 begin
   fadein(1);
   add_obj_to_inven(dude_obj, create_object(PID_GECKO_PELT, self_tile, 0));
   add_obj_to_inven(dude_obj, create_object(PID_GOLDEN_GECKO_PELT, self_tile, 0));

   set_local_var(LVAR_Leave, 1);

   if (dude_spouse_is_female) then
      display_msg(mstr(123));
   else if (dude_spouse_is_male) then
      display_msg(mstr(124));
   else
      display_msg(mstr(125));
end

procedure Node007 begin
   add_obj_to_inven(dude_obj, create_object(PID_GECKO_PELT, self_tile, 0));
   Reply(127);
   NLowOption(128, Node999);
end

procedure Node008 begin
   float_msg(self_obj, mstr(129), FLOAT_MSG_NORMAL);
end

procedure NodeFleeing begin
   float_msg(self_obj, mstr(136 + Random(0, 2)), FLOAT_MSG_YELLOW);
end
procedure NodeFighting begin
   float_msg(self_obj, mstr(130 + Random(0, 3)), FLOAT_MSG_RED);
end