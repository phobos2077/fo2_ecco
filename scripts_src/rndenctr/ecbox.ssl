/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Random Box...
        Locked: NO
        Trapped: NO
        Description: This box has different stuff depending on what area you are in.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/

/* Include Files */
#define SCRIPT_REALNAME "ecbox"

/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_INACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_METAL
#define LOCK_STATUS                     STATE_STANDARD_LOCK

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-20)

#define DOOR_STRENGTH                   (2)

#define ZONE_1 1
#define ZONE_2 2
#define ZONE_3 3
#define ZONE_4 4

#define custom_look_at_p_proc
#define custom_map_enter_p_proc
#define no_pickup
#include "../headers/containers.h"
procedure GetZone;
procedure CreateContents;

#include "../_pbs_headers/ecco_ids.h" // pbs

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/
procedure look_at_p_proc begin
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called. The main purpose of
   this procedure is to lock the door from the outset, rather than having to worry about
   it through Mapper. After the door has been unlocked, it will remain as such, unless
   the player locks it once more.
***************************************************************************************/
procedure map_enter_p_proc begin

/* Set up the door state when the player first enters the map */
   if (local_var(LVAR_Set_Door_Status) == 0) then begin
       set_local_var(LVAR_Set_Door_Status,1);
       set_local_var(LVAR_Locked,LOCKED_STATUS);
       set_local_var(LVAR_Trapped,TRAPPED_STATUS);
   end

   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_lock(self_obj);
   end

   else begin
       obj_unlock(self_obj);
   end

   call CreateContents;
end

#define INBOUNDS(x, x1, y, y1, res)     \
   if (worldmap_xpos >= x and worldmap_xpos <= x1) then begin    \
      if (worldmap_ypos >= y and worldmap_ypos <= y1) then begin \
         res := 1;                                               \
      end                                                        \
   end

procedure GetZone begin
   variable val;

   INBOUNDS(0, 350, 0, 700, val)
   if (val) then
      return ZONE_1;

   INBOUNDS(350, 1400, 0, 400, val)
   if (val) then
      return ZONE_2;

   INBOUNDS(350, 1400, 400, 1100, val)
   if (val) then
      return ZONE_3;

   INBOUNDS(350, 1400, 1100, 1500, val) // pbs: fixed coordinates
   if (val) then
      return ZONE_4;

   return ZONE_1;
end

procedure CreateZone1 begin
   check_restock_item(PID_XANDER_ROOT, 1, 2, 5)
   check_restock_item(PID_BROC_FLOWER, 1, 2, 5)
   check_restock_item(PID_KNIFE, 1, 1, 10)
   check_restock_item(PID_SHARPENED_POLE, 1, 2, 20)
   check_restock_item(PID_SPEAR, 1, 1, 5)
   check_restock_item(PID_ROCK, 1, 10, 20)
   check_restock_item(PID_HEALING_POWDER, 1, 1, 5)
   check_restock_item(PID_MUTATED_FRUIT, 1, 2, 10)
   // added by phobos2077:
   check_restock_item(PID_ROPE, 1, 1, 10)
end

procedure CreateZone2 begin
   check_restock_item(PID_JET, 1, 2, 10)
   check_restock_item(PID_ANTIDOTE, 1, 1, 5)
   check_restock_item(PID_KNIFE, 1, 2, 5)
   check_restock_item(PID_IGUANA_ON_A_STICK, 1, 3, 5)
   check_restock_item(PID_NUKA_COLA, 1, 2, 5)
   check_restock_item(PID_BEER, 1, 1, 5)
   check_restock_item(PID_HEALING_POWDER, 1, 1, 9)
   check_restock_item(PID_BOOZE, 1, 1, 5)
   check_restock_item(PID_FLARE, 1, 2, 5)
   check_restock_item(PID_THROWING_KNIFE, 1, 2, 5)
   check_restock_item(PID_BRASS_KNUCKLES, 1, 1, 5) // pbs: replaced PID_SPIKED_KNUCKLES
   check_restock_item(PID_10MM_JHP, 1, 1, 2)
   check_restock_item(PID_10MM_AP, 1, 1, 2)
   check_restock_item(PID_BOTTLE_CAPS, 1, 10, 2)
   // added by phobos2077:
   check_restock_item(PID_ROPE, 1, 1, 10)
   check_restock_item(PID_PUMP_PARTS, 1, 1, 10)
   check_restock_item(PID_9MM_BALL, 1, 1, 2)
   check_restock_item(PID_PBS_FOOD_1, 1, 1, 2)
   check_restock_item(PID_PBS_FOOD_2, 1, 1, 2)
end

procedure CreateZone3 begin
   check_restock_item(PID_HEALING_POWDER, 1, 2, 2)
   check_restock_item(PID_STIMPAK, 1, 1, 1)
   check_restock_item(PID_ANTIDOTE, 1, 1, 2)
   check_restock_item(PID_5MM_AP, 1, 1, 1)
   check_restock_item(PID_5MM_JHP, 1, 1, 1)
   check_restock_item(PID_FRAG_GRENADE, 1, 2, 2)
   check_restock_item(PID_MUTATED_FRUIT, 1, 5, 10)
   check_restock_item(PID_IGUANA_ON_A_STICK, 1, 5, 10)
   check_restock_item(PID_JET, 1, 2, 10)
   check_restock_item(PID_BEER, 1, 2, 10)
   check_restock_item(PID_CROWBAR, 1, 1, 8)
   check_restock_item(PID_KNIFE, 1, 2, 10)
   check_restock_item(PID_10MM_JHP, 1, 1, 7)
   // added by phobos2077:
   check_restock_item(PID_ROPE, 1, 1, 10)
   check_restock_item(PID_PUMP_PARTS, 1, 1, 10)
   check_restock_item(PID_PBS_40MM_HE, 1, 1, 2)
   check_restock_item(PID_PBS_FOOD_1, 1, 1, 2)
   check_restock_item(PID_PBS_FOOD_2, 1, 1, 2)
end

procedure CreateZone4 begin
   check_restock_item(PID_HEALING_POWDER, 1, 5, 5)
   check_restock_item(PID_STIMPAK, 1, 1, 1)
   check_restock_item(PID_ANTIDOTE, 1, 2, 2)
   check_restock_item(PID_PLASMA_GRENADE, 1, 1, 1)
   check_restock_item(PID_5MM_JHP, 1, 1, 2)
   check_restock_item(PID_5MM_AP, 1, 1, 1)
   check_restock_item(PID_SMALL_ENERGY_CELL, 1, 1, 3)
   check_restock_item(PID_MICRO_FUSION_CELL, 1, 1, 3)
   check_restock_item(PID_MUTATED_FRUIT, 1, 3, 8)
   check_restock_item(PID_IGUANA_ON_A_STICK, 1, 3, 8)
   check_restock_item(PID_BOOZE, 1, 2, 7)
   check_restock_item(PID_JET, 1, 2, 20)
   // added by phobos2077:
   check_restock_item(PID_ROPE, 1, 1, 10)
   check_restock_item(PID_PUMP_PARTS, 1, 1, 10)
   check_restock_item(PID_PBS_40MM_HE, 1, 1, 2)
end

procedure CreateContents begin
   variable zone;

   zone := GetZone;

   if (zone == ZONE_1) then begin
      call CreateZone1;
   end else if (zone == ZONE_2)then begin
      call CreateZone2;
   end else if (zone == ZONE_3) then begin
      call CreateZone3;
   end else if (zone == ZONE_4) then begin
      call CreateZone4;
   end
end
