/**
 * Adds bonus move points to all critters based on AG.
 */

#include "../sfall/lib.math.h"
#include "../sfall/define_lite.h"
#include "../sfall/command_extra.h"
#include "../sfall/sfall.h"
#include "../_pbs_headers/ecco.h"

#define INI_SECTION     "COMBAT_FREE_MOVE"


variable
   ini_mult_dude,
   ini_mult_npc,
   ini_shift;


/*
HOOK_COMBATTURN
Runs before and after each turn in combat (for both PC and NPC).

int     arg0 - event type:
               1 - start of turn
               0 - normal end of turn
              -1 - combat ends abruptly (by script or by pressing Enter during PC turn)
              -2 - combat ends normally (hook always runs at the end of combat)
Critter arg1 - critter doing the turn
bool    arg2 - 1 at the start/end of the player's turn after loading a game saved in combat mode, 0 otherwise

int     ret0 - pass 1 at the start of turn to skip the turn, pass -1 at the end of turn to force end of combat
*/

procedure combatturn_hook begin
   variable
      eventType := get_sfall_arg,
      critter := get_sfall_arg;

   if (eventType == 1 and critter != dude_obj) then begin
      variable
         ag := get_critter_stat(critter, STAT_ag),
         freeMove := round(math_max(ag + ini_shift, 0) * ini_mult_npc);

      if (freeMove > 0) then begin
         set_combat_free_move(freeMove);
         debug_msg("gl_combat_free_move: Setting combat_free_move for NPC "+obj_name(critter)+"'s turn to "+freeMove);
      end
   end
end


/*
HOOK_STDPROCEDUREEND
Runs after Fallout executes a standard procedure (handler) in any script of any object. NOTE: this hook will not be executed for start, critter_p_proc, timed_event_p_proc, and map_update_p_proc procedures.

int     arg0 - the number of the standard script handler (see define.h)
Obj     arg1 - the object that owns this handler (self_obj)
Obj     arg2 - the object that called this handler (source_obj, can be 0)
int     arg3 - 1 after procedure execution
obj     arg4 - target_obj
int     arg5 - fixed_param
*/
procedure stdprocedure_hook begin
   variable
      handler := get_sfall_arg,
      self := get_sfall_arg,
      source := get_sfall_arg,
      arg3 := get_sfall_arg,
      target := get_sfall_arg,
      param := get_sfall_arg;

   if (handler == combat_proc and self == dude_obj and param == COMBAT_SUBTYPE_TURN) then begin
      //display_msg("combat_proc. self: "+obj_name_safe(self)+", source: "+obj_name_safe(source)+", target: "+obj_name_safe(target)+", param: "+param);
      variable
         ag := get_critter_stat(self, STAT_ag),
         freeMove := round(math_max(ag + ini_shift, 0) * ini_mult_dude);

      if (freeMove > 0) then begin
         // Add vanilla move points from perk
         variable baseFreeMove := get_combat_free_move;
         freeMove += baseFreeMove;
         set_combat_free_move(freeMove);
         debug_msg("gl_combat_free_move: Setting combat_free_move for player's turn from "+baseFreeMove+" to "+freeMove);
      end
   end
end

procedure start begin
   if not game_loaded then return;

   float_from_ini_file_clamped(mult_dude, INI_COMBAT, INI_SECTION, 0.0, 10.0);
   float_from_ini_file_clamped(mult_npc, INI_COMBAT, INI_SECTION, 0.0, 10.0);
   int_from_ini_file_clamped(shift, INI_COMBAT, INI_SECTION, -9, 0);

   if (ini_mult_dude > 0.01) then begin
      register_hook_proc(HOOK_STDPROCEDURE, stdprocedure_hook);
   end
   if (ini_mult_npc > 0.01) then begin
      register_hook_proc(HOOK_COMBATTURN, combatturn_hook);
   end
end


