/*
   Adds ambient radiation to certain areas of Fallout 2 world.
*/

#include "../sfall/sfall.h"
#include "../sfall/define_lite.h"
#include "../headers/maps.h"
#include "../headers/global.h"

#define SCRIPT_REALNAME    "gl_pbs_radiation"
#include "../_pbs_headers/ecco_log.h"
#include "../_pbs_headers/math_ext.h"

#define SGVAR_RADIATION_LAST_UPDATE     "PBSRADTM"

// Radiation in rads per day
#define RADIATE_GECKO                   (96)
#define RADIATE_GECKO_FIXED             (48)
#define RADIATE_GECKO_OPTIMIZED         (24)
#define RADIATE_GECKO_MELTDOWN         (480)
#define RADIATE_GECKO_PLANT_MULT         (3)
#define RADIATE_BH                      (48)
#define RADIATE_BH_FIXED                (12)

#define last_radiated                   get_sfall_global_int(SGVAR_RADIATION_LAST_UPDATE)
#define update_last_radiated            set_sfall_global(SGVAR_RADIATION_LAST_UPDATE, game_time)

#define gecko_plant_status              global_var(GVAR_VAULT_PLANT_STATUS)
#define gecko_plant_is_meltdown         (global_var(GVAR_GECKO_MELTDOWN) > 0)


// TODO: engine doesn't allow to irradiate party members (yet..)
/*procedure radiate_party(variable amt) begin
   variable obj;
   display_msg("radiate "+amt);
   foreach (obj in party_member_list_critters) begin
      radiation_inc(obj, amt);
   end
end*/

procedure get_area_radiation_per_day begin
   if (get_game_mode BWAND WORLDMAP) then begin
      // TODO: radiation on world map?
   end else
   if (cur_town == AREA_GECKO) then begin
      variable rads;
      if (gecko_plant_is_meltdown) then begin
         if (cur_map_index == MAP_GECKO_POWER_PLANT) then return 0; // map script already radiates in this case
         rads := RADIATE_GECKO_MELTDOWN;
      end else if (gecko_plant_status == PLANT_REPAIRED) then
         rads := RADIATE_GECKO_FIXED;
      else if (gecko_plant_status == PLANT_OPTIMIZED) then
         rads := RADIATE_GECKO_OPTIMIZED;
      else
         rads := RADIATE_GECKO;
      if (cur_map_index == MAP_GECKO_POWER_PLANT) then rads *= RADIATE_GECKO_PLANT_MULT;
      return rads;
   end else if (cur_town == AREA_BROKEN_HILLS) then begin
      return RADIATE_BH if (global_var(GVAR_BH_MINE) < MINE_FIXED_CASH) else RADIATE_BH_FIXED;
   end
   return 0;
end

procedure check_irradiate begin
   variable rads, elapsed;
   rads := get_area_radiation_per_day;
   if (rads and last_radiated > 0 and game_time > last_radiated + ONE_GAME_MINUTE) then begin
      rads := 1.0 * rads * (game_time - last_radiated) / ONE_GAME_DAY;
      if (rads >= 1) then begin
         rads := math_round_chance(rads);
         debug_log("Radiate by " + rads);
         radiation_inc(dude_obj, rads);
         update_last_radiated;
      end
   end
end

procedure gamemodechange_hook begin
   variable lastMode := get_sfall_arg_at(1);
   if (not (get_game_mode BWAND WORLDMAP) and lastMode BWAND WORLDMAP) then begin
      debug_log("Entered from worldmap, resetting rads");
      update_last_radiated;
   end
end

procedure start begin
   update_last_radiated;

   register_hook_proc(HOOK_GAMEMODECHANGE, gamemodechange_hook);
end

procedure map_enter_p_proc begin
   //display_msg("radia map_enter: "+cur_map_index);
   update_last_radiated;
end

procedure map_exit_p_proc begin
   //display_msg("radia map_exit: "+cur_map_index);
   call check_irradiate;
end

procedure map_update_p_proc begin
   //display_msg("radia map_update: "+cur_map_index);
   call check_irradiate;
end
