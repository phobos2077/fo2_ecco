/*
   First Aid/Doctor/Repair healing tweaks:
   - Fixes several vanilla bugs and inconsistent behavior around healing crippled limbs and HP at the same time
   - Moved some variables to ini for tweaking
   - Kits: added charges-based system as alternative to random chance item removal
   - Critical success multiplier for HP restored
*/
#define SCRIPT_REALNAME             "pbs_healing_skills"

#include "../sfall/sfall.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.math.h"
//#include "../sfall/lib.obj.h"
#include "../sfall/define_lite.h"
#include "../sfall/define_extra.h"

#include "../headers/itempid.h"

#include "../_pbs_headers/engine_funcs.h"
#include "../_pbs_headers/math_ext.h"
#include "../_pbs_headers/ecco_ids.h"
#include "../_pbs_headers/ecco_ini.h"
#include "../_pbs_headers/ecco_log.h"
#include "../_pbs_headers/ecco_msg.h"

#define COMBAT_STATE_FLEEING     (4)

#define obj_is_critter(obj)      (obj_type(obj) == OBJ_TYPE_CRITTER)
#define critter_max_hp(cr)       get_critter_stat(cr, STAT_max_hit_points)
#define critter_dmg_flags(cr)    get_object_data(cr, OBJ_DATA_DAMAGE_FLAGS)
#define critter_combat_flags(cr) get_object_data(cr, OBJ_DATA_COMBAT_STATE)

#define clear_critter_flag(cr, offset, flag)  set_object_data(cr, offset, get_object_data(cr, offset) bwand bwnot(flag))
#define clear_critter_dmg_flag(cr, flag)      clear_critter_flag(cr, OBJ_DATA_DAMAGE_FLAGS, flag)
#define clear_critter_combat_flag(cr, flag)   clear_critter_flag(cr, OBJ_DATA_COMBAT_STATE, flag)

#define kit_pid_is_limited_use(pid)   (pid == PID_DOCTORS_BAG or pid == PID_FIRST_AID_KIT or pid == PID_PARAMEDICS_BAG or pid == PID_FIELD_MEDIC_KIT)

variable begin
   ini_use_charges;
   ini_kit_uses;
   ini_skill_uses_per_day;
   ini_first_aid_hp;
   ini_doctor_hp;
   ini_healer_perk_hp;
   ini_crit_success_mult;
   skill_boosters;
   times_skill_used;
   healable_damage_flags;
end

procedure healing_skill_item_charges(variable item) begin
   variable charges := get_weapon_ammo_count(item);
   return charges if charges > 0 else ini_kit_uses;
end


/*
Runs when using the examine action icon to display the description of an object. You can override the description text. An example usage would be to add an additional description to the item based on player's stats/skills.

Does not run if the script of the object overrides the description.

NOTE: Returning a pointer to the new text received from the get_string_pointer function is still valid, but the method is DEPRECATED and is left for backward compatibility only.

Obj     arg0 - the object

String  ret0 - the new description text to use
*/
procedure descriptionobj_hook begin
   variable
      obj := get_sfall_arg,
      objPid := obj_pid(obj),
      str, curCharges;

   if ((obj_type(obj) != OBJ_TYPE_ITEM) or (not kit_pid_is_limited_use(objPid))) then return;

   curCharges := healing_skill_item_charges(obj);
   str := string_format(mstr_ecco_combat(310), curCharges);
   set_sfall_return(proto_data(objPid, it_description) + str);
end


procedure skill_use_slot_available(variable skill) begin
   variable slot, time, hoursSinceLastUsage, timesUsed;

   // Lazy init array
   if (not times_skill_used) then
      times_skill_used := create_array_map;

   if (not times_skill_used[skill]) then
      times_skill_used[skill] := create_array_list(ini_skill_uses_per_day);

   timesUsed := times_skill_used[skill];
   for (slot := 0; slot < ini_skill_uses_per_day; slot++) begin
      if (timesUsed[slot] == 0) then
         return slot;
   end
   time := game_time;
   hoursSinceLastUsage = (time - timesUsed[0]) / ONE_GAME_HOUR;
   if (hoursSinceLastUsage <= 24) then begin
      return -1;
   end
   return ini_skill_uses_per_day - 1;
end

procedure skill_use_slot_add(variable skill) begin
   variable i, timesUsed,
      slot := skill_use_slot_available(skill);

   if (slot == -1) then
      return -1;

   timesUsed := times_skill_used[skill];
   if (timesUsed[slot] != 0) then begin
      // Shift all earlier use times to make use for the new time.
      for (i := 0; i < slot; i++) begin
         timesUsed[i] := timesUsed[i + 1];
      end
   end

   timesUsed[slot] = game_time;
   return 0;
end

procedure calc_hp_to_heal(variable user, variable skill, variable isCritical) begin
   variable
      healRange := ini_first_aid_hp if skill == SKILL_FIRST_AID else ini_doctor_hp,
      healMin := healRange[0],
      healMax := healRange[1];
   
   // EcCo addition: critical success
   if (isCritical) then begin
      healMin := floor(healMin * ini_crit_success_mult);
      healMax := ceil(healMax * ini_crit_success_mult);
   end
   if (user == dude_obj and (skill == SKILL_FIRST_AID or skill == SKILL_DOCTOR)) then begin
      variable healerRank := has_trait(TRAIT_PERK, user, PERK_healer);
      healMin += ini_healer_perk_hp[0] * healerRank;
      healMax += ini_healer_perk_hp[1] * healerRank;
   end
   return random(healMin, healMax);
end

// 530: damaged eye
// 531: crippled left arm
// 532: crippled right arm
// 533: crippled right leg
// 534: crippled left leg
#define display_uncrippled_msg(dmgFlagIdx, prefixMsgId)     display_msg(sprintf(mstr_skill(prefixMsgId), mstr_skill(530 + dmgFlagIdx)))

/**
 * A refactored version of skill_use function from the engine, for use with healing skills only. Returns number of healing attempts performed (HP and cripple flag removal).
 * @arg {ObjectPtr} user
 * @arg {ObjectPtr} target
 * @arg {int} skill - First Aid, Doctor or Repair
 * @arg {int} skillBonus
 * @arg {int} maxAttempts - if >0, limits how many types of healing can be performed, including healing limbs
 * @ret {int}
 */
procedure use_healing_skill(variable user, variable target, variable skill, variable skillBonus, variable maxAttempts := -1) begin
   variable curHp, maxHp, isRobot, isRepair, isFirstAid;

   display_msg(string_format("use_healing_skill: user = %s, target = %s, bonus = %d, skill = %d", obj_name(user), obj_name(target), skillBonus, skill));
   
   isRobot := (critter_body_type(target) == CR_BODY_ROBOTIC);
   isRepair := (skill == SKILL_REPAIR);
   if (isRepair and not isRobot) then begin
      // You cannot repair that.
      display_msg(mstr_skill(553));
      return 0;
   end
   // EcCo: fail early when trying to heal non-organics or non-critters.
   if (not isRepair and (isRobot or not obj_is_critter(target))) then begin
      // You fail to do any healing.
      display_msg(mstr_skill(503));
      return 0;
   end
   if (critter_is_dead(target)) then begin
      // 512: You can't heal the dead.
      // 513: Let the dead rest in peace.
      // 514: It's dead, get over it.
      display_msg(mstr_skill(512 + random(0, 2)));
      return 0;
   end
   isFirstAid := (skill == SKILL_FIRST_AID);
   curHp := critter_cur_hp(target);
   maxHp := critter_max_hp(target);
   if (curHp >= maxHp and (isFirstAid or not critter_is_crippled(target))) then begin
      if (user == dude_obj) then begin
         // 501: You look healty already
         // 502: %s looks healthy already
         display_msg(mstr_skill(501)
            if (target == dude_obj)
            else sprintf(mstr_skill(502), obj_name(target)));
      end
      return 0;
   end
   if (skill_use_slot_available(skill) == -1) then begin
      // 590: You've taxed your ability with that skill. Wait a while.
      // 591: You're too tired.
      // 592: The strain might kill you.
      display_msg(mstr_skill(590 + random(0, 2)));
      return 0;
   end

   variable skillUseSlotAdded, roll, i, prefixMsg, usedLastSlot, healingAttempts,
      skillLevel := has_skill(user, skill),
      critChance := get_critter_stat(user, STAT_crit_chance) + skillBonus;

   fade_out;

   // Heal crippled limbs.
   if (not isFirstAid and critter_is_crippled(target)) then begin
      // Lazy init healable flags
      if (not healable_damage_flags) then
         healable_damage_flags := array_fixed([
            DAM_BLIND,
            DAM_CRIP_ARM_LEFT,
            DAM_CRIP_ARM_RIGHT,
            DAM_CRIP_LEG_RIGHT,
            DAM_CRIP_LEG_LEFT
         ]);

      for (i := 0; i < len_array(healable_damage_flags); i++) begin
         if (not critter_has_dmg_flag(target, healable_damage_flags[i])) then
            continue;

         healingAttempts += 1;
         roll := roll_check(skillLevel, critChance);
         if (is_success(roll)) then begin
            clear_critter_dmg_flag(target, healable_damage_flags[i]);
            clear_critter_combat_flag(target, COMBAT_STATE_FLEEING);
            // 520: You heal your %s.
            // 521: You heal the %s.
            display_uncrippled_msg(i, 520 if (target == dude_obj) else 521);
            call skill_use_slot_add(skill);
            if (user == dude_obj) then
               call show_skill_use_messages(skill);
         end else begin
            // 525: You fail to heal your %s.
            // 526: You fail to heal the %s.
            display_uncrippled_msg(i, 525 if (target == dude_obj) else 526);
         end

         // EcCo: fix healing beyond available slots
         if ((skill_use_slot_available(skill) == -1) or (maxAttempts > 0 and healingAttempts >= maxAttempts)) then begin
            usedLastSlot := true;
            break;
         end
      end
   end

   // EcCo change: don't attempt HP healing if target is crippled but at 100% HP.
   if (curHp < maxHp and not usedLastSlot) then begin
      // Restore hit points.
      healingAttempts += 1;
      roll := roll_check(skillLevel, critChance);

      if (is_success(roll)) then begin
         variable hpToHeal := calc_hp_to_heal(user, skill, is_critical(roll));
         critter_heal(target, hpToHeal);
         if (user == dude_obj) then begin
            // You heal %d hit points.
            display_msg(sprintf(mstr_skill(500), math_min(maxHp - curHp, hpToHeal)) + roll);
         end

         // EcCo: use up skill slot for HP healing even after cripple healing
         call skill_use_slot_add(skill);

         clear_critter_combat_flag(target, COMBAT_STATE_FLEEING);
         if (user == dude_obj) then
            call show_skill_use_messages(skill);
      end else begin
         // You fail to do any healing.
         display_msg(sprintf(mstr_skill(503), how_much(0)));
      end
   end

   // EcCo change: advance time only if some healing was attempted at all.
   if (user == dude_obj) then begin
      game_time_advance((ONE_GAME_HOUR if (skill == SKILL_DOCTOR) else (30 * ONE_GAME_MINUTE)) * healingAttempts);
   end

   fade_in;

   // TODO: not sure if this is needed
   //exec_map_update_scripts
   return healingAttempts;
end

/**
 * Use healing skill booster item's supplies. Returns true when supplies run out.
 * @arg {ObjectPtr} item - First Aid Kit, Doctor's Bag, etc.
 * @arg {int} numUses - how many supplies to remove
 * @ret {bool}
 */
procedure use_item_supplies(variable item, variable numUses) begin
   //display_msg("use_supplies " + ini_use_charges + ", " +  healing_skill_item_charges(item));
   if (ini_use_charges) then begin
      variable curCharges := healing_skill_item_charges(item);
      if (curCharges <= numUses) then
         return true;

      set_weapon_ammo_count(item, curCharges - numUses);
   end else
      return random(1, ini_kit_uses) == 1;
end

/**
 * A partial copy of engine's protinst_use_item_on with code pertinent to healing skills. Returns value for set_sfall_return in useobjon_hook.
 * @arg {ObjectPtr} user - item user
 * @arg {ObjectPtr} target - target
 * @arg {ObjectPtr} item - item
 * @ret {bool}
 */
procedure protinst_use_item_on(variable user, variable target, variable item) begin
   variable begin
      depletedMsgId;
      skillBonus := 0;
      skill := -1;
      maxAttempts;
      actualAttempts;
   end
   switch (obj_pid(item)) begin
      case PID_DOCTORS_BAG: begin
         // The supplies in the Doctor's Bag run out.
         depletedMsgId = 900;
         skillBonus = 20;
         skill = SKILL_DOCTOR;
      end
      case PID_FIRST_AID_KIT: begin
         // The supplies in the First Aid Kit run out.
         depletedMsgId = 901;
         skillBonus = 20;
         skill = SKILL_FIRST_AID;
      end
      case PID_PARAMEDICS_BAG: begin
         // The supplies in the Paramedic's Bag run out.
         depletedMsgId = 910;
         skillBonus = 40;
         skill = SKILL_DOCTOR;
      end
      case PID_FIELD_MEDIC_KIT: begin
         // The supplies in the Field Medic First Aid Kit run out.
         depletedMsgId = 911;
         skillBonus = 40;
         skill = SKILL_FIRST_AID;
      end
      case PID_MULTI_TOOL: begin
         skillBonus = 20;
         skill = SKILL_REPAIR;
      end
      case PID_SUPER_TOOL_KIT: begin
         skillBonus = 40;
         skill = SKILL_REPAIR;
      end
   end
   if (skill == -1) then
      return -1; // use engine handler
   
   if (combat_is_initialized) then begin
      // You cannot do that in combat.
      if (user == dude_obj) then
         display_msg(mstr_proto(902));
      return 0;
   end

   maxAttempts := healing_skill_item_charges(item)
      if (depletedMsgId and ini_use_charges)
      else -1;
   actualAttempts := use_healing_skill(user, target, skill, skillBonus, maxAttempts);
   if (actualAttempts == 0) then
      return 0;

   if (not depletedMsgId or not use_item_supplies(item, actualAttempts)) then
      return 0;

   if (user == dude_obj) then
      display_msg(mstr_proto(depletedMsgId));

   return 1; // remove the item
end

/*
Runs when:

a critter uses an object on another critter. (Or themselves)
a critter uses an object from inventory screen AND this object does not have "Use" action flag set and it's not active flare or explosive.
player or AI uses any drug
This is fired before the object is used, and the relevant use_obj_on script procedures are run. You can disable default item behavior.

NOTE: You can't remove and/or destroy this object during the hookscript (game will crash otherwise). To remove it, return 1.

Critter arg0 - The target
Critter arg1 - The user
int     arg2 - The object used

int     ret0 - overrides hard-coded handler and selects what should happen with the item (0 - place it back, 1 - remove it, -1 - use engine handler)
*/
procedure useobjon_hook begin
   variable
      target := get_sfall_arg,
      user := get_sfall_arg,
      item := get_sfall_arg,
      useItemResult;

   useItemResult := protinst_use_item_on(user, target, item);
   if (useItemResult != -1) then
      set_sfall_return(useItemResult);
end

/*
Runs when using any skill on any object.

This is fired before the default handlers are called, which you can override. In this case you should write your own skill use handler entirely, or otherwise nothing will happen (this includes fade in/fade out, time lapsing and messages - all of this can be scripted; to get vanilla text messages - use message_str_game along with sprintf). Suggested use - override First Aid/Doctor skills to buff/nerf them, override Steal skill to disallow observing NPCs inventories in some cases.

Does not run if the script of the object calls script_overrides for using the skill.

Critter arg0 - The user critter
Obj     arg1 - The target object
int     arg2 - skill being used
int     arg3 - skill bonus from items such as first aid kits

int     ret0 - overrides hard-coded handler (-1 - use engine handler, any other value - override; if it is 0, there will be a 10% chance of removing the used medical item)
*/
procedure useskill_hook begin
   variable
      user := get_sfall_arg,
      target := get_sfall_arg,
      skill := get_sfall_arg,
      skillBonus := get_sfall_arg,
      isSuccess;

   if (skill == SKILL_FIRST_AID or skill == SKILL_DOCTOR or skill == SKILL_REPAIR) then begin
      isSuccess := use_healing_skill(user, target, skill, skillBonus);
      set_sfall_return(0 if isSuccess else 1);
   end
end

#define _varstr(var)    ("; "#var" = " + ini_##var)
#define _rngstr(var)    ("; "#var" = " + debug_array_str(ini_##var))

#define INI_FILE          INI_MISC
#define INI_SECTION       "HEALING_SKILLS"
#define INI_SECTION_REST  "HEALING_REST"

procedure apply_rest_heal_time_tweaks begin
   variable
      healRest := get_ini_value_def(INI_FILE, INI_SECTION_REST, "heal_time_rest", 180),
      healTravel := get_ini_value_def(INI_FILE, INI_SECTION_REST, "heal_time_travel", 0);

   set_rest_heal_time(healRest);
   set_worldmap_heal_time(healTravel);
   debug_log_fmt("Passive healing times set: rest = %d, worldmap = %d", healRest, healTravel);
end

procedure start begin
   if (game_loaded) then begin
      if (get_int_from_ini(INI_FILE, INI_SECTION, "skill_use_mod") <= 0) then return;

      load_bool_from_ini(use_charges, false);
      load_num_from_ini(kit_uses, 10, 1, 10000);
      load_num_from_ini(skill_uses_per_day, 3, 1, 10);
      load_num_from_ini(crit_success_mult, 1.0, 1.0, 1000.0);
      load_range_from_ini(first_aid_hp,   1,  5, 0, 10000);
      load_range_from_ini(doctor_hp,      4, 10, 0, 10000);
      load_range_from_ini(healer_perk_hp, 4, 10, 0, 10000);

      //display_msg("Loaded: "+_varstr(use_charges)+_varstr(kit_uses)+_varstr(skill_uses_per_day)+_varstr(crit_success_mult)+_rngstr(first_aid_hp)+_rngstr(doctor_hp)+_rngstr(healer_perk_hp));

      register_hook_proc(HOOK_USEOBJON, useobjon_hook);
      register_hook_proc(HOOK_USESKILL, useskill_hook);
      register_hook_proc(HOOK_DESCRIPTIONOBJ, descriptionobj_hook);

      debug_log("Healing Skill mod enabled.");

      call apply_rest_heal_time_tweaks;
   end
end
