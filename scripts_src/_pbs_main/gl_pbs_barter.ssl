/**
 * Barter price mod.
 * 
 * - Changes buying prices based on configurable formula.
 * - Also changes item selling prices (originally always sold at 100%).
 * - Implements town demands (price variations based on current town).
 * - Fixes issue with party members overriding player barter skill (was making skill investment somewhat pointless).
 */

procedure start;

#include "../headers/itempid.h"
#include "../headers/global.h"
#include "../headers/maps.h"

#include "../sfall/define_extra.h"
#include "../sfall/define_lite.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.misc.h"
#include "../sfall/lib.math.h"

#define SCRIPT_REALNAME			"pbs_barter"

#include "../_pbs_headers/ecco_ini.h"
#include "../_pbs_headers/ecco_log.h"

procedure barterprice_init;
procedure barterprice_handler;
procedure calc_items_demand_mod(variable obj);
procedure load_town_demand;
procedure container_total_cost(variable invenObj, variable isSell);
procedure item_cost(variable item, variable isSell);
procedure modify_party_money;
procedure get_highest_barter_in_party_except_dude;

#define barter_skill(obj)		(has_skill(obj, SKILL_BARTER))

#define SGVAR_MONEY_MULT		"PBS$MULT"
#define INI_FILE					INI_ECONOMY

#define INI_SECT_GENERAL      "GENERAL"
#define INI_SECT_BUY		      "BUY"
#define INI_SECT_SELL         "SELL"

/*
   Changelog:
   
   version 5:
   - arrays no longer stored in savegames (was using sfall globals barter_0, barter_1, barter_2)
*/

variable begin
	barterprice_initialized;

	Sell_Bias;
	Sell_DudeSkillCoef;
	Sell_MerchantSkillCoef;
	Sell_DudeCharismaCoef;
	Sell_PerkCoef;
	Sell_BarterModCoef;
	Sell_MaxPriceCoef;
	
	Buy_Formula;
	Buy_Bias;
	Buy_DudeSkillCoef;
	Buy_MerchantSkillCoef;
	Buy_DudeCharismaCoef;
	Buy_PerkCoef;
	Buy_BarterModCoef;
	Buy_PartySkillThreshold;
	Buy_PartySkillCoef;
	Buy_MinPriceCoef;
	Buy_ArctanCoef;

	PartyMoneyMult;

	// map TownId => (map pid => modifier)
	town_demand_map := 0;

	// map Item Subtype => sell price mult
	item_type_price_mult_map;

	// map Item Pid => charges cost fraction
	misc_item_charges_cost_fraction_map;
end

/*
	hs_barterprice.int
	
	Critter arg0 - the critter doing the bartering (either dude_obj or inven_dude)
	Critter arg1 - the critter being bartered with
	int     arg2 - the default value of the goods
	Critter arg3 - table of requested goods (being bought from NPC)
	int     arg4 - the amount of actual caps in the barter stack (as opposed to goods)
	int     arg5 - the value of all goods being traded before skill modifications
	Critter arg6 - table of offered goods (being sold to NPC)
	int     arg7 - the total cost of the goods offered by the player
	int     arg8 - 1 if the "offers" button was pressed (not for a party member), 0 otherwise
	int     arg9 - 1 if trading with a party member, 0 otherwise

	int     ret0 - the modified value of all of the goods (pass -1 if you just want to modify offered goods)
	int     ret1 - the modified value of all offered goods
*/

#define load_setting_int(section, setting) 				get_ini_value_def(INI_FILE, section, setting, 0)
#define load_setting_float(section, setting) 			get_ini_value_def(INI_FILE, section, setting, 0.0)

//#define load_num_from_ini(name, def, min, max)                  ini_##name := math_clamp(, min, max)

procedure string_to_fraction(variable str) begin
	return math_clamp(atof(str), 0.0, 1.0);
end

procedure start begin
	if (not game_loaded) then return;
	if (not load_setting_int(INI_SECT_GENERAL, "Enabled")) then return;

	PartyMoneyMult := load_setting_float(INI_SECT_GENERAL, "PartyMoneyMult") orElse 1.0;
	call modify_party_money;

	register_hook_proc(HOOK_BARTERPRICE, barterprice_handler);
	debug_log("Hook registered.");
end

procedure barterprice_init begin
	if (barterprice_initialized) then return;

	Sell_Bias              := load_setting_float(INI_SECT_SELL, "Bias");
	Sell_DudeSkillCoef     := load_setting_float(INI_SECT_SELL, "DudeSkillCoef");
	Sell_MerchantSkillCoef := load_setting_float(INI_SECT_SELL, "MerchantSkillCoef");
	Sell_DudeCharismaCoef  := load_setting_float(INI_SECT_SELL, "DudeCharismaCoef");
	Sell_PerkCoef          := load_setting_float(INI_SECT_SELL, "PerkCoef");
	Sell_BarterModCoef     := load_setting_float(INI_SECT_SELL, "BarterModCoef");
	Sell_MaxPriceCoef  := abs(load_setting_float(INI_SECT_SELL, "MaxPriceCoef"));

	Buy_Formula             := load_setting_int  (INI_SECT_BUY, "Formula");
	Buy_Bias                := load_setting_float(INI_SECT_BUY, "Bias");
	Buy_DudeSkillCoef       := load_setting_float(INI_SECT_BUY, "DudeSkillCoef");
	Buy_MerchantSkillCoef   := load_setting_float(INI_SECT_BUY, "MerchantSkillCoef");
	Buy_DudeCharismaCoef    := load_setting_float(INI_SECT_BUY, "DudeCharismaCoef");
	Buy_PerkCoef            := load_setting_float(INI_SECT_BUY, "PerkCoef");
	Buy_BarterModCoef       := load_setting_float(INI_SECT_BUY, "BarterModCoef");
	Buy_PartySkillThreshold := load_setting_float(INI_SECT_BUY, "PartySkillThreshold");
	Buy_PartySkillCoef      := load_setting_float(INI_SECT_BUY, "PartySkillCoef");
	Buy_MinPriceCoef    := abs(load_setting_float(INI_SECT_BUY, "MinPriceCoef"));
	Buy_ArctanCoef          := load_setting_float(INI_SECT_BUY, "ArctanCoef");

	call load_town_demand;

	item_type_price_mult_map := array_fixed(array_transform_kv(
		get_ini_section(INI_FILE, "PRICE_PER_TYPE"),
		@string_to_int, @string_to_fraction));

	misc_item_charges_cost_fraction_map := array_fixed(array_transform_kv(
		get_ini_section(INI_FILE, "MISC_ITEM_CHARGES_COST_FRACTION"),
		@string_to_int, @string_to_fraction));

	debug_log_fmt("Pricing initialized. Sell bias: %.2f, buy bias: %.2f, town demands: %d, prices per type: %d, misc item charge fractions: %d",
		Sell_Bias, Buy_Bias, len_array(town_demand_map), len_array(item_type_price_mult_map), len_array(misc_item_charges_cost_fraction_map));

	barterprice_initialized := true;
end

/*
HOOK_BARTERPRICE
Runs whenever the value of goods being purchased is calculated.

NOTE: the hook is executed twice when entering the barter screen or after transaction: the first time is for the player and the second time is for NPC.

Critter arg0 - the critter doing the bartering (either dude_obj or inven_dude)
Critter arg1 - the critter being bartered with
int     arg2 - the default value of the goods
Critter arg3 - table of requested goods (being bought from NPC)
int     arg4 - the amount of actual caps in the barter stack (as opposed to goods)
int     arg5 - the value of all goods being traded before skill modifications
Critter arg6 - table of offered goods (being sold to NPC)
int     arg7 - the total cost of the goods offered by the player
int     arg8 - 1 if the "offers" button was pressed (not for a party member), 0 otherwise
int     arg9 - 1 if trading with a party member, 0 otherwise

int     ret0 - the modified value of all of the goods (pass -1 if you just want to modify offered goods)
int     ret1 - the modified value of all offered goods
*/
procedure barterprice_handler begin
	variable
		merchant := get_sfall_arg_at(1),
		vanillaPrice := get_sfall_arg_at(2),
		itemTable := get_sfall_arg_at(3),
		itemCaps := get_sfall_arg_at(4),
		offeredTable := get_sfall_arg_at(6);
		
	if party_member_obj(obj_pid(merchant)) then return;

	call barterprice_init;

	variable
		vanillaPriceGoods,
		offeredPrice := container_total_cost(offeredTable, true), //get_sfall_arg_at(7)
		offeredCaps := obj_is_carrying_obj_pid(offeredTable, PID_BOTTLE_CAPS),
		offeredPriceGoods := offeredPrice - offeredCaps,
		basePrice := container_total_cost(itemTable, false), //get_sfall_arg_at(5),
		basePriceGoods := basePrice - itemCaps,
		dudeBarter := math_clamp(barter_skill(dude_obj), 0, 300),
		dudeCharisma := get_critter_stat(dude_obj, STAT_ch),
		masterTrader := has_trait(TRAIT_PERK, dude_obj, PERK_master_trader),
		merchantBarter := math_clamp(barter_skill(merchant), 0, 300),
		dialogBarterMod := gdialog_get_barter_mod,
		partyBarter,
		sellPriceMult,
		buyPriceMult,
		dudeBarterMult,
		finalPriceGoods,
		stats;
	
	/*debug_log("dudeBarter: " + dudeBarter + "; merchantBarter: " + merchantBarter + "; perk: " + masterTrader
		+ "; basePriceGoods: " + basePriceGoods + "; offeredPriceGoods: " + offeredPriceGoods);*/

	// modify buy prices
	stats := "";
	if (basePrice != 0) then begin
		if (Buy_Formula == 0 or Buy_Formula == 1 or Buy_Formula == 2) then begin
			// VANILLA-based FORMULA (1 was deprecated and merged into 0)
			// Calc multiplier
			buyPriceMult := Buy_Bias;
			if (Buy_Formula == 2) then begin
				buyPriceMult *= (1 + arctan(Buy_ArctanCoef*dudeBarter, 1.0)*Buy_DudeSkillCoef);
			end
			// Vanilla price without caps
			vanillaPriceGoods := vanillaPrice - itemCaps;
			// Adjust demand and compensate for vanilla price multiplier
			vanillaPriceGoods += round(calc_items_demand_mod(itemTable) * vanillaPriceGoods / basePriceGoods);
			// Final price
			finalPriceGoods := vanillaPriceGoods * buyPriceMult;
			// cap value against MinPriceCoef
			if (finalPriceGoods < basePriceGoods*Buy_MinPriceCoef) then begin
				finalPriceGoods := basePriceGoods*Buy_MinPriceCoef;
			end
			stats += sprintf("vanilla buy price mult: %.2f", buyPriceMult);
		end else begin
			// override price (formula 3 or 4)
			// these two differ only in calculating dudeBarter coefficient:
			if (Buy_Formula == 3) then
				dudeBarterMult := (1 + dudeBarter*Buy_DudeSkillCoef);
			else
				dudeBarterMult := (1 + arctan(Buy_ArctanCoef*dudeBarter, 1.0)*Buy_DudeSkillCoef);

			partyBarter := get_highest_barter_in_party_except_dude;

			// calc multiplier
			buyPriceMult := Buy_Bias * dudeBarterMult
				* (1 + merchantBarter * Buy_MerchantSkillCoef)
				* (1 + dudeCharisma * Buy_DudeCharismaCoef)
				* (1 + masterTrader * Buy_PerkCoef)
				* (1 + dialogBarterMod * Buy_BarterModCoef)
				* (1 + math_max(partyBarter - Buy_PartySkillThreshold, 0) * Buy_PartySkillCoef);

			// cap mult against MinPriceCoef
			if (buyPriceMult < Buy_MinPriceCoef) then begin
				buyPriceMult := Buy_MinPriceCoef;
			end
			// Final price
			finalPriceGoods := basePriceGoods * buyPriceMult;
			stats += sprintf("buy mult: %.2f", buyPriceMult);
		end
		set_sfall_return(round(finalPriceGoods) + itemCaps); 
	end else begin
		set_sfall_return(0);
	end

	// modify sell prices (if any coefficient is set)
	if (offeredPrice != 0 and
			(Sell_Bias != 1
			or Sell_DudeSkillCoef != 0
			or Sell_MerchantSkillCoef != 0
			or Sell_DudeCharismaCoef != 0
			or Sell_PerkCoef != 0
			or Sell_BarterModCoef != 0)) then begin

		sellPriceMult := Sell_Bias
			* (1 + dudeBarter * Sell_DudeSkillCoef)
			* (1 + merchantBarter * Sell_MerchantSkillCoef)
			* (1 + dudeCharisma * Sell_DudeCharismaCoef)
			* (1 + masterTrader * Sell_PerkCoef)
			* (1 + dialogBarterMod * Sell_BarterModCoef);

		// cap multiplier
		if (sellPriceMult > Sell_MaxPriceCoef) then sellPriceMult := Sell_MaxPriceCoef;
		else if (sellPriceMult < 0) then sellPriceMult := 0;

		stats += sprintf("; sell mult: %.2f", sellPriceMult);
		set_sfall_return(round(offeredPriceGoods * sellPriceMult) + offeredCaps);
	end else begin
		set_sfall_return(0);
	end

	if stats != "" then debug_log_fmt("%s, skill: %d/%d, barter_mod: %d", stats, dudeBarter, merchantBarter, dialogBarterMod);
end

procedure calc_items_demand_mod(variable containerObj) begin
	variable total, numItems, demand, baseCost, demandMod;
	total := 0;
	demand := town_demand_map[cur_town];
	foreach (variable pid: mod in demand) if mod > 0 and mod != 1 then begin
		numItems := obj_is_carrying_obj_pid(containerObj, pid);
		if (numItems > 0) then begin
			baseCost := numItems * proto_data(pid, it_cost);
			demandMod := round(baseCost * (mod - 1));
			//debug_log("Demand mod for item(s) " + pid + " = " + demandMod);
			total += demandMod;
		end
	end
	return total;
end

procedure load_town_demand begin
	variable townId, v, townMap, pairs, pair, sect;
	town_demand_map := create_array_map;
	sect := get_ini_section(INI_FILE, "TOWNDEMAND");
	foreach (townId: v in sect) begin
		if (v != "") then begin
			pairs := string_split(v, "|");
			if (len_array(pairs) > 0) then begin
   			townMap := create_array_map;
   			foreach (pair in pairs) begin
   				pair := string_split(pair, "*");
   				if (len_array(pair) == 2 and atoi(pair[0]) != 0 and atof(pair[1]) != 0) then
						townMap[atoi(pair[0])] := atof(pair[1]);
   			end
         end else
				townMap := 0;
			town_demand_map[atoi(townId)] := townMap;
		end
	end
	//debug_log("Town Demands: "+debug_array_str_deep(town_demand_map, 2));
end

procedure get_highest_barter_in_party_except_dude begin
	variable i := 0;
	variable obj, pid, max;
	max := 0;
	
	foreach (obj in party_member_list_critters) if (obj) then begin
		if (obj != dude_obj and barter_skill(obj) > max) then begin
			max := barter_skill(obj);
		end
	end
	return max;
end

#define item_proto_cost(itemPid) 	proto_data(itemPid, it_cost)
#define ammo_proto_qty(ammoPid)		get_proto_data(ammoPid, PROTO_AM_PACK_SIZE)
#define misc_proto_charges(ammoPid)	get_proto_data(ammoPid, PROTO_MI_CHARGES)

procedure item_proto_cost_adjusted(variable itemPid, variable itemType, variable isSell) begin
	variable
		typeMult := (item_type_price_mult_map[itemType] or 1.0) if isSell else 1.0,
		townDemand := town_demand_map[cur_town],
		demandMult := (townDemand[itemPid] or 1.0) if townDemand else 1.0;
	
	//debug_log_fmt("item %d (t: %d, sell: %d) cost = %d, mult = %.2f * %.2f, type mult = %.2f", itemPid, itemType, isSell, item_proto_cost(itemPid), typeMult, demandMult, item_type_price_mult_map[itemType]);
	return 1.0 * item_proto_cost(itemPid) * typeMult * demandMult;
end

/**
 * Calculate total base price of a container.
 * @arg {ObjectPtr} invenObj
 * @arg {bool} isSell
 * @ret {float}
 */
procedure container_total_cost(variable invenObj, variable isSell) begin
	variable cost := 0, i := 0, item, qty;
   while (true) do begin
		item := inven_ptr(invenObj, i);
		if (not item) then break;
		qty := obj_is_carrying_obj(invenObj, item);
		if (obj_item_subtype(item) == item_type_ammo) then
			cost += item_proto_cost_adjusted(obj_pid(item), item_type_ammo, isSell) * (qty - 1) + item_cost(item, isSell);
		else
			cost += item_cost(item, isSell) * qty;
		i++;
	end
	return cost;
end

/**
 * Calculate total base price of item or container.
 * @arg {ObjectPtr} item - item
 * @ret {float}
 */
procedure item_cost(variable item, variable isSell) begin
	variable
		pid := obj_pid(item),
		itemType := obj_item_subtype(item),
	 	cost := item_proto_cost_adjusted(pid, itemType, isSell);

	switch (itemType) begin
		case item_type_container:
			cost += container_total_cost(item, isSell);
		case item_type_weapon: begin
			variable
				ammo := get_weapon_ammo_count(item),
				ammoPid := get_weapon_ammo_pid(item);
			if (ammo > 0 and ammoPid != -1) then
				cost += ammo * item_proto_cost_adjusted(ammoPid, item_type_ammo, isSell) / ammo_proto_qty(ammoPid);
		end
		case item_type_ammo:
			cost := cost * get_weapon_ammo_count(item) / ammo_proto_qty(pid);
		case item_type_misc_item: begin
			// Healing item charges support.
			variable chargesFraction := misc_item_charges_cost_fraction_map[pid];
			if (chargesFraction > 0) then begin
				variable charges := get_weapon_ammo_count(item), maxCharges := misc_proto_charges(pid);
				if (charges > 0 and maxCharges > 0) then
					cost := cost * (1.0 - chargesFraction) + cost * chargesFraction * charges / maxCharges;
			end
		end
	end
	return cost;
end

procedure modify_party_money begin
	variable
		lastMult := get_sfall_global_float(SGVAR_MONEY_MULT) orElse 1.0,
		multDiff := (PartyMoneyMult / lastMult) - 1.0;
	if (abs(multDiff) > 0.001) then begin
		variable obj, amt;
		debug_log_fmt("MONEY MULTIPLIER CHANGED!! %.2f -> %.2f. Adjusting caps of the whole party by difference.", lastMult, PartyMoneyMult);
		foreach obj in party_member_list_all begin
			amt := ceil(item_caps_total(obj) * multDiff);
			if (amt != 0) then begin
				item_caps_adjust(obj, amt);
				debug_log_fmt(" > %s: %d", obj_name(obj), amt);
			end
		end

		set_sfall_global(SGVAR_MONEY_MULT, PartyMoneyMult);
	end
end
