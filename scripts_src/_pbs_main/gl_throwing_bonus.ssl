/**
   INI-configurable throwing weapons buffs:
   - Damage bonus based on Throwing Skill
   - Flat crit-chance bonus + Luck-based bonus
   - Returning Boomerang mechanic
*/

#define SCRIPT_REALNAME       "gl_throwing_bonus"

#define INI_SECTION           "THROWING"

#include "../sfall/sfall.h"
#include "../sfall/define_lite.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.math.h"
#include "../sfall/lib.inven.h"
#include "../sfall/lib.obj.h"

#include "../_pbs_headers/ecco.h"

variable
   ini_damage_bonus_skill_mult,
   ini_bonus_crit_chance,
   ini_bonus_crit_chance_luck_mult,
   ini_apply_melee_dmg,
   ini_return_weapon_pids,
   ini_return_catch_skill_mod,
   thrown_owner,
   thrown_items;

procedure start;
procedure itemdamage_handler;
procedure rollcheck_handler;
procedure combatturn_handler;
procedure removeinvenobj_handler;

procedure start begin
   if game_loaded then begin
      float_from_ini_file_clamped(damage_bonus_skill_mult, INI_COMBAT, INI_SECTION, 0.0, 10.0);
      int_from_ini_file_clamped(bonus_crit_chance, INI_COMBAT, INI_SECTION, 0, 100);
      int_from_ini_file_clamped(bonus_crit_chance_luck_mult, INI_COMBAT, INI_SECTION, 0, 100);
      int_from_ini_file(apply_melee_dmg, INI_COMBAT, INI_SECTION);
      int_list_from_ini_file(return_weapon_pids, INI_COMBAT, INI_SECTION);
      int_from_ini_file(return_catch_skill_mod, INI_COMBAT, INI_SECTION);

      if (ini_apply_melee_dmg > 0 or ini_damage_bonus_skill_mult > 0.01) then begin
         register_hook_proc(HOOK_ITEMDAMAGE, itemdamage_handler);
      end
      if (ini_bonus_crit_chance > 0) then begin
         register_hook_proc(HOOK_ROLLCHECK, rollcheck_handler);
      end

      if (len_array(ini_return_weapon_pids) > 0) then begin
         register_hook_proc(HOOK_COMBATTURN, combatturn_handler);
         register_hook_proc(HOOK_REMOVEINVENOBJ, removeinvenobj_handler);
      end
   end
end


#define var_as_str(name)            #name": "+name+"; "

/*
HOOK_ROLLCHECK
Runs when a game event performs a random roll to check the chance of success or failure.

int     arg0 - event type:
               1 - checks the chance of an attack hitting the target
               2 - checks the chance of a bullet from a burst hitting the target (for burst attacks)
               3 - checks the chance when using skills (not listed below)
               4 - check the chance of using Repair skill
               5 - check the chance of using Doctor skill
               6 - check the chance of using Steal skill for the thief (usually the player)
               7 - the second Steal skill chance check for the target to catch the thief, in which the target's failure is the thief's success result
int     arg1 - the value of roll result (see ROLL_* constants), which is calculated as:
*/
procedure rollcheck_handler begin
   variable
      eventType := get_sfall_arg,
      roll := get_sfall_arg,
      chance := get_sfall_arg,
      critChanceBonus := get_sfall_arg,
      randomDelta := get_sfall_arg;

   //display_msg("rollcheck: "+eventType+"; "+var_as_str(roll)+var_as_str(chance)+var_as_str(critChanceBonus)+var_as_str(randomDelta));
   // On successfull attack roll..
   if eventType == 1 and randomDelta >= 0 then begin
      variable
         attacker := get_object_data(combat_data, C_ATTACK_SOURCE),
         hitMode := get_object_data(combat_data, C_ATTACK_HIT_MODE),
         weapon := item_by_attack_type(attacker, hitMode);

      if (weapon) then begin
         variable
            attackMode := weapon_attack_mode(obj_pid(weapon), hitMode),
            dmgType := weapon_dmg_type(weapon);
         
         //display_msg("attacker: "+obj_name(attacker)+"; "+var_as_str(hitMode)+var_as_str(weaponPid)+var_as_str(attackMode));
         if (attackMode == ATTACK_MODE_THROW and weapon_dmg_type(weapon) == DMG_normal_dam) then begin
            critChanceBonus += ini_bonus_crit_chance;
            critChanceBonus += get_critter_stat(attacker, STAT_lu) * ini_bonus_crit_chance_luck_mult;
            if (random(1, 100) <= randomDelta / 10 + critChanceBonus) then begin
               roll := ROLL_CRITICAL_SUCCESS;
            end else begin
               roll := ROLL_SUCCESS;
            end
            debug_log("rerolling for "+obj_name(attacker)+" with better crit chance: "+critChanceBonus+", result: "+roll);
            set_sfall_arg(1, roll);
            set_sfall_return(roll);
         end
      end
   end
end

/*
   HOOK_ITEMDAMAGE
   Runs when retrieving the damage rating of the player's used weapon. (Which may be their fists.)

   int     arg0 - The default min damage
   int     arg1 - The default max damage
   Item    arg2 - The weapon used (0 if unarmed)
   Critter arg3 - The critter doing the attacking
   int     arg4 - The type of attack
   int     arg5 - non-zero if this is an attack using a melee weapon

   int     ret0 - Either the damage to be used, if ret1 isn't given, or the new minimum damage if it is
   int     ret1 - The new maximum damage
*/
procedure itemdamage_handler begin
	variable dmgMin, dmgMax, weapon, attacker, attackType, isMelee, meleeDmg;
	variable weaponPid, skill, attackModes, attackMode, damageType;

   dmgMin := get_sfall_arg;
   dmgMax := get_sfall_arg;
   weapon := get_sfall_arg;
   attacker := get_sfall_arg;
   attackType := get_sfall_arg; 
   isMelee := get_sfall_arg;
   
   if (weapon) then begin
      weaponPid := obj_pid(weapon);
      damageType := get_proto_data(weaponPid, PROTO_WP_DMG_TYPE);
      //debug_msg("itemdamage: "+dmgMin+"-"+dmgMax+", wpn: "+weaponPid+", type: "+attackType+", dmg typ: "+damageType);
      if (damageType == DMG_normal_dam and attackType >= ATKTYPE_LWEP1 and attackType <= ATKTYPE_RWEP2) then begin
         // actual weapon attack mode
         attackMode := weapon_attack_mode(weaponPid, attackType);
         //debug_msg("atkmode: " + attackMode);
         if (attackMode == ATTACK_MODE_THROW) then begin
            // In vanilla, Melee Damage only applies to Melee and Unarmed attacks. This applies it to Throwing as well.
            if (ini_apply_melee_dmg > 0) then begin
               meleeDmg := get_critter_stat(attacker, STAT_melee_dmg);
               dmgMax += meleeDmg;
               debug_log("applying Melee Damage "+meleeDmg+" for new max dmg = "+dmgMax);
            end
            if (ini_damage_bonus_skill_mult > 0.01) then begin
               //agility := get_critter_stat(attacker, STAT_ag) - 5;
               //if (agility < 0) then agility := 0;
               skill := has_skill(attacker, SKILL_THROWING);
               if (skill < 0) then skill := 0;
               // orig. method (skill only):
               dmgMax := floor(dmgMax * (1 + skill * ini_damage_bonus_skill_mult / 100.0));
               // method 1:
               // dmgMax := floor(dmgMax * (1 + (agility / 5) + (skill / 100.0)));
               // method 2: (me not like it)
               // dmgMax := dmgMax + agility + (skill / 20);
               // method 3 (combined):
               //dmgMax := dmgMax + agility + floor(dmgMax * (skill / 100.0));
               debug_log("skill-based dmg bonus (sk:"+skill+"): "+dmgMin+"-"+dmgMax);
            end
            set_sfall_arg(0, dmgMin);
            set_sfall_arg(1, dmgMax);
            set_sfall_return(dmgMin);
            set_sfall_return(dmgMax);
         end
      end
   end
end

/*procedure return_thrown_item begin
   //display_msg("Timed called at "+game_time);
   if (thrown_item and thrown_owner) then begin
      debug_log_fmt("Returning thrown weapon %s back to %s", obj_name(thrown_item), obj_name(thrown_owner));
      add_obj_to_inven(thrown_owner, thrown_item);
      wield_obj_critter(thrown_owner, thrown_item);
   end
end*/


/*
Runs before and after each turn in combat (for both PC and NPC).

int     arg0 - event type:
               1 - start of turn
               0 - normal end of turn
              -1 - combat ends abruptly (by script or by pressing Enter during PC turn)
              -2 - combat ends normally (hook always runs at the end of combat)
Critter arg1 - critter doing the turn
int     arg2 - 1 at the start/end of the player's turn after loading a game saved in combat mode, 0 otherwise

int     ret0 - pass 1 at the start of turn to skip the turn, pass -1 at the end of turn to force end of combat
*/
procedure combatturn_handler begin
   variable
      eventType := get_sfall_arg,
      critter := get_sfall_arg,
      item, isFirst;
   
   if (critter == thrown_owner and thrown_items and eventType <= 0) then begin
      isFirst := true;
      foreach (item in thrown_items) begin
         if (not is_success(roll_vs_skill(critter, SKILL_THROWING, ini_return_catch_skill_mod))) then continue;

         debug_log_fmt("Returning thrown weapon %s back to %s", obj_name(item), obj_name(thrown_owner));
         add_obj_to_inven(thrown_owner, item);
         if (isFirst) then begin
            if (critter == dude_obj) then begin
               display_msg(sprintf(mstr_ecco_combat(120), obj_name(item)));
            end
            if (not get_active_weapon(critter)) then
               wield_obj_critter(thrown_owner, item);
            isFirst = false;
         end
      end
   end
   thrown_owner := 0;
   if (thrown_items) then
      clear_array(thrown_items);
end


/*
Runs when an object is removed from a container or critter's inventory for any reason.

Obj     arg0 - the owner that the object is being removed from
Item    arg1 - the item that is being removed
int     arg2 - the number of items to remove
int     arg3 - The reason the object is being removed (see RMOBJ_* constants)
Obj     arg4 - The destination object when the item is moved to another object, 0 otherwise
*/
procedure removeinvenobj_handler begin
   variable
      owner := get_sfall_arg,
      item := get_sfall_arg,
      num := get_sfall_arg,
      reason := get_sfall_arg;

   //display_msg(string_format("removeinvenobj %s(%d) from %s (reason: %d, flag: %x)", obj_name(item), num, obj_name(owner), reason, get_object_data(item, OBJ_DATA_FLAGS)));
   // Return thrown Boomerangs back to owner
   if (reason == RMOBJ_THROW and is_in_array(obj_pid(item), ini_return_weapon_pids) and num == 1) then begin
      if (not thrown_items) then
         thrown_items := create_array_list(0);
      thrown_owner := owner;
      call array_push(thrown_items, item);
      //thrown_flags := get_object_data(item, OBJ_DATA_FLAGS);
      //call return_thrown_item in 3; // very unreliable, needs to happen after attack ends, but animation length varies...
      //display_msg("Called scheduled at "+game_time);
   end
end