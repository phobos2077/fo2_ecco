/**
   Damage bonus for throwing weapons based on Throwing skill.
*/

#define SCRIPT_REALNAME       "gl_throwing_bonus"

#include "../sfall/sfall.h"
#include "../sfall/define_lite.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.math.h"
#include "../sfall/lib.inven.h"
#include "../_pbs_headers/ecco.h"

variable
   ini_damage_bonus_skill_mult,
   ini_bonus_crit_chance,
   ini_bonus_crit_chance_luck_mult;

procedure start;
procedure itemdamage_handler;
procedure rollcheck_handler;

procedure start begin
   if game_loaded then begin
      float_from_ini_file_clamped(damage_bonus_skill_mult, INI_COMBAT, "THROWING", 0.0, 10.0);
      int_from_ini_file_clamped(bonus_crit_chance, INI_COMBAT, "THROWING", 0, 100);
      int_from_ini_file_clamped(bonus_crit_chance_luck_mult, INI_COMBAT, "THROWING", 0, 100);

      if ini_damage_bonus_skill_mult > 0.01 then begin
         register_hook_proc(HOOK_ITEMDAMAGE, itemdamage_handler);
      end
      if (ini_bonus_crit_chance > 0) then begin
         register_hook_proc(HOOK_ROLLCHECK, rollcheck_handler);
      end
   end
end


#define var_as_str(name)            #name": "+name+"; "

/*
HOOK_ROLLCHECK
Runs when a game event performs a random roll to check the chance of success or failure.

int     arg0 - event type:
               1 - checks the chance of an attack hitting the target
               2 - checks the chance of a bullet from a burst hitting the target (for burst attacks)
               3 - checks the chance when using skills (not listed below)
               4 - check the chance of using Repair skill
               5 - check the chance of using Doctor skill
               6 - check the chance of using Steal skill for the thief (usually the player)
               7 - the second Steal skill chance check for the target to catch the thief, in which the target's failure is the thief's success result
int     arg1 - the value of roll result (see ROLL_* constants), which is calculated as:
*/
procedure rollcheck_handler begin
   variable
      eventType := get_sfall_arg,
      roll := get_sfall_arg,
      chance := get_sfall_arg,
      critChanceBonus := get_sfall_arg,
      randomDelta := get_sfall_arg;

   //display_msg("rollcheck: "+eventType+"; "+var_as_str(roll)+var_as_str(chance)+var_as_str(critChanceBonus)+var_as_str(randomDelta));
   // On successfull attack roll..
   if eventType == 1 and randomDelta >= 0 then begin
      variable
         attacker := get_object_data(combat_data, C_ATTACK_SOURCE),
         hitMode := get_object_data(combat_data, C_ATTACK_HIT_MODE),
         weapon := item_by_attack_type(attacker, hitMode);

      if (weapon) then begin
         variable
            attackMode := weapon_attack_mode(obj_pid(weapon), hitMode),
            dmgType := weapon_dmg_type(weapon);
         
         //display_msg("attacker: "+obj_name(attacker)+"; "+var_as_str(hitMode)+var_as_str(weaponPid)+var_as_str(attackMode));
         if (attackMode == ATTACK_MODE_THROW and weapon_dmg_type(weapon) == DMG_normal_dam) then begin
            critChanceBonus += ini_bonus_crit_chance;
            critChanceBonus += get_critter_stat(attacker, STAT_lu) * ini_bonus_crit_chance_luck_mult;
            if (random(1, 100) <= randomDelta / 10 + critChanceBonus) then begin
               roll := ROLL_CRITICAL_SUCCESS;
            end else begin
               roll := ROLL_SUCCESS;
            end
            debug_log("rerolling for "+obj_name(attacker)+" with better crit chance: "+critChanceBonus+", result: "+roll);
            set_sfall_arg(1, roll);
            set_sfall_return(roll);
         end
      end
   end
end

/*
   HOOK_ITEMDAMAGE
   Runs when retrieving the damage rating of the player's used weapon. (Which may be their fists.)

   int     arg0 - The default min damage
   int     arg1 - The default max damage
   Item    arg2 - The weapon used (0 if unarmed)
   Critter arg3 - The critter doing the attacking
   int     arg4 - The type of attack
   int     arg5 - non-zero if this is an attack using a melee weapon

   int     ret0 - Either the damage to be used, if ret1 isn't given, or the new minimum damage if it is
   int     ret1 - The new maximum damage
*/
procedure itemdamage_handler begin
	variable dmgMin, dmgMax, weapon, attacker, attackType, isMelee;
	variable weaponPid, skill, attackModes, attackMode, damageType;

   dmgMin := get_sfall_arg;
   dmgMax := get_sfall_arg;
   weapon := get_sfall_arg;
   attacker := get_sfall_arg;
   attackType := get_sfall_arg; 
   isMelee := get_sfall_arg;
   
   if (weapon) then begin
      weaponPid := obj_pid(weapon);
      damageType := get_proto_data(weaponPid, 48);
      //debug_msg("itemdamage: "+dmgMin+"-"+dmgMax+", wpn: "+weaponPid+", type: "+attackType+", dmg typ: "+damageType);

      if (damageType == DMG_normal_dam and attackType >= ATKTYPE_LWEP1 and attackType <= ATKTYPE_RWEP2) then begin
         // actual weapon attack mode
         attackMode := weapon_attack_mode(weaponPid, attackType);
         //debug_msg("atkmode: " + attackMode);
         if (attackMode == ATTACK_MODE_THROW) then begin
            skill := has_skill(attacker, SKILL_THROWING);
            if (skill < 0) then skill := 0;

            //agility := get_critter_stat(attacker, STAT_ag) - 5;
            //if (agility < 0) then agility := 0;

            // orig. method (skill only):
            dmgMax := floor(dmgMax * (1 + skill * ini_damage_bonus_skill_mult / 100.0));
            // method 1:
            // dmgMax := floor(dmgMax * (1 + (agility / 5) + (skill / 100.0)));
            // method 2: (me not like it)
            // dmgMax := dmgMax + agility + (skill / 20);
            // method 3 (combined):
            //dmgMax := dmgMax + agility + floor(dmgMax * (skill / 100.0));
            debug_log("dmg (sk:"+skill+"): "+dmgMin+"-"+dmgMax);

            set_sfall_arg(0, dmgMin);
            set_sfall_arg(1, dmgMax);
            set_sfall_return(dmgMin);
            set_sfall_return(dmgMax);
         end
      end
   end
end
