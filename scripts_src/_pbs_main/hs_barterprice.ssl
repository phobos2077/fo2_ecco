procedure start;

//#include "Perk_Inc.h"
#include "../headers/itempid.h"
#include "../headers/global.h"
#include "../headers/maps.h"

#include "../sfall/define_lite.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.misc.h"
#include "../_pbs_headers/ecco.h"

procedure get_town_rep;
procedure calc_items_demand_mod(variable obj);
procedure remember_town_demand;
procedure get_highest_barter_in_party;


#define barter_skill(obj)	(has_skill(obj, SKILL_BARTER))

/*
   Changelog:
   
   version 5:
   - arrays no longer stored in savegames (was using sfall globals barter_0, barter_1, barter_2)
*/

variable begin
	//MaxPID;
	MaxTown;
	PartyBarterDiffCoef;

	Sell_Bias;
	Sell_DudeSkillCoef;
	Sell_MerchantSkillCoef;
	Sell_DudeCharismaCoef;
	Sell_TownRepCoef;
	Sell_PerkCoef;
	Sell_BarterModCoef;
	Sell_MaxPriceCoef;
	
	Buy_Formula;
	Buy_Bias;
	Buy_DudeSkillCoef;
	Buy_MerchantSkillCoef;
	Buy_DudeCharismaCoef;
	Buy_TownRepCoef;
	Buy_PerkCoef;
	Buy_BarterModCoef;
	Buy_MinPriceCoef;
	Buy_ArctanCoef;

   // map pid => original price
	price_list := 0;
	// map TownId => (map pid => modifier)
	town_demand_map := 0;
	// array
	npc_pid_list := 0;
	selling_prices_last_modified := 0;
	last_sell_mult := 1.0;
end

/*
	hs_barterprice.int
	
	Critter arg0 - the critter doing the bartering (either dude_obj or inven_dude)
	Critter arg1 - the critter being bartered with
	int     arg2 - the default value of the goods
	Critter arg3 - table of requested goods (being bought from NPC)
	int     arg4 - the amount of actual caps in the barter stack (as opposed to goods)
	int     arg5 - the value of all goods being traded before skill modifications
	Critter arg6 - table of offered goods (being sold to NPC)
	int     arg7 - the total cost of the goods offered by the player
	int     arg8 - 1 if the "offers" button was pressed (not for a party member), 0 otherwise
	int     arg9 - 1 if trading with a party member, 0 otherwise

	int     ret0 - the modified value of all of the goods (pass -1 if you just want to modify offered goods)
	int     ret1 - the modified value of all offered goods
*/

#define load_setting_int(section, setting) get_ini_setting(INI_ECONOMY + "|" + section + "|" + setting)
#define load_setting_float(section, setting) atof(get_ini_string(INI_ECONOMY + "|" + section + "|" + setting))


procedure start begin
	variable
		merchant,
		vanilla_price,
		vanilla_price_goods,
		item_caps,
		offered_caps,
		base_price := 0.0,
		item_table,
		offered_table,
		offered_price,
		offered_price_goods,
		base_price_goods,
		final_price_goods,
		dude_barter,
		party_barter,
		dude_charisma,
		master_trader,
		merchant_barter,
		barter_mod,
		town_demand_mod,
		town_rep := 0,
		selling_price_mod := 1,
		dude_barter_mult;

	if (init_hook) then begin
		/*MaxPID := get_ini_setting("barter.ini|GENERAL|MaxPID");
		if (MaxPID == 0) then MaxPID := 600;*/
		MaxTown := load_setting_int("GENERAL", "MaxTown");
		if (MaxTown == 0) then MaxTown := 25;
		PartyBarterDiffCoef := load_setting_float("GENERAL", "PartyBarterDiffCoef");
	
		Sell_Bias := load_setting_float("SELL", "Bias");
		Sell_DudeSkillCoef := load_setting_float("SELL", "DudeSkillCoef");
		Sell_MerchantSkillCoef := load_setting_float("SELL", "MerchantSkillCoef");
		Sell_DudeCharismaCoef := load_setting_float("SELL", "DudeCharismaCoef");
		Sell_TownRepCoef := load_setting_float("SELL", "TownRepCoef");
		Sell_PerkCoef := load_setting_float("SELL", "PerkCoef");
		Sell_BarterModCoef := load_setting_float("SELL", "BarterModCoef");
		Sell_MaxPriceCoef := abs(load_setting_float("SELL", "MaxPriceCoef"));
		
		Buy_Formula := load_setting_int("BUY", "Formula");
		Buy_Bias := load_setting_float("BUY", "Bias");
		Buy_DudeSkillCoef := load_setting_float("BUY", "DudeSkillCoef");
		Buy_MerchantSkillCoef := load_setting_float("BUY", "MerchantSkillCoef");
		Buy_DudeCharismaCoef := load_setting_float("BUY", "DudeCharismaCoef");
		Buy_TownRepCoef := load_setting_float("BUY", "TownRepCoef");
		Buy_PerkCoef := load_setting_float("BUY", "PerkCoef");
		Buy_BarterModCoef := load_setting_float("BUY", "BarterModCoef");
		Buy_MinPriceCoef := abs(load_setting_float("BUY", "MinPriceCoef"));
		Buy_ArctanCoef := load_setting_float("BUY", "ArctanCoef");
		
		call remember_town_demand;
	end else begin
		if (party_member_obj(obj_pid(merchant)) == 0) then begin
			merchant := get_sfall_arg_at(1);
			vanilla_price := get_sfall_arg_at(2);
			item_table := get_sfall_arg_at(3);
			item_caps := get_sfall_arg_at(4);
			base_price := get_sfall_arg_at(5);
			offered_table := get_sfall_arg_at(6);
			offered_price := get_sfall_arg_at(7);

			base_price_goods := base_price - item_caps;
			
			offered_caps := obj_is_carrying_obj_pid(offered_table, PID_BOTTLE_CAPS);
			offered_price_goods := offered_price - offered_caps;
		
			if (Sell_TownRepCoef != 0 or Buy_TownRepCoef != 0) then begin
				town_rep := get_town_rep;
				if (town_rep < -30) then
					town_rep := -30;
				else if (town_rep > 30) then
					town_rep := 30;
				//debug_msg("town_rep " + town_rep);
			end
			
			dude_barter := barter_skill(dude_obj);
			party_barter := get_highest_barter_in_party;
			if party_barter > dude_barter and PartyBarterDiffCoef != 0 then begin
				dude_barter += (dude_barter - party_barter) * PartyBarterDiffCoef;
			end
			dude_charisma := get_critter_stat(dude_obj, STAT_ch);
			master_trader := has_trait(TRAIT_PERK, dude_obj, PERK_master_trader);
			
			merchant_barter := barter_skill(merchant);
			barter_mod := gdialog_get_barter_mod;
			
			/*debug_msg("dude_barter: " + dude_barter + "; merchant_barter: " + merchant_barter + "; perk: " + master_trader
			 	+ "; base_price_goods: " + base_price_goods + "; offered_price_goods: " + offered_price_goods);*/
			
			// cap values
			if (merchant_barter > 300) then
				merchant_barter := 300;
			else if (merchant_barter < 0) then 
				merchant_barter := 0;
			if (dude_barter > 300) then 
				dude_barter := 300;
			else if (dude_barter < 0) then 
				dude_barter := 0;
			
			// modify buy prices
			if (base_price != 0) then begin
				if (Buy_Formula == 0 or Buy_Formula == 1 or Buy_Formula == 2) then begin
					// VANILLA-based FORMULA (1 was deprecated and merged into 0)
					vanilla_price_goods := vanilla_price - item_caps;
					// Adjust demand and compensate for vanilla price multiplier
					vanilla_price_goods += round(calc_items_demand_mod(item_table) * vanilla_price_goods / base_price_goods);
					final_price_goods := vanilla_price_goods * Buy_Bias;
					if (Buy_Formula == 2) then begin
						final_price_goods *= (1 + arctan(Buy_ArctanCoef*dude_barter, 1.0)*Buy_DudeSkillCoef);
					end
				end else begin
					// override price (formula 3 or 4)
					// these two differ only in calculating dude_barter coefficient:
					if (Buy_Formula == 3) then
						dude_barter_mult := (1 + dude_barter*Buy_DudeSkillCoef);
					else
						dude_barter_mult := (1 + arctan(Buy_ArctanCoef*dude_barter, 1.0)*Buy_DudeSkillCoef);

					// adjust demand for buy prices
					base_price_goods += calc_items_demand_mod(item_table);
					final_price_goods := base_price_goods * Buy_Bias
						* dude_barter_mult
						* (1 + merchant_barter*Buy_MerchantSkillCoef)
						* (1 + dude_charisma*Buy_DudeCharismaCoef)
						* (1 + town_rep*Buy_TownRepCoef)
						* (1 + master_trader*Buy_PerkCoef)
						* (1 + barter_mod*Buy_BarterModCoef);
				end
				
				// cap value against MinPriceCoef
				if (final_price_goods < base_price_goods*Buy_MinPriceCoef) then begin
					final_price_goods := base_price_goods*Buy_MinPriceCoef;
				end
				
				set_sfall_return(round(final_price_goods) + item_caps); 
			end else begin
				set_sfall_return(0);
			end

			// modify sell prices (if any coefficient is set)
			if (offered_price != 0 and
					(Sell_Bias != 1
					or Sell_DudeSkillCoef != 0
					or Sell_MerchantSkillCoef != 0
					or Sell_DudeCharismaCoef != 0
					or Sell_TownRepCoef != 0
					or Sell_PerkCoef != 0
					or Sell_BarterModCoef != 0)) then begin

				selling_price_mod := Sell_Bias
					* (1 + dude_barter*Sell_DudeSkillCoef)
					* (1 + merchant_barter*Sell_MerchantSkillCoef)
					* (1 + dude_charisma*Sell_DudeCharismaCoef)
					* (1 + town_rep*Sell_TownRepCoef)
					* (1 + master_trader*Sell_PerkCoef)
					* (1 + barter_mod*Sell_BarterModCoef);

				// cap multiplier
				if (selling_price_mod > Sell_MaxPriceCoef) then selling_price_mod := Sell_MaxPriceCoef;
				else if (selling_price_mod < 0) then selling_price_mod := 0;

				offered_price_goods += calc_items_demand_mod(offered_table);
				set_sfall_return(round(offered_price_goods * selling_price_mod) + offered_caps);
			end else begin
				set_sfall_return(0);
			end
		end
	end
end

procedure calc_items_demand_mod(variable containerObj) begin
	variable total, pid, mod, numItems, demand, baseCost, demandMod;
	total := 0;
	demand := town_demand_map[cur_town];
	foreach (pid: mod in demand) if mod > 0 and mod != 1 then begin
		numItems := obj_is_carrying_obj_pid(containerObj, pid);
		if (numItems > 0) then begin
			baseCost := numItems * proto_data(pid, it_cost);
			demandMod := round(baseCost * (mod - 1));
			//debug_msg("Demand mod for item(s) " + pid + " = " + demandMod);
			total += demandMod;
		end
	end
	return total;
end

procedure remember_town_demand begin
	variable i, j, temp, pairs, pair;
	town_demand_map := create_array_map;
	for (i:=0; i <= MaxTown; i++) begin
		temp := get_ini_string(INI_ECONOMY + "|TOWNDEMAND|" + i);
		if (temp != "") then begin
			pairs := string_split(temp, "|");
			if (len_array(pairs) > 0) then begin
   			temp := create_array_map;
   			foreach (pair in pairs) begin
   				pair := string_split(pair, "*");
   				if (len_array(pair) == 2 and atoi(pair[0]) != 0 and atof(pair[1]) != 0) then
   				   temp[atoi(pair[0])] := atof(pair[1]);
   			end
         end else
            temp := 0;
			town_demand_map[i] := temp;
			//call display_array(temp);
		end
	end
end

procedure get_town_rep begin
   if (cur_town == AREA_ARROYO) then
     return global_var(GVAR_TOWN_REP_ARROYO);
   else if (cur_town == AREA_KLAMATH) then
     return global_var(GVAR_TOWN_REP_KLAMATH);
   else if (cur_town == AREA_DEN) then
     return global_var(GVAR_TOWN_REP_THE_DEN);
   else if (cur_town == AREA_VAULT_CITY) then
     return global_var(GVAR_TOWN_REP_VAULT_CITY);
   else if (cur_town == AREA_GECKO) then
     return global_var(GVAR_TOWN_REP_GECKO);
   else if (cur_town == AREA_MODOC) then
     return global_var(GVAR_TOWN_REP_MODOC);
   else if (cur_town == AREA_BROKEN_HILLS) then
     return global_var(GVAR_TOWN_REP_BROKEN_HILLS);
   else if (cur_town == AREA_NEW_RENO) then
     return global_var(GVAR_TOWN_REP_NEW_RENO);
   else if (cur_town == AREA_REDDING) then
     return global_var(GVAR_TOWN_REP_REDDING);
   else if (cur_town == AREA_NCR) then
     return global_var(GVAR_TOWN_REP_NCR);
   else if (cur_town == AREA_VAULT_13) then
     return global_var(GVAR_TOWN_REP_VAULT_13);
   else if (cur_town == AREA_SAN_FRANCISCO) then
     return global_var(GVAR_TOWN_REP_SAN_FRANCISCO);
   else if (cur_town == AREA_ABBEY) then
     return global_var(GVAR_TOWN_REP_ABBEY);
   else if (cur_town == AREA_EPA) then
     return global_var(GVAR_TOWN_REP_EPA);
   else if (cur_town == AREA_PRIMITIVE_TRIBE) then
     return global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE);
   else if (cur_town == AREA_VAULT_15) then
     return global_var(GVAR_TOWN_REP_VAULT_15);
   else
     return 0;
end

procedure get_highest_barter_in_party begin
	variable i := 0;
	variable obj, pid, max;
	max := barter_skill(dude_obj);
	
	foreach (obj in party_member_list_critters) if (obj) then begin
		if (barter_skill(obj) > max) then begin
			max := barter_skill(obj);
		end
	end
	return max;
end