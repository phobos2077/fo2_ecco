/**
 * Damage mod.
 * 
 * - Implements new damage formula based on Vanilla, with a few differences:
 *    - DT is reduced based on ammo DR Adjust using a configurable formula
 *    - In a critical burst, a configurable fraction of bullets will keep the critical effects (as opposed to all bullets)
 *    - All calculations for each bullet/attack is done in float and rounded at the end using probabilistic rounding
 * 
 * - On start, checks if any DamageMod integrated into sfall is enabled and auto-corrects, prompting user to restart.
 *
 * - Allows to override attack damage type based on loaded ammo. This affects damage calculations as well as death animations.
 */

#define SCRIPT_REALNAME  "pbs_damage_mod"

#include "../sfall/lib.arrays.h"
#include "../sfall/lib.math.h"
#include "../sfall/lib.obj.h"
#include "../sfall/define_lite.h"
#include "../sfall/define_extra.h"
#include "../sfall/sfall.h"

#include "../headers/animcomd.h"

#include "../_pbs_headers/ecco_log.h"
#include "../_pbs_headers/ecco_ini.h"
#include "../_pbs_headers/math_ext.h"

procedure start;
procedure load_damage_types_from_ini;
procedure load_attack_mode_from_ini;
procedure combatdamage_handler;
procedure itemdamage_handler;
procedure deathanim2_handler;
procedure check_damage_formula;
procedure get_weapon_damage_type_override(variable weapon);
procedure calc_damage(variable weapon, variable rounds, variable targetDT, variable targetDR, variable rangedBonus,
   variable criticalMult, variable difficulty, variable ctdSource, variable flags, variable dmgType, variable weaponPerk, variable attackType);
procedure calc_effective_dtdr(variable targetDT, variable targetDR, variable ammoDR, variable ctdSource, variable bypass,
   variable weaponPerk, variable attackType);
procedure item_w_subtype(variable weapon, variable attackType);
procedure get_ammo_value(variable weapon, variable param);
procedure map_enter_p_proc;

#define INI_SECTION   "DAMAGE"
#define INI_DAMAGE_TYPE_SECTION   "DAMAGE_TYPE"
#define INI_ATTACK_MODES_SECTION  "ATTACK_MODES"

#define debug_verbose(msg)    if ini_debug then debug_log(msg)

#define DT_MODE_ADD   (1)
#define DT_MODE_MULT  (2)

import variable pbs_trap_hold_critters;

variable
   item_damage_min,
   item_damage_max,
   item_damage_weapon,
   item_damage_attacker,
   ini_burst_critical_fraction,
   ini_dt_mode_positive,
   ini_dt_mode_negative,
   ini_dt_mult_positive,
   ini_dt_mult_negative,
   ini_damage_types,
   ini_dr_adjust_by_attack_mode,
   ini_debug,
   death_anims_normal,
   death_anims_maximum;

procedure start begin
   if game_loaded then begin
      call check_damage_formula;
      float_from_ini_file_clamped(burst_critical_fraction, INI_COMBAT, INI_SECTION, 0.0, 1.0);
      int_from_ini_file(dt_mode_positive, INI_COMBAT, INI_SECTION);
      int_from_ini_file(dt_mode_negative, INI_COMBAT, INI_SECTION);
      float_from_ini_file_clamped(dt_mult_positive, INI_COMBAT, INI_SECTION, 0.0, 10);
      float_from_ini_file_clamped(dt_mult_negative, INI_COMBAT, INI_SECTION, 0.0, 10);
      int_from_ini_file(debug, INI_COMBAT, INI_SECTION);

      call load_damage_types_from_ini;
      call load_attack_mode_from_ini;

      register_hook_proc(HOOK_COMBATDAMAGE, combatdamage_handler);
      register_hook_proc(HOOK_ITEMDAMAGE, itemdamage_handler);
      register_hook_proc(HOOK_DEATHANIM2, deathanim2_handler);

      death_anims_normal := [
         ANIM_dancing_autofire,
         ANIM_sliced_in_half,
         ANIM_charred_body,
         ANIM_charred_body,
         ANIM_electrify,
         ANIM_fall_back,
         ANIM_big_hole
      ];
      fix_array(death_anims_normal);
      death_anims_maximum := [
         ANIM_chunks_of_flesh,
         ANIM_sliced_in_half,
         ANIM_fire_dance,
         ANIM_melted_to_nothing,
         ANIM_electrified_to_nothing,
         ANIM_fall_back,
         ANIM_exploded_to_nothing
      ];
      fix_array(death_anims_maximum);
   end
end

procedure load_damage_types_from_ini begin
   variable section, k, v, pid, dmgType;
   ini_damage_types = create_array_map;
   section = get_ini_section(INI_COMBAT, INI_DAMAGE_TYPE_SECTION);
   foreach (k: v in section) begin
      pid := atoi(k);
      dmgType := atoi(v);
      if (pid > 0 and dmgType >= DMG_normal_dam and dmgType <= DMG_explosion) then begin
         ini_damage_types[pid] := dmgType + 1; // to distinguish normal damage from non-existing key...
      end
   end
   debug_verbose("Loaded damage types "+debug_array_str(ini_damage_types));
end

procedure load_attack_mode_from_ini begin
   ini_dr_adjust_by_attack_mode = create_array_map;

   variable mode;
   for (mode := ATTACK_MODE_PUNCH; mode <= ATTACK_MODE_FLAME; mode++) begin
      variable val := get_str_from_ini(INI_COMBAT, INI_ATTACK_MODES_SECTION, "dr_adjust_"+mode);
      if (val != "") then begin
         ini_dr_adjust_by_attack_mode[mode] := atoi(val);
      end
   end
   debug_verbose("Loaded DR adjust by attack modes "+debug_array_str(ini_dr_adjust_by_attack_mode));
end

procedure get_weapon_attack_mode_by_attack_type(variable weapon, variable attackType) begin
   if (attackType == ATKTYPE_KICK or (attackType >= ATKTYPE_STRONGKICK and attackType <= ATKTYPE_PIERCINGKICK)) then
      return ATTACK_MODE_KICK;

   if (not weapon) then
      return ATTACK_MODE_PUNCH;

   return weapon_attack_mode(obj_pid(weapon), attackType);
end

/**
   HOOK_COMBATDAMAGE

   Runs when:

   Game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). This happens BEFORE the actual attack animation.
   AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.
   Does not run for misses, or non-combat damage like dynamite explosions.

   Critter arg0  - The target
   Critter arg1  - The attacker
   int     arg2  - The amount of damage to the target
   int     arg3  - The amount of damage to the attacker
   int     arg4  - The special effect flags for the target (use bwand DAM_* to check specific flags)
   int     arg5  - The special effect flags for the attacker (use bwand DAM_* to check specific flags)
   int     arg6  - The weapon used in the attack
   int     arg7  - The bodypart that was struck
   int     arg8  - Damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled)
   int     arg9 - Number of bullets actually hit the target (1 for melee attacks)
   int     arg10 - The amount of knockback to the target
   int     arg11 - Attack Type (see ATKTYPE_* constants)
   mixed   arg12 - computed attack data (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data)

   int     ret0 - The damage to the target
   int     ret1 - The damage to the attacker
   int     ret2 - The special effect flags for the target
   int     ret3 - The special effect flags for the attacker
   int     ret4 - The amount of knockback to the target
 */
procedure combatdamage_handler begin
   variable dmgType, weaponPerk, critterDT, critterDR, weaponSubType, bonusRanged, difficulty, stoneWall;
   variable target, flags, knockback, calcKnockback, calcAmount, oldAmount, oldFlags;

   variable
      ctdTarget        := get_sfall_arg,
      ctdSource        := get_sfall_arg,
      amountTarget     := get_sfall_arg,
      amountSource     := get_sfall_arg,
      flagsTarget      := get_sfall_arg,
      flagsSource      := get_sfall_arg,
      weapon           := get_sfall_arg,
      bodypart         := get_sfall_arg,
      damageMultiplier := get_sfall_arg,
      rounds           := get_sfall_arg,
      amountKnockback  := get_sfall_arg,
      attackType         := get_sfall_arg;

   if (ctdSource != item_damage_attacker or weapon != item_damage_weapon) then begin
      debug_msg("! ERROR ! damage_mod: Expected attacker and weapon differs!");
      return;
   end

   if (flagsSource bwand DAM_HIT) then begin
      target := ctdTarget;
      flags := flagsTarget;
      knockback := true;
   end else begin
      target := ctdSource;
      flags := flagsSource;
      knockback := false;
   end

   if not target or (obj_type(target) != OBJ_TYPE_CRITTER) then begin
      return;
   end

   debug_verbose("target: "+obj_name(target)+"("+target+"), rounds: "+rounds);

   if weapon then begin
      dmgType := get_weapon_damage_type_override(weapon);
      if (dmgType == -1) then
         dmgType := weapon_dmg_type(weapon);

      weaponPerk := get_proto_data(obj_pid(weapon), PROTO_WP_PERK);
   end else begin
      dmgType := get_proto_data(obj_pid(ctdSource), PROTO_CR_DMG_TYPE) if obj_type(ctdSource) == OBJ_TYPE_CRITTER else DMG_normal_dam;
      weaponPerk := -1;
   end

   critterDT := get_critter_stat(target, STAT_dmg_thresh + dmgType);
   critterDR := get_critter_stat(target, STAT_dmg_resist + dmgType);

   weaponSubType := item_w_subtype(weapon, attackType); // item_w_subtype_
   if (ctdSource != dude_obj) or (weaponSubType != WEAPON_TYPE_RANGED) then
      bonusRanged := 0;
   else
      bonusRanged := has_trait(TRAIT_PERK, ctdSource, PERK_bonus_ranged_damage) * 2;

   difficulty := 100;
   if (has_trait(TRAIT_OBJECT, ctdSource, OBJECT_TEAM_NUM) != has_trait(TRAIT_OBJECT, dude_obj, OBJECT_TEAM_NUM)) then begin
      if (combat_difficulty == 0) then
         difficulty := 75;
      else if (combat_difficulty == 2) then
         difficulty := 125;
   end

   calcAmount := calc_damage(weapon, rounds, critterDT, critterDR, bonusRanged, damageMultiplier, difficulty, ctdSource, flags, dmgType, weaponPerk, attackType);
   // F2 default, for reference:
   // Damage = (1 - (DR_armor + DR_ammo_adjust) * (((raw_damage * (dmg_mult * damageMultiplier)) / dmg_div) - critterDT)
   /*dmg_resist += get_ammo_value(weapon, PROTO_AM_DR_MOD); // item_w_dr_adjust_ (DR Adjust %)
   if (dmg_resist < 100) then begin
      if (dmg_resist < 0) then dmg_resist := 0;

      dmg_mult := damageMultiplier * get_ammo_value(weapon, PROTO_AM_DMG_MULT); // item_w_dam_mult_ (Dmg mod A)
      dmg_div := get_ammo_value(weapon, PROTO_AM_DMG_DIV); // item_w_dam_div_ (Dmg mod B)

      for (i := 1; i <= rounds; i++) begin
         damage := (random(item_damage_min, item_damage_max) + bonusRanged) * dmg_mult; // item_w_damage_ (raw_damage)
         if dmg_div then damage /= dmg_div;

         damage := (((damage / 2) * difficulty) / 100) - critterDT;
         if (damage > 0) then begin
            damage := damage - ((damage * dmg_resist) / 100); // reduce damage by the percentage of DR_armor + DR_Ammo
            if (damage > 0) then calcAmount += damage;
         end
      end
   end*/
   // F2 default end

   if (ctdSource == dude_obj) then begin
      if has_trait(TRAIT_PERK, ctdSource, PERK_living_anatomy_perk) and (critter_kill_type(ctdTarget) != KILL_TYPE_robot_kills)
         and (critter_kill_type(ctdTarget) != KILL_TYPE_alien_kills) then
         calcAmount += 5;
      if has_trait(TRAIT_PERK, ctdSource, PERK_pyromaniac_perk) and (dmgType == DMG_fire) then
         calcAmount += 10; // increase from 5
   end

   // Clear trap hold on knockdown.
   if ((flags bwand (DAM_KNOCKED_DOWN + DAM_KNOCKED_OUT)) and pbs_trap_hold_critters[target]) then begin
      unset_array(pbs_trap_hold_critters, target);
   end
   if knockback
      and ((get_flags(target) bwand FLAG_MULTIHEX) == 0)
      and (dmgType == DMG_explosion or weapon == 0 or weaponSubType == WEAPON_TYPE_MELEE)
      and (pbs_trap_hold_critters[target] == 0) // critters caught in traps should not move until released
      and ((get_proto_data(obj_pid(target), PROTO_CR_FLAGS) bwand CFLG_NOKNOCKDOWN) == 0) then begin // critter_flag_check_

      if (target == dude_obj) and has_trait(TRAIT_PERK, target, PERK_stonewall_perk) then begin
         stoneWall := 1;
         if (random(0, 100) < 50) then knockback := false;
      end
      if knockback then begin
         if (weaponPerk == PERK_weapon_knockback) then
            calcKnockback := calcAmount / 5;
         else
            calcKnockback := calcAmount / 10;

         if stoneWall then calcKnockback /= 2;
      end
   end

   if (flagsSource bwand DAM_HIT) then begin
      oldAmount := amountTarget;
      oldFlags := flagsTarget;
   end else begin
      oldAmount := amountSource;
      oldFlags := flagsSource;
   end
   debug_verbose("Final damage = " + calcAmount+ " ("+oldAmount+"), flags = " + sprintf("%x", flags) +"("+sprintf("%x", oldFlags)+")" +", knockback = " + calcKnockback + "("+amountKnockback+")");

   if (flagsSource bwand DAM_HIT) then begin
      amountTarget := calcAmount;
      flagsTarget := flags;
   end else begin
      amountSource := calcAmount;
      flagsSource := flags;
   end
   amountKnockback := calcKnockback;

   set_sfall_return(amountTarget);
   set_sfall_return(amountSource);
   set_sfall_return(flagsTarget);
   set_sfall_return(flagsSource);
   set_sfall_return(amountKnockback);

   set_sfall_arg(2, amountTarget);
   set_sfall_arg(3, amountSource);
   set_sfall_arg(4, flagsTarget);
   set_sfall_arg(5, flagsSource);
   set_sfall_arg(10, amountKnockback);
end

procedure get_weapon_damage_type_override(variable weapon) begin
   variable dmgType, ammoPid;
   // First, check override for ammo.
   ammoPid := get_weapon_ammo_pid(weapon);
   if (ammoPid and ini_damage_types[ammoPid]) then begin
      return ini_damage_types[ammoPid] - 1;
   end else if (ini_damage_types[obj_pid(weapon)]) then begin  // check override for weapon
      return ini_damage_types[obj_pid(weapon)] - 1;
   end
   return -1;
end

/*
   Differences from YAAM:
   - All calculations are in float and rounded once per bullet using probabilistic rounding.
   - Critical damage multiplier and armor bypass is only applied to a fraction of rounds, defined by combat.ini|DAMAGE|burst_critical_fraction.
*/
procedure calc_damage(variable weapon, variable rounds, variable targetDT, variable targetDR, variable rangedBonus, variable criticalMult,
      variable difficulty, variable ctdSource, variable flags, variable dmgType, variable weaponPerk, variable attackType)
begin
   variable accumulatedDamage, ammoDiv, ammoMult, ammoDR, i, baseDamage, bulletDamage, staticMult, calcDTDR, bypassArmor, criticalRounds;
   if (rounds <= 0) then begin
      return 0;
   end

   ammoDiv := get_ammo_value(weapon, PROTO_AM_DMG_DIV);
   if (ammoDiv == 0) then ammoDiv := 1; // prevent divide by zero
   ammoMult := get_ammo_value(weapon, PROTO_AM_DMG_MULT);
   ammoDR := get_ammo_value(weapon, PROTO_AM_DR_MOD); // we use DR mod as DT&DR mod

   // DR Adjust mod by attack mode
   ammoDR += ini_dr_adjust_by_attack_mode[get_weapon_attack_mode_by_attack_type(weapon, attackType)];

   bypassArmor := (flags bwand DAM_BYPASS) and dmgType != DMG_emp;

   // For the first bullet
   calcDTDR := calc_effective_dtdr(targetDT, targetDR, ammoDR, ctdSource, bypassArmor, weaponPerk, attackType);

   staticMult := 0.01 * difficulty * ammoMult / ammoDiv;
   criticalMult *= 0.5;

   debug_verbose("ammoDR="+ammoDR+", dmgType="+dmgType+" DT="+calcDTDR[0]+"/"+targetDT+", DR="+calcDTDR[1]+"/"+targetDR+", staticMult="+staticMult+", criticalMult="+criticalMult);

   if (ini_burst_critical_fraction != 1.0 and (bypassArmor or criticalMult > 1)) then
      criticalRounds := math_max(math_round_chance(ini_burst_critical_fraction * rounds), 1);
   else
      criticalRounds := rounds;

   // Start of damage calculation loop
   for (i := 0; i < rounds; i++) begin
      // After a fraction of bullets, don't allow any more criticals, to make bursts less OP.
      if (i == criticalRounds) then begin
         if (bypassArmor) then begin
            calcDTDR := calc_effective_dtdr(targetDT, targetDR, ammoDR, ctdSource, false, weaponPerk, attackType);
            debug_verbose("consequitive: DT="+calcDTDR[0]+", DR="+calcDTDR[1]);
         end
         if (criticalMult > 1) then begin
            criticalMult := 1;
         end
      end

      baseDamage := random(item_damage_min, item_damage_max);
      bulletDamage := baseDamage + rangedBonus - calcDTDR[0];
      if (bulletDamage <= 0) then
         continue;

      bulletDamage := math_round_chance(bulletDamage * staticMult * (1 - calcDTDR[1] / 100.0) * criticalMult);

      debug_verbose("Bullet "+i+" dmg="+bulletDamage+"/"+baseDamage);
      if (bulletDamage > 0) then begin
         accumulatedDamage += bulletDamage;
      end
   end
   return accumulatedDamage;
end

/*
procedure calc_dtdr_yaam(variable targetDT, variable targetDR, variable ammoDR) begin
   variable calcDT, calcDR, calcDRMod;
   calcDT := targetDT - ammoDR;
   calcDRMod := calcDT * 10 if calcDT < 0 else 0;

   // DR = armor DR + DT (note that DT should be less than or equal to zero)
   calcDR := targetDR + calcDRMod;
   if (calcDR < 0) then begin
      calcDR := 0;
   end else if (calcDR >= 100) then begin
      return 0;
   end
   return [max(calcDT, 0), calcDR];
end
*/

procedure calc_dtdr_vanilla_plus(variable targetDT, variable targetDR, variable ammoDR) begin
   variable calcDRMod, dtMult, dtMode;

   // Use separate mode and multiplier for positive and negative DR Adjust.
   if (ammoDR > 0) then begin
      dtMode := ini_dt_mode_positive;
      dtMult := ini_dt_mult_positive;
   end else begin
      dtMode := ini_dt_mode_negative;
      dtMult := ini_dt_mult_negative;
   end
   switch dtMode begin
      case DT_MODE_ADD:  targetDT += 0.1 * ammoDR * dtMult;
      case DT_MODE_MULT: targetDT *= 1.0 + 0.01 * ammoDR * dtMult;
   end

   // No change to DR calculation.
   targetDR += ammoDR;

   return [math_max(targetDT, 0), math_max(math_min(targetDR, 100), 0)];
end

procedure calc_effective_dtdr(variable targetDT, variable targetDR, variable ammoDR, variable ctdSource, variable bypassArmor,
   variable weaponPerk, variable attackType)
begin
   if (bypassArmor) then begin
      targetDT := targetDT * 20 / 100;
      targetDR := targetDR * 20 / 100;
   end else begin
      if (weaponPerk == PERK_weapon_penetrate)
         or (attackType == ATKTYPE_PALMSTRIKE or attackType == ATKTYPE_PIERCINGSTRIKE
         or attackType == ATKTYPE_HOOKKICK or attackType == ATKTYPE_PIERCINGKICK) then
         targetDT := targetDT * 20 / 100;

      if ctdSource == dude_obj and has_trait(TRAIT_TRAIT, ctdSource, TRAIT_finesse) then
         targetDR += 30;
   end

   return calc_dtdr_vanilla_plus(targetDT, targetDR, ammoDR);
end

/*
   HOOK_ITEMDAMAGE
   Runs when retrieving the damage rating of the player's used weapon. (Which may be their fists.)

   int     arg0 - The default min damage
   int     arg1 - The default max damage
   Item    arg2 - The weapon used (0 if unarmed)
   Critter arg3 - The critter doing the attacking
   int     arg4 - The type of attack
   int     arg5 - non-zero if this is an attack using a melee weapon

   int     ret0 - Either the damage to be used, if ret1 isn't given, or the new minimum damage if it is
   int     ret1 - The new maximum damage
*/
procedure itemdamage_handler begin
   item_damage_min := get_sfall_arg;
   item_damage_max := get_sfall_arg;
   item_damage_weapon := get_sfall_arg;
   item_damage_attacker := get_sfall_arg;
   //variable
   //   attackType := get_sfall_arg,
   //   isMelee := get_sfall_arg;

   //display_msg("itemdamage: " + item_damage_min + "-" + item_damage_max + ", wpn: "+(obj_pid(item_damage_weapon) if item_damage_weapon else 0)+", attackType: "+attackType+", isMelee: "+isMelee);
end

/*

*/

#define critter_anim_fid(objFid, animType, rot)       ((rot * 0x10000000) bwor ((animType * 0x10000) bwand 0xFF0000) bwor (objFid bwand 0xF00FFFF))

procedure validate_critter_anim(variable critter, variable animType) begin
   variable objFid := obj_art_fid(critter);
   variable rot := objFid bwand 0x70000000;
   // This is based on vanilla logic from art_id_()
   if (animType != ANIM_fire_dance and animType >= ANIM_fall_back and animType <= ANIM_fall_front_blood) then begin
      if (art_exists(critter_anim_fid(objFid, animType, 1))) then
         return true;
   end
   return art_exists(critter_anim_fid(objFid, animType, 0));
end

/*
   HOOK_DEATHANIM2
   Runs after Fallout has calculated the death animation. Lets you set your own custom frame id, so more powerful than HOOK_DEATHANIM1, but performs no validation. When using critter_dmg function, this script will also run. In that case weapon pid will be -1 and attacker will point to an object with obj_art_fid == 0x20001F5.

   Does not run for critters in the knockdown/out state.

   int     arg0 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)
   Critter arg1 - The attacker
   Critter arg2 - The target
   int     arg3 - The amount of damage
   int     arg4 - The death anim id calculated by Fallout

   int     ret0 - The death anim id to override with
*/
procedure deathanim2_handler begin
   /**
    * Correct death anim based on overriden damage type.
    */
   variable weapon, dmgType, dmgTypeNew, targetFid;
   variable
      weaponPid := get_sfall_arg,
      attacker := get_sfall_arg,
      target := get_sfall_arg,
      damage := get_sfall_arg,
      deathAnim := get_sfall_arg;

   // Only correct for gory animations.
   if (deathAnim == ANIM_fall_back or deathAnim == ANIM_fall_front or obj_type(attacker) != OBJ_TYPE_CRITTER) then return;

   // Find actual attacker's weapon.
   weapon := get_active_weapon(attacker);
   if (not weapon) then return;

   dmgTypeNew := get_weapon_damage_type_override(weapon);
   if (dmgTypeNew == -1) then return;

   deathAnim := death_anims_maximum[dmgTypeNew] if is_in_array(deathAnim, death_anims_maximum) else death_anims_normal[dmgTypeNew];
   
   // Check if animation actually exists.
   if not validate_critter_anim(target, deathAnim) then begin
      deathAnim := ANIM_fall_back;
   end

   debug_verbose("Overriding death anim according to new damage type "+dmgTypeNew+" to "+deathAnim);
   set_sfall_return(deathAnim);
   set_sfall_arg(4, deathAnim);
end

procedure item_w_subtype(variable weapon, variable attackType) begin
   variable attack_mode, type := WEAPON_TYPE_UNARMED;

   if weapon and (attackType <= ATKTYPE_RWEP2) then begin
      attack_mode := weapon_attack_mode(obj_pid(weapon), attackType);

      if (attack_mode >= ATTACK_MODE_SINGLE) then
         type := WEAPON_TYPE_RANGED;
      else if (attack_mode == ATTACK_MODE_THROW) then
         type := WEAPON_TYPE_THROWN;
      else if (attack_mode >= ATTACK_MODE_SWING) then
         type := WEAPON_TYPE_MELEE;
      else if (attack_mode == ATTACK_MODE_NONE) then
         type := WEAPON_TYPE_NONE;
   end

   return type;
end

procedure get_ammo_value(variable weapon, variable param) begin
   variable pid := -1, value := 0; // default DR value

   if weapon then begin
      pid := get_weapon_ammo_pid(weapon);
      if (pid > -1) then value := get_proto_data(pid, param);
   end
   if (pid == -1 and param != PROTO_AM_DR_MOD) then value := 1; // default value for Mult/Div

   return value;
end

procedure map_enter_p_proc begin
   call check_damage_formula;
end

procedure check_damage_formula begin
  variable damage_formula = get_ini_setting("ddraw.ini|Misc|DamageFormula");
  if damage_formula != 0 then begin
    debug_msg("Damage Formula set to, resetting" + damage_formula);
    set_ini_setting("ddraw.ini|Misc|DamageFormula", 0);
    float_msg(dude_obj, "EcCo: damage formula setting in ddraw.ini was incorrect, damage mod failed to load. The setting is fixed now. EXIT AND RE-LAUNCH THE GAME now.", FLOAT_MSG_WARNING);
    return false;
  end
  return true;
end


// 1.2 damage has 20% chance to be rounded up to 2
// by burn
procedure round_chance(variable dmg) begin
   variable base_dmg = floor2(dmg);
   variable chance = (dmg - base_dmg)*100;
   variable rnd = random(1, 100);
   variable final_dmg;

   if dmg < 0 then begin
      debug_msg("dmg is " + dmg + ", rounded dmg is 0");
      return 0;
   end
   return (base_dmg + 1) if chance > rnd else base_dmg;
end

