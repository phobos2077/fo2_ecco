/*
   Random encounter tweaks:
   - For all NPC's spawned without any extra ammo for their guns, add some.
*/
#define SCRIPT_REALNAME             "pbs_random_encounters"

#include "../sfall/sfall.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.inven.h"
#include "../sfall/lib.obj.h"
#include "../sfall/define_lite.h"
#include "../sfall/define_extra.h"

#include "../_pbs_headers/ecco_ids.h"
#include "../_pbs_headers/ecco_ini.h"
#include "../_pbs_headers/ecco_log.h"
#include "../_pbs_headers/maps_utils.h"

variable begin
   ini_remember_sneak;
   ini_ensure_npcs_ammo;
   encounter_map_id;
   was_using_sneak;
end

export variable pbs_random_encounter_placement;

#define weapon_pid_can_burst(pid)      (weapon_attack_mode1(pid) == ATTACK_MODE_BURST or weapon_attack_mode2(pid) == ATTACK_MODE_BURST)

procedure ensure_npcs_ammo begin
   variable critter, weapon, weaponPid, ammoPid, ammoCaliber, magSize, packSize, ammoNeeded, ammoActual;
   foreach (critter in list_as_array(LIST_CRITTERS)) begin
      if (not critter or critter == dude_obj or obj_in_party(critter)) then
         continue;

      weapon := critter_inven_obj(critter, INVEN_TYPE_RIGHT_HAND);
      if (weapon) then begin
         weaponPid := obj_pid(weapon);
         ammoCaliber := get_proto_data(weaponPid, PROTO_WP_CALIBER);
         ammoPid := get_weapon_ammo_pid(weapon);
         magSize := get_proto_data(weaponPid, PROTO_WP_MAG_SIZE);
         if (ammoPid > 0 and magSize > 0) then begin
            packSize := get_proto_data(ammoPid, PROTO_AM_PACK_SIZE);
            ammoNeeded := random(1, 3)
               if (weapon_pid_can_burst(weaponPid) or ammoCaliber == CALIBER_ROCKET or ammoCaliber == CALIBER_40MM_GRENADE)
               else 1;

            ammoActual := obj_is_carrying_obj_pid(critter, ammoPid);
            if (ammoActual < ammoNeeded) then begin
               call add_items_pid(critter, ammoPid, ammoNeeded - ammoActual);
               debug_log(string_format("%s had less ammo (%d) than needed (%d) for his %s. Correcting.", obj_name(critter), ammoActual, ammoNeeded, obj_name_safe(weapon)));
            end
         end
      end
   end
end

procedure relocate_party_to_random_start_point begin
   variable
      points := load_map_start_points, elev, tile, obj, i;

   if (not points) then return;

   tile := array_random_value(points);
   elev := start_point_elev(tile);
   tile := start_point_tile(0xFFFF);

   display_msg_fmt("moving party to %d - %d", elev, tile);

   i := 0;
   foreach (obj in party_member_list(false)) begin
      critter_attempt_placement(obj, tile, elev);
      tile := tile_num_in_direction(tile, 1, 1);
      //tile := points[i];
      //elev := tile / 0x10000;
      //tile := tile bwand 0xFFFF;
      i := (i + 1) % len_array(points);
   end
end

/*
Runs whenever a random encounter occurs (except the Horrigan meeting and scripted encounters), or when the player enters a local map from the world map. You can override the map for loading or the encounter.

int     arg0 - event type: 0 - when a random encounter occurs, 1 - when the player enters from the world map
int     arg1 - the map ID that the encounter will load (see MAPS.h or Maps.txt)
int     arg2 - 1 when the encounter occurs is a special encounter, 0 otherwise

int     ret0 - overrides the map ID, or pass -1 for event type 0 to cancel the encounter and continue traveling
int     ret1 - pass 1 to cancel the encounter and load the specified map from the ret0 (only for event type 0)
*/
procedure encounter_hook begin
   variable
      eventType := get_sfall_arg,
      mapId := get_sfall_arg,
      isSpecial := get_sfall_arg;

   //display_msg_fmt("encounter hook: type %d, mapId: %d, isSpecial: %d, enc table: %d, enc: %d", eventType, mapId, isSpecial, get_sfall_arg, get_sfall_arg);
   if (eventType == 0 and not isSpecial) then
      encounter_map_id := mapId;
end

procedure map_enter_p_proc begin
   //display_msg("gl map_enter_proc");
   if (ini_remember_sneak and was_using_sneak) then begin
      show_iface_tag(0);
      was_using_sneak := false;
   end
   if (encounter_map_id >= 0 and cur_map_index == encounter_map_id) then begin
      if (ini_ensure_npcs_ammo) then
         call ensure_npcs_ammo;

      //call relocate_party_to_random_start_point;
   end
   encounter_map_id := -1;
end

procedure map_exit_p_proc begin
   was_using_sneak := ini_remember_sneak and is_iface_tag_active(0);
   //display_msg("gl map_exit_proc " + is_iface_tag_active(0));
end

#define INI_FILE        INI_MISC
#define INI_SECTION     "ENCOUNTERS"

procedure start begin
   if (game_loaded) then begin
      load_bool_from_ini(remember_sneak, false);
      load_bool_from_ini(ensure_npcs_ammo, false);
      encounter_map_id := -1;
      register_hook_proc(HOOK_ENCOUNTER, encounter_hook);
   end
end
