/*
   AI improvements:
   - Configure certain parameters of called shot conditions, so it happens more consistently and frequently
   - Improved best weapon selection logic (better expected damage estimation, range/distance factors, etc)
*/


#include "../sfall/sfall.h"
#include "../sfall/define_lite.h"
#include "../sfall/define_extra.h"
#include "../sfall/command_lite.h"

#include "../sfall/lib.arrays.h"
#include "../sfall/lib.obj.h"

#include "../_pbs_headers/engine_funcs.h"
#include "../_pbs_headers/ecco_define.h"
#include "../_pbs_headers/ecco_ini.h"
#include "../_pbs_headers/ecco_log.h"

#include "../_pbs_headers/damage_mod.h"

#define SCRIPT_REALNAME    "pbs_ai"

variable begin
   ini_called_int_req;
   ini_called_freq_mult;
   turn_critter;
   modified_hit_chance;

   ini_bestweapon_ref_armor_pid;
end

/**
 * Similar to item_w_called_shot
 */
procedure item_w_called_shot_my(variable critter, variable weapon, variable attackType) begin
   // Fast Shot trait
   if (critter == dude_obj and has_trait(TRAIT_TRAIT, critter, TRAIT_fast_shot)) then
      return false;
   
   variable attackMode;
   // No aimed shot with burst
   if (weapon) then begin
      attackMode := weapon_attack_mode(obj_pid(weapon), attackType);
      if (attackMode == ATTACK_MODE_BURST or attackMode == ATTACK_MODE_FLAME) then
         return false;
   end
   variable dmgType := item_w_damage_type(critter, weapon);
   return dmgType != DMG_explosion
      and dmgType != DMG_fire
      and dmgType != DMG_emp
      and (dmgType != DMG_plasma or attackMode != ATTACK_MODE_THROW);
end

/*procedure pick_random_called_shot begin
   variable rnd := random(1, 7);
   switch (rnd) begin
      case 1: return BODY_HIT_HEAD;
      case 2: return BODY_HIT_LEFT_ARM;
      case 3: return BODY_HIT_RIGHT_ARM;
      case 4: return BODY_HIT_RIGHT_LEG;
      case 5: return BODY_HIT_LEFT_LEG;
      case 6: return BODY_HIT_EYES;
      case 7: return BODY_HIT_GROIN;
   end
end*/

#define calc_bodypart_hit_modifier(bodyPart, isRanged)     get_bodypart_hit_modifier(bodyPart) / (1 if isRanged else 2)

/**
 * Choose body part for called shot based on hit chances. "Spiritual successor" to engine's ai_called_shot.
 * @arg {ObjectPtr} attacker
 * @arg {int} attackType ATKTYPE_*
 * @arg {int} hitChanceRaw - Calculated hit chance before 95% cap.
 * @arg {int} oldBodyPart
 * @ret {int}
 */
procedure ai_choose_bodypart(variable attacker, variable attackType, variable hitChanceRaw, variable oldBodyPart) begin
   variable weapon := item_hit_with(attacker, attackType);

   // TODO: check AP cost for called shot
   if (not item_w_called_shot_my(attacker, weapon, attackType)) then return BODY_UNCALLED;

   // Roll against called_freq.
   variable calledFreq := ceil(get_object_ai_data(attacker, AI_CAP_CALLED_FREQ) * ini_called_freq_mult);
   //debug_log_fmt("Called freq for packet %d = %d", get_ai(attacker), calledFreq);
   if (random(1, calledFreq) != 1) then return BODY_UNCALLED;

   // Minimum INT check.
   variable attackerIq := get_critter_stat(attacker, STAT_iq);
   if (attackerIq < ini_called_int_req[combat_difficulty]) then return BODY_UNCALLED;

   // Choose random body part that satisfies check against min_to_hit.
   variable bodyPart, resultPart, hitChance,
      isRanged := item_w_subtype(weapon, attackType) == WEAPON_TYPE_RANGED,
      oldModifier := calc_bodypart_hit_modifier(oldBodyPart, isRanged),
      hitChanceBase := hitChanceRaw - oldModifier,
      aiMinToHit := get_object_ai_data(attacker, AI_CAP_MIN_TO_HIT),
      bodyParts := [
         BODY_HIT_HEAD,
         BODY_HIT_LEFT_ARM,
         BODY_HIT_RIGHT_ARM,
         BODY_HIT_RIGHT_LEG,
         BODY_HIT_LEFT_LEG,
         BODY_HIT_EYES,
         BODY_HIT_GROIN
      ];
   shuffle_array(bodyParts);

   resultPart := BODY_HIT_TORSO;
   foreach (bodyPart in bodyParts) begin
      hitChance := hitChanceBase + calc_bodypart_hit_modifier(bodyPart, isRanged);
      if (hitChance >= aiMinToHit) then begin
         modified_hit_chance := math_clamp(hitChance, 0, 95);
         resultPart := bodyPart;
         break;
      end
   end
   debug_log_fmt("ai_choose_bodypart (%s, attack: %d, base_chance: %d) = %d",
      obj_name(attacker), attackType, hitChanceBase, resultPart);
   return resultPart;
end

/*
Runs when Fallout is calculating the chances of an attack striking a target. Runs after the hit chance is fully calculated normally, including applying the 95% cap.

int     arg0 - The hit chance (capped)
Critter arg1 - The attacker
Critter arg2 - The target of the attack
int     arg3 - The targeted bodypart
int     arg4 - Source tile (may differ from attacker's tile, when AI is considering potential fire position)
int     arg5 - Attack Type (see ATKTYPE_* constants)
int     arg6 - Ranged flag. 1 if the hit chance calculation takes into account the distance to the target. This does not mean the attack is a ranged attack
int     arg7 - The raw hit chance before applying the cap

int     ret0 - The new hit chance. The value is limited to the range of -99 to 999
*/
procedure tohit_handler begin
   variable
      hitChance := get_sfall_arg,
      attacker := get_sfall_arg,
      target := get_sfall_arg,
      bodyPart := get_sfall_arg,
      fromTile := get_sfall_arg,
      attackType := get_sfall_arg,
      useDist := get_sfall_arg,
      hitChanceRaw := get_sfall_arg,
      sameTile := fromTile == tile_num(attacker),
      ctd := combat_data,
      ctdAttacker := get_object_data(ctd, C_ATTACK_SOURCE),
      ctdTarget := get_object_data(ctd, C_ATTACK_TARGET);
      //ctdBodyPart := get_object_data(ctd, C_ATTACK_BODY_PART),
      //ctdFlags := get_object_data(ctd, C_ATTACK_FLAGS_TARGET);

   /*debug_log(string_format("tohit %s = %d (same_tile: %d, use_dist: %d, part: %d)",
      obj_name(attacker), hitChance, sameTile, useDist, bodyPart)
      + string_format("; ctd: (crit: %s, part: %d, flags: %d)",
      obj_name(ctdAttacker), ctdBodyPart, ctdFlags) );*/
   
   // A crazy hack based on understanding exactly when HOOK_TOHIT is called and how main_ctd is used by engine:
   // AI can do multiple calls of tohit before his attack, but he always makes one final call in compute_attack,
   // right after main_ctd was initialized but before most of the attack calculation, including AP cost, attack roll, damage, etc.
   // To change body part here we can just set it in main_ctd.
   // But we also need to make sure this TOHIT call returns modified (reduced) hit chance, for attack roll to use the correct value next.
   if (sameTile and useDist and attacker != dude_obj and attacker == turn_critter and attacker == ctdAttacker and target == ctdTarget) then begin
      variable
         newBodyPart := ai_choose_bodypart(attacker, attackType, hitChanceRaw, bodyPart);

      if (newBodyPart != bodyPart) then begin
         set_object_data(ctd, C_ATTACK_BODY_PART, newBodyPart);
         set_sfall_return(modified_hit_chance);
         set_sfall_arg(0, modified_hit_chance);
      end
   end
end

/*
Runs before and after each turn in combat (for both PC and NPC).

int     arg0 - event type:
               1 - start of turn
               0 - normal end of turn
              -1 - combat ends abruptly (by script or by pressing Enter during PC turn)
              -2 - combat ends normally (hook always runs at the end of combat)
Critter arg1 - critter doing the turn
int     arg2 - 1 at the start/end of the player's turn after loading a game saved in combat mode, 0 otherwise

int     ret0 - pass 1 at the start of turn to skip the turn, pass -1 at the end of turn to force end of combat
*/
procedure combatturn_handler begin
   if (get_sfall_arg == 1) then begin
      turn_critter := get_sfall_arg;
      //debug_log_fmt("set turn_critter = %s", obj_name(turn_critter));
   end
end

#define ref_armor_dtdr(offset, dmgType)    (get_proto_data(ini_bestweapon_ref_armor_pid, offset + dmgType * 4) if ini_bestweapon_ref_armor_pid > 0 else 0)

procedure weapon_rank(variable critter, variable weapon, variable target) begin
   // TODO: vanilla uses combat_safety_invalidate_weapon to account for potential friendly fire, this code does not
   variable
      pid := obj_pid(weapon),
      avgDmg := (get_proto_data(pid, PROTO_WP_DMG_MIN) + get_proto_data(pid, PROTO_WP_DMG_MAX)) / 2,
      burstSize := get_proto_data(pid, PROTO_WP_BURST) if (weapon_attack_mode1(pid) == ATTACK_MODE_BURST or weapon_attack_mode2(pid) == ATTACK_MODE_BURST) else 1,
      avgBurstSize := (0.66 * burstSize) if burstSize > 1 else 1,
      ammoPid := get_weapon_ammo_pid(weapon),
      ammoDmgMult := (1.0 * get_proto_data(ammoPid, PROTO_AM_DMG_MULT) / get_proto_data(ammoPid, PROTO_AM_DMG_DIV) if (ammoPid > 0) else 1),
      dmgType := get_proto_data(pid, PROTO_WP_DMG_TYPE),
      perk := get_proto_data(pid, PROTO_WP_PERK),
      targetDT := get_critter_stat(target, STAT_dmg_thresh + dmgType) if target != 0 else ref_armor_dtdr(PROTO_AR_DT_NORMAL, dmgType),
      targetDR := get_critter_stat(target, STAT_dmg_resist + dmgType) if target != 0 else ref_armor_dtdr(PROTO_AR_DR_NORMAL, dmgType),
      ammoDR := get_proto_data(ammoPid, PROTO_AM_DR_MOD) if (ammoPid > 0) else 0,
      finalDTDR := calc_effective_dtdr(targetDT, targetDR, ammoDR, critter, false, perk, ATKTYPE_LWEP1),
      expectedDmgPerAttack := avgBurstSize * math_max((ammoDmgMult * avgDmg - finalDTDR[0]) * (100 - finalDTDR[1]) / 100, 0),
      attackAP := get_proto_data(pid, PROTO_WP_APCOST_2) if (weapon_attack_mode2(pid) == ATTACK_MODE_BURST) else get_proto_data(pid, PROTO_WP_APCOST_1),
      expectedDmgPerAP := expectedDmgPerAttack / attackAP,
      range := get_proto_data(pid, PROTO_WP_RANGE_1),
      dmgFactor := expectedDmgPerAP * 10,
      rangeFactor;

   if (target != 0) then begin
      variable dist := tile_distance_objs(critter, target);
      // Account for scope hit chance penalty
      if (perk == PERK_weapon_scope_range and dist < 6) then
         rangeFactor := -10;
      else // Reduce range factor depending on actual distance to target
         rangeFactor := range * 2 * math_min(dist, 50) / 50;
   end else 
      rangeFactor := range;

   //debug_log_fmt("%s DR dmg mult: %.2f, dr mod: %d | target DT %d, DR %d", proto_data(ammoPid, it_name), ammoDmgMult, ammoDR, targetDT, targetDR);
   //debug_log_fmt("%s effective DT/DR %s, dmgPerAttack: %.2f", obj_name(weapon), debug_array_str(finalDTDR), expectedDmgPerAttack);
   return round(dmgFactor + rangeFactor);
end

procedure weapon_type(variable weapon) begin
   variable attackMode, type := WEAPON_TYPE_UNARMED;

   if weapon then begin
      attackMode := weapon_attack_mode(obj_pid(weapon), ATKTYPE_RWEP1);
      if (attackMode >= ATTACK_MODE_SINGLE) then
         type := WEAPON_TYPE_RANGED;
      else if (attackMode == ATTACK_MODE_THROW) then
         type := WEAPON_TYPE_THROWN;
      else if (attackMode >= ATTACK_MODE_SWING) then
         type := WEAPON_TYPE_MELEE;
      else if (attackMode == ATTACK_MODE_NONE) then
         type := WEAPON_TYPE_NONE;
   end

   return type;
end

/*
HOOK_BESTWEAPON
Runs when the AI decides which weapon is the best while searching the inventory for a weapon to equip in combat. This also runs when the player presses the "Use Best Weapon" button on the party member control panel.

Critter arg0 - the critter searching for a weapon
Item    arg1 - the best weapon chosen from two items
Item    arg2 - the first choice of weapon
Item    arg3 - the second choice of weapon
Critter arg4 - the target of the critter (can be 0)

Item    ret0 - overrides the chosen best weapon
*/
procedure bestweapon_handler begin
   variable
      critter := get_sfall_arg,
      weaponChosen := get_sfall_arg,
      weapon1 := get_sfall_arg,
      weapon2 := get_sfall_arg,
      target := get_sfall_arg;
   
   //display_msg(string_format("bestweapon for %s: %s vs %s -> %s (against %s)", obj_name_safe(critter), obj_name_safe(weapon1), obj_name_safe(weapon2), obj_name_safe(weaponChosen), obj_name_safe(target)));

   if (weapon1 == 0 or weapon2 == 0
      or weapon_type(weapon1) != weapon_type(weapon2)
      or proto_item_is_hidden(obj_pid(weapon1)) or proto_item_is_hidden(obj_pid(weapon2))) then return;

   variable
      weapon1rank := weapon_rank(critter, weapon1, target),
      weapon2rank := weapon_rank(critter, weapon2, target);
   
   debug_log_fmt("%s's bestweapon against %s: %s (%d) vs %s (%d)", obj_name_safe(critter), obj_name_safe(target), obj_name_safe(weapon1), weapon1rank, obj_name_safe(weapon2), weapon2rank);
   set_sfall_return(weapon1 if weapon1rank > weapon2rank else weapon2);
end

#define INI_FILE     INI_COMBAT
#define INI_SECTION  "AI"

procedure load_called_shot_settings begin
   load_int_list_from_ini(called_int_req);
   load_num_from_ini(called_freq_mult, 1.0, 0.0, 10.0);
   
   // Default INT requirements.
   variable len := len_array(ini_called_int_req);
   if (len < DIFFICULTY_HARD + 1) then begin
      resize_array(ini_called_int_req, DIFFICULTY_HARD + 1);
      ini_called_int_req[DIFFICULTY_HARD] := 3;
   end
   if (len < 2) then ini_called_int_req[DIFFICULTY_NORMAL] := 5;
   if (len < 1) then ini_called_int_req[DIFFICULTY_EASY] := 7;
   
   debug_log_fmt("Called Shot tweaks enabled. called_freq mult: %.2f, INT req: %s", ini_called_freq_mult, debug_array_str(ini_called_int_req));
end

procedure start begin
   if not game_loaded then return;
   if (get_ini_value_def(INI_FILE, INI_SECTION, "called_tweaks", 0)) then begin
      call load_called_shot_settings;
      register_hook_proc(HOOK_TOHIT, tohit_handler);
      register_hook_proc(HOOK_COMBATTURN, combatturn_handler);
   end

   if (get_ini_value_def(INI_FILE, INI_SECTION, "bestweapon_tweaks", 0)) then begin
      load_num_from_ini_unclamped(bestweapon_ref_armor_pid, 0);
      register_hook_proc(HOOK_BESTWEAPON, bestweapon_handler);
   end
end
