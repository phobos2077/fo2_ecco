procedure start;
procedure keypress_hook;
procedure useobj_hook;
procedure movecost_hook;
procedure deathanim2_hook;

/**

	Global script for traps system.
	Should be of type 0 (local map) and repeated at least 5 times in second.

	This is the "main" script for traps system, functions:
	1) (not anymore) Exports all traps-related variables and procedures for other scripts.
	2) Loads INI variables.
	3) Implements triggering traps in real-time (start proc) and turn-based (movecost_hook proc).
	4) Implements hotkey to place trap.

	Other scripts for traps:
	test2.int            - skill-based interactions with assembled traps on the ground
	hs_deathanim2.int    - fixes death animation for trap kills (doesn't include traps.h)

	@author phobos2077

*/

#include "../sfall/sfall.h"
#include "../sfall/define_lite.h"
#include "../sfall/lib.misc.h"

#define _TRAPS_EXPORT
#include "../_pbs_headers/traps.h"
#undef _TRAPS_EXPORT

#define INI_SECTION 			"TRAPS"

variable angry_set;
//variable ar_explosions;

variable attack_delay := -1;
variable ini_assemble_hotkey;

procedure start begin
	variable arr, savedArrays, ini_remove_numeric_arrays;
	variable i, k, v;

	variable list;
	variable list2;
	variable obj;
	variable closest_crit;
	variable item;
	variable flag;
	variable n:=0;
	variable len;

	variable key1;

  if game_loaded then begin
  	//display_msg("traps init yo "+cur_map_index);
	set_global_script_type(0);
	set_global_script_repeat(50);

	// init variables
	call traps_common_init;

  	// exported settings
	pbs_ini_trap_reveals_dude := get_int_from_ini(INI_COMBAT, INI_SECTION, "trap_reveals_dude");
	pbs_ini_trap_friendfoe := get_int_from_ini(INI_COMBAT, INI_SECTION, "trap_friendfoe");
	pbs_ini_trap_is_crime := get_int_from_ini(INI_COMBAT, INI_SECTION, "trap_is_crime");
	ini_assemble_hotkey := parse_hotkey(get_str_from_ini(INI_COMBAT, INI_SECTION, "assemble_hotkey"));

	// migrate from old saves - nonzero value of this global indicates save from pre-3.4 sfall era
	// TODO: probably don't need this anymore..
	if (get_sfall_global_int(SGVAR_TRAPS_BY_DUDE_LOCAL) != 0) then begin
	   display_msg("Migrating traps data to new format...");
   	foreach (k: v in ({SGVAR_TRAPS_BY_DUDE: ARR_TRAPS, SGVAR_TRAPS_BY_DUDE_LOCAL: -1, SGVAR_ANGRY_TEAMS: ARR_ANGRY_TEAMS, SGVAR_TRAPS_LAST_MAP: -1})) begin
      	arr := get_sfall_global_int(k);
      	if (arr and v != -1) then
      	   save_array(v, arr); // save
      	set_sfall_global(k, 0); // clear sfall global
   	end
	end

	// initialize global and exported arrays
  	angry_set := load_create_array(ARR_ANGRY_TEAMS, 0);
  	pbs_local_traps := create_array_list(0);
  	pbs_trap_victims := create_array_map;

  	register_hook_proc(HOOK_KEYPRESS, keypress_hook);
  	register_hook_proc(HOOK_USEOBJ, useobj_hook);
  	register_hook_proc(HOOK_MOVECOST, movecost_hook);
	register_hook_proc(HOOK_DEATHANIM2, deathanim2_hook);

  end else begin

	// check for angry people
	if (len_array(angry_set) > 0) then begin
		if (attack_delay == -1) then begin
			attack_delay := get_uptime + 1500;
		end else if (get_uptime > attack_delay) then begin
			debug_msg("angry: " + angry_set[0]);
			foreach n in angry_set begin
				closest_crit := 0;
				len := 999999;
				if (n) then begin
					foreach (obj in list_as_array(LIST_CRITTERS)) if obj then begin
						if (obj != dude_obj and not(is_critter_dead(obj)) and has_trait(TRAIT_OBJECT, obj, OBJECT_TEAM_NUM) == n and tile_distance_objs(obj, dude_obj) < len) then begin
							closest_crit := obj;
							len := tile_distance_objs(obj, dude_obj);
						end
					end
				end
				if (closest_crit) then begin
					attack_setup(closest_crit, dude_obj);
				end
			end
			resize_array(angry_set, 0);
			attack_delay := -1;
		end
	end

	// traps setoff, realtime
	if (not(combat_is_initialized)) then begin
   	arr := get_traps_for_map();
   	if (len_array(arr) > 0) then begin
   		foreach (obj in list_as_array(LIST_CRITTERS)) if (obj) then begin
   			call check_setoff_traps(obj, arr);
   		end
   	end
	end

  end
end


procedure keypress_hook begin
   variable pressed := get_sfall_arg,
            key := get_sfall_arg;
   if (pressed and not(get_game_mode bwand bwnot(COMBAT + PCOMBAT))) then if (hotkey_pressed_now(ini_assemble_hotkey, key)) then begin
      variable item;
      item := critter_inven_obj(dude_obj, 2 - active_hand);
      if (item) then if (is_trap_kit_pid(obj_pid(item))) then begin
         if (try_assemble_trap(dude_obj, item) == true) then begin
            variable pid, tmp, n, obj;
            pid := obj_pid(item);
            // manually remove item and replace it with another from inventory
            inven_unwield(dude_obj);
            rm_obj_from_inven(dude_obj, item);
            destroy_object(item);
            obj := obj_carrying_pid_obj(dude_obj, pid);
            if (obj) then begin
               n := obj_is_carrying_obj_pid(dude_obj, pid);
               if (n > 1) then begin
                  // "split" one object from the stack
                  tmp := rm_mult_objs_from_inven(dude_obj, obj, 1);
                  tmp := get_weapon_ammo_count(obj);
                  set_weapon_ammo_count(obj, -1); // this way the following command should not "merge" this object back into existing stack
                  add_obj_to_inven(dude_obj, obj);
                  set_weapon_ammo_count(obj, tmp); // change charges back, but the item will remain in separate stack
               end
               wield_obj_critter(dude_obj, obj);
            end
         end
      end
	end
end


procedure useobj_hook begin
   variable critter, item;
   critter := get_sfall_arg;
   item := get_sfall_arg;

   // traps assembly
   if (item and critter) then if (critter == dude_obj and is_trap_kit_pid(obj_pid(item))) then begin
      if (try_assemble_trap(critter, item) == true) then
         set_sfall_return(1);
   end
end

/*
Runs when calculating the AP cost of movement.

Critter arg0 - the critter doing the moving
int     arg1 - the number of hexes being moved
int     arg2 - the original AP cost

int     ret0 - the new AP cost
*/
procedure movecost_hook begin
   variable
      critter := get_sfall_arg,
		hexes := get_sfall_arg,
		cost := get_sfall_arg;

	//debug_msg(proto_data(obj_pid(critter), cr_name)+" move_by "+hexes+"cost"+cost);
	// traps setoff, turn-based
	call check_setoff_traps(critter, 0);
end

procedure deathanim2_hook begin
   variable weaponPID, attacker, target, damage, animID, rotToAttacker, targetRot;
   variable wpn, kt;

   weaponPID := get_sfall_arg;
   attacker := get_sfall_arg;
   target := get_sfall_arg;
   damage := get_sfall_arg;
   animID := get_sfall_arg;

   //debug_msg("deathanim2: wpn: "+weaponPID+", att: "+sprintf("%X",obj_art_fid(attacker))+", targ: "+target+", dam: "+damage+", anim: "+animID+", calling_critter_dmg_trap: "+calling_critter_dmg_trap);

   // Override death animation when critter_dmg function is used from a trp
   if (obj_art_fid(attacker) == 0x20001F5 and calling_critter_dmg_trap and animID == ANIM_chunks_of_flesh) then begin
      set_sfall_return(ANIM_fall_front);
		set_sfall_arg(4, ANIM_fall_front);
      return;
   end
end


procedure map_enter_p_proc begin
	//display_msg("cur map = "+cur_map_index);
   clear_array(pbs_trap_victims);
end