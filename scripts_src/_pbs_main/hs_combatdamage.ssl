#include "../_pbs_headers/ecco.h"

/**
	Runs whenever the target takes damage in combat. Does not run for misses, or on extra targets when bursting.
	
	critter arg1 - The target
	critter arg2 - The attacker
	int     arg3 - The amount of damage to the target
	int     arg4 - The amount of damage to the attacker
	int     arg5 - The special effect flags for the target
	int     arg6 - The special effect flags for the attacker
	int     arg7 - The weapon used in the attack
	int     arg8 - The bodypart that was struck
	
	int     ret1 - The damage to the target
	int     ret1 - The damage to the attacker
	int     ret1 - The special effect flags for the target
	int     ret1 - The special effect flags for the attacker
*/

procedure start begin
   variable target;
   variable attacker;
   variable target_damage;
   variable attacker_damage;
   variable target_flags;
   variable attacker_flags;
   variable weapon;
   variable body_part;
   
   variable skill;
   
   variable weaponPid;
   //variable tmp;
   
   if (init_hook) then begin

   end else
   begin
      target := get_sfall_arg;
      attacker := get_sfall_arg;
      target_damage := get_sfall_arg;
      attacker_damage := get_sfall_arg;
      target_flags := get_sfall_arg;
      attacker_flags := get_sfall_arg;
      weapon := get_sfall_arg;
      body_part := get_sfall_arg;
      
      // TODO: move weapon stuff to separate script
      if (target and attacker) then begin
         if (obj_type(target) == OBJ_TYPE_CRITTER) then begin
            if (weapon) then weaponPid := obj_pid(weapon);
            //debug_msg("combatdamage: "+target+" (type:"+obj_type(target)+"), wpn: "+weaponPid+", flags: "+target_flags+", part: "+body_part);

            if (weaponPid == PID_PBS_TASER) then begin
               if ((is_human(target) or is_animal(target)) and get_critter_stat(target, STAT_dmg_thresh_electrical) < 10) then begin
                  target_flags := target_flags bwor DAM_LOSE_TURN;
                  if (random(0,99) < (110 - 10*get_critter_stat(target, STAT_en))) then begin
                     target_flags := target_flags bwor DAM_CRITICAL bwor DAM_KNOCKED_DOWN;
                  end
               end
            end
         end
      end
      
      set_sfall_return(target_damage);
      set_sfall_return(attacker_damage);
      set_sfall_return(target_flags);
      set_sfall_return(attacker_flags);
   end
end


