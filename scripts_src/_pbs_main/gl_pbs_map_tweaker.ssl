/*
   Map Object Tweaker

   Allows to run commands at specific tiles to adjust objects on the map:
   - Add/remove object to/from critter/container/ground.
   - Wield weapons.
   - Change object script.
*/

#define SCRIPT_REALNAME       "pbs_map_tweaker"

#include "../sfall/sfall.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.inven.h"
#include "../sfall/define_lite.h"
#include "../_pbs_headers/ecco_log.h"

variable
   config,
   command_stats;

#define CUR_MAP_CONFIG  config[""+cur_map_index]

#define OBJ_IS_FLAT(obj)   (get_flags(obj) bwand FLAG_FLAT)

#define format_cmd_log(msg, tile)   (tile + ": " + msg)
#define debug_log_cmd(msg, tile)		debug_log(format_cmd_log(msg, tile))
#define debug_err_cmd(msg, tile)		debug_err(format_cmd_log(msg, tile))

procedure find_main_object_at(variable tileNum, variable elev) begin
   variable obj, objs := tile_get_objs(tileNum, elev);
   foreach (obj in objs) begin
      if ((obj_type(obj) == OBJ_TYPE_CRITTER) or 
         (obj_type(obj) == OBJ_TYPE_ITEM and obj_item_subtype(obj) == item_type_container and not OBJ_IS_FLAT(obj)) or
         (obj_type(obj) == OBJ_TYPE_SCENERY and not OBJ_IS_FLAT(obj))) then
         return obj;
   end
   return 0;
end

procedure create_loot_object(variable pid, variable tileNum, variable elev, variable ammo, variable ammoPid) begin
   variable obj := create_object_sid(pid, tileNum, elev, -1);
   if (obj_type(obj) == OBJ_TYPE_ITEM) then begin
      if (ammo >= 0) then
         set_weapon_ammo_count(obj, ammo);
      if (ammoPid > 0) then
         set_weapon_ammo_pid(obj, ammoPid);
   end
   return obj;
end

#define arg_or_default(i, def)     (atoi(args[i]) if (len_array(args) > i) else def)
#define is_inven_object(obj)       (obj_type(obj) == OBJ_TYPE_CRITTER or (obj_type(obj) == OBJ_TYPE_ITEM and obj_item_subtype(obj) == item_type_container))
#define loot_target_name(useInven, tileObj)  (obj_name(tileObj) if useInven else "ground")

procedure command_add(variable tileNum, variable elev, variable tileObj, variable args) begin
   variable
      pid := arg_or_default(0, 0),
      count := arg_or_default(1, 1),
      ammo := arg_or_default(2, -1),
      ammoPid := arg_or_default(3, -1);

   if (not pid) then begin
      debug_err_cmd("a: invalid pid", tileNum);
      return;
   end
   variable i,
      obj := create_loot_object(pid, tileNum, elev, ammo, ammoPid),
      useInven := is_inven_object(tileObj);
   if (useInven) then begin
      add_mult_objs_to_inven(tileObj, obj, count);
   end else begin
      for (i := 1; i < count; i++) begin
         call create_loot_object(pid, tileNum, elev, ammo, ammoPid);
      end
   end
   debug_log_cmd(string_format3("added %s(%d) to %s", obj_name(obj), count, loot_target_name(useInven, tileObj)), tileNum);
end

procedure command_remove(variable tileNum, variable elev, variable tileObj, variable args) begin
   variable
      pid := arg_or_default(0, 0),
      count := arg_or_default(1, 1),
      numRemoved;

   if (not pid) then begin
      debug_err_cmd("r: invalid pid", tileNum);
      return;
   end
   variable useInven := is_inven_object(tileObj);
   if (useInven) then begin
      // Remove from inventory.
      numRemoved := remove_items_pid(tileObj, pid, count);
   end else begin
      // Remove from ground (this can delete any object, not just item!).
      if (tileObj and obj_pid(tileObj) == pid) then begin
         destroy_object(tileObj);
         numRemoved++;
      end
      if (numRemoved < count) then begin
         variable obj, objs := tile_get_objs(tileNum, elev);
         foreach (obj in objs) begin
            if (obj_pid(obj) == pid) then begin
               destroy_object(obj);
               numRemoved++;
               if (numRemoved == count) then
                  break;
            end
         end
      end
   end
   debug_log_cmd(string_format3("removed %s(%d) from %s", proto_data(pid, it_name), numRemoved, loot_target_name(useInven, tileObj)), tileNum);
end

procedure command_wield(variable tileNum, variable elev, variable tileObj, variable args) begin
   variable
      pid := arg_or_default(0, 0),
      inactiveFlag := arg_or_default(1, 0);

   if (not pid) then begin
      debug_err_cmd("w: invalid pid", tileNum);
      return;
   end
   if (not tileObj or obj_type(tileObj) != OBJ_TYPE_CRITTER) then begin
      debug_err_cmd("w: no critter found!", tileNum);
      return;
   end
   variable item := obj_carrying_pid_obj(tileObj, pid);
   if (not item) then begin
      debug_err_cmd("w: item not found by pid: "+pid, tileNum);
      return;
   end
   if (inactiveFlag and obj_item_subtype(item) != item_type_armor) then begin
      variable inactiveItem := critter_inven_obj(tileObj, INVEN_TYPE_LEFT_HAND);
      if (inactiveItem) then begin
         set_flags(item, get_flags(item) bwand (bwnot FLAG_LEFT_HAND));
      end
      set_flags(item, get_flags(item) bwor FLAG_LEFT_HAND);
      // If critter had item in inactive slot, and active slot is free then put this item to active slot
      if (inactiveItem and not critter_inven_obj(tileObj, INVEN_TYPE_RIGHT_HAND)) then begin
         wield_obj_critter(tileObj, inactiveItem);
      end
      debug_log_cmd(obj_name(tileObj) + " puts " + obj_name(item) + " in off hand", tileNum);
   end else begin
      variable activeItem := critter_inven_obj(tileObj, INVEN_TYPE_RIGHT_HAND);
      wield_obj_critter(tileObj, item);
      // If critter had item in active slot and inactive slot is empty, put this item to inactive slot.
      if (activeItem and not critter_inven_obj(tileObj, INVEN_TYPE_LEFT_HAND)) then begin
         set_flags(activeItem, get_flags(activeItem) bwor FLAG_LEFT_HAND);
      end
      debug_log_cmd(obj_name(tileObj) + " wields " + obj_name(item), tileNum);
   end
end

procedure command_script(variable tileNum, variable elev, variable tileObj, variable args) begin
   variable
      sid := arg_or_default(0, 0),
      radius := arg_or_default(1, -1);

   if (sid < 0) then begin
      debug_err_cmd("s: invalid sid", tileNum);
      return;
   end
   if (tileObj) then begin
      // Set/remove script on object.
      if (radius >= 0) then begin
         debug_err_cmd("s: radius set but tile has object", tileNum);
         return;
      end
      if (sid > 0) then
         set_script(tileObj, sid);
      else
         remove_script(tileObj);

      debug_log_cmd("set " + obj_name(tileObj) + " script to " + sid, tileNum);
   end else begin
      if (radius < 0) then begin
         debug_err_cmd("s: no object to change script", tileNum);
         return;
      end
      if (sid > 0) then begin
         create_spatial(sid, tileNum, elev, radius);
         debug_log_cmd("created spatial script " + sid, tileNum);
      end else begin
         debug_err_cmd("s: removing spatials not supported", tileNum);
      end
   end
end

procedure command_lock(variable tileNum, variable elev, variable tileObj, variable args) begin
   if (not tileObj) then begin
      debug_err_cmd("l: no object found", tileNum);
      return;
   end
   obj_lock(tileObj);
   debug_log_cmd(sprintf("locked %s", obj_name(tileObj)), tileNum);
end

procedure get_command_handler(variable cmd) begin
   switch (cmd) begin
      case "a":
         return @command_add;
      case "r":
         return @command_remove;
      case "w":
         return @command_wield;
      case "s":
         return @command_script;
      case "l":
         return @command_lock;
      default:
         return 0;
   end
end

procedure execute_command(variable cmdStr, variable tileNum, variable elev) begin
   /* TODO: multi-character commands?
   variable i := 0, chr;
   chr := charcode(cmdStr[i]);
   while (chr > 'a' and chr < 'z') do begin
      i += 1;
      chr := charcode(cmdStr[i]);
   end*/
   variable
      cmd := cmdStr[0],
      argStr := substr(cmdStr, 1, 0),
      args := string_split(argStr, ":") if (strlen(argStr) > 0) else [],
      handler := get_command_handler(cmd);

   if (not handler) then begin
      debug_err_cmd("unknown command: "+cmd, tileNum);
   end
   variable tileObj := find_main_object_at(tileNum, elev);
   call handler(tileNum, elev, tileObj, args);
end

procedure apply_tweaks_for_elev(variable elev) begin
   variable sectKey := cur_map_index + "_" + elev;
   variable mapElevConfig := config[sectKey];
   if (not mapElevConfig) then return;

   debug_log("Running commands for elev "+elev);
   variable k, tileNum, cmds, cmd, tileObj;
   foreach (k: cmds in mapElevConfig) begin
      tileNum := atoi(k);
      if (tileNum <= 0) then begin
         debug_err_fmt("%s.%s : invalid tile num", sectKey, k);
         continue;
      end
      cmds := string_split(cmds, ",");
      foreach (cmd in cmds) begin
         call execute_command(cmd, tileNum, elev);
      end
   end
end

procedure apply_tweaks_for_current_map begin
   variable elev;
   for (elev := 0; elev <= 2; elev++) begin
      call apply_tweaks_for_elev(elev);
   end
end

#define is_cfg_true(x)      (x andAlso atoi(x))

procedure start begin
   config := get_ini_config_db("config\\pbs_map_tweaks.ini");
   debug_log("Loaded "+len_array(config)+" sections.");

   // For development
   if (is_cfg_true(config.debug.run_on_load) and cur_town != -1) then begin
      display_msg("DEBUG: running map tweaks");
      call apply_tweaks_for_elev(elevation(dude_obj));
   end
end

// Main logic goes here
procedure map_enter_p_proc begin
   //debug_log("cur_town = "+cur_town+", is_loading = "+is_loading_game+", map_first_run = "+map_first_run);
   if (cur_town == -1 or is_loading_game or not map_first_run) then return;

   call apply_tweaks_for_current_map;
end
