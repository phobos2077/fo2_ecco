procedure start;
procedure keypress_hook;
procedure useobj_hook;
procedure movecost_hook;
procedure ondeath_hook;
procedure deathanim2_hook;
procedure description_hook;
procedure combatturn_hook;
//procedure useskill_hook;

/**

	Global script for traps system.
	Should be of type 0 (local map) and repeated at least 5 times in second.

	This is the "main" script for traps system, functions:
	1) (not anymore) Exports all traps-related variables and procedures for other scripts.
	2) Loads INI variables.
	3) Implements triggering traps in real-time (start proc) and turn-based (movecost_hook proc).
	4) Implements hotkey to place trap.

	Other scripts for traps:
	test2.int            - skill-based interactions with assembled traps on the ground
	hs_deathanim2.int    - fixes death animation for trap kills (doesn't include traps.h)

	@author phobos2077

*/

#include "../sfall/sfall.h"
#include "../sfall/define_lite.h"
#include "../sfall/lib.strings.h"
#include "../sfall/lib.misc.h"

#define SCRIPT_REALNAME		"gl_pbs_traps"

#define _TRAPS_EXPORT
#include "../_pbs_headers/traps.h"
#undef _TRAPS_EXPORT

variable angry_set;
//variable ar_explosions;

variable attack_delay := -1;
variable assemble_hotkey;
variable last_hold_reset_time := -1;

#define cfg_parse_int(cfg, ini, name)            if (ini.name) then cfg.name := atoi(ini.name)
#define cfg_parse_int_def(cfg, ini, name, def)   cfg.name := atoi(ini.name) if ini.name else def
#define cfg_parse_intlist(cfg, ini, name)        if (ini.name) then cfg.name := array_fixed(string_split_ints(ini.name, ","))
#define cfg_parse_hotkey(cfg, ini, name)         if (ini.name) then cfg.name := parse_hotkey(ini.name)

procedure load_traps_config begin
   variable
      ini := get_ini_config_db("config\\traps.ini"),
      iniMain := ini["Main"],
      cfg := create_array_map;
   
   cfg_parse_hotkey(cfg, iniMain, assemble_hotkey);
   cfg_parse_int_def(cfg, iniMain, friendfoe, 1);
   cfg_parse_int_def(cfg, iniMain, arming_is_crime, 0);
   cfg_parse_int_def(cfg, iniMain, reveal_dude, 0);
   cfg_parse_intlist(cfg, iniMain, temp_followers_sids);

   //cfg.armament_skill := array_fixed(array_transform_kv(ini["Armament_Skill"], @string_to_int, @string_to_int));
   cfg.ground_skill := array_fixed(array_transform(ini["Ground_Skill"], @string_to_int));
   cfg.types := create_array_map;
   cfg.item_to_type := create_array_map;
   cfg.pid_to_type := create_array_map;
   cfg.armaments := create_array_map;

   variable sectName, section;
   variable trapPrefix := "Trap_", armamentPrefix := "Armament_";
   foreach (sectName: section in ini) begin
      if (string_starts_with(sectName, trapPrefix)) then begin
         variable
            type := atoi(substr(sectName, strlen(trapPrefix), 0)),
            typeCfg := create_array_map;

         cfg_parse_int(typeCfg, section, item_pid);
         cfg_parse_int(typeCfg, section, trap_pid);
         cfg_parse_int(typeCfg, section, radius);
         cfg_parse_int(typeCfg, section, stop);
         cfg_parse_int(typeCfg, section, dmg_min);
         cfg_parse_int(typeCfg, section, dmg_max);
         cfg_parse_int(typeCfg, section, skill_mod);
         cfg_parse_intlist(typeCfg, section, armaments);
         cfg.types[type] := typeCfg;
         if (typeCfg.item_pid) then cfg.item_to_type[typeCfg.item_pid] := type;
         if (typeCfg.trap_pid) then cfg.pid_to_type[typeCfg.trap_pid] := type;
      end else if (string_starts_with(sectName, armamentPrefix)) then begin
         variable armPid := atoi(substr(sectName, strlen(armamentPrefix), 0));
         if (armPid > 0) then begin
            variable armCfg := create_array_map;
            cfg_parse_int(armCfg, section, skill_mod);
            cfg_parse_int_def(armCfg, section, radius, -1);
            cfg_parse_int(armCfg, section, dmg_min);
            cfg_parse_int(armCfg, section, dmg_max);
            cfg_parse_int_def(armCfg, section, dmg_type, -1); // differentiate 0 (DMG_normal_dam) from no value
            // audio_sfx
            cfg.armaments[armPid] := armCfg;
         end
      end
   end
   return cfg;
end

/*procedure roll_test(variable rollMod, variable critChance, variable successOffset, variable successMult, variable failMult) begin
	variable stats := temp_array(4, 0);
	variable i, delta, roll;
	for (i := 0; i < 10000; i++) begin
		delta := rollMod - random(1, 100);
		if (delta < 0) then begin
			roll := ROLL_CRITICAL_FAILURE if (random(1, 100) <= -delta*failMult) else ROLL_FAILURE;
		end else begin
			roll := ROLL_CRITICAL_SUCCESS if (random(1, 100) <= math_max(delta + successOffset, 0)*successMult + critChance) else ROLL_SUCCESS;
		end
		stats[roll] += 1;
	end
	debug_log("Roll stats: "+debug_array_str(stats));
end*/

procedure dec_trap_hold_critter(variable critter) begin
   variable hold := pbs_trap_hold_critters[critter];
   if (not hold) then return;

   variable v := hold[0] - 1;
   if (v > 0) then hold[0] := v;
   else begin
      unset_array(pbs_trap_hold_critters, critter);
   end
end

procedure check_angry_critters begin
   if (len_array(angry_set) == 0) then return;

   if (attack_delay == -1) then begin
      attack_delay := get_uptime + 1500;
      return;
   end
   if (get_uptime < attack_delay) then return;

   debug_log("angry: " + angry_set[0]);
   variable n, closestCrit, obj, len;
   foreach n in angry_set begin
      closestCrit := 0;
      len := 999999;
      if (n) then begin
         foreach (obj in list_as_array(LIST_CRITTERS)) if obj then begin
            if (obj != dude_obj and not(is_critter_dead(obj)) and has_trait(TRAIT_OBJECT, obj, OBJECT_TEAM_NUM) == n and tile_distance_objs(obj, dude_obj) < len) then begin
               closestCrit := obj;
               len := tile_distance_objs(obj, dude_obj);
            end
         end
      end
      if (closestCrit) then begin
         attack_setup(closestCrit, dude_obj);
      end
   end
   resize_array(angry_set, 0);
   attack_delay := -1;
end

procedure hold_critters_realtime begin
   if combat_is_initialized then return;

   variable k, v;
   foreach (k: v in pbs_trap_hold_critters) begin
      if (anim_busy(k)) then begin
         reg_anim_clear(k);
         move_to(k, v[1], elevation(k));
      end
   end
   if (game_time > last_hold_reset_time + 5 * 10) then begin
      last_hold_reset_time = game_time;
      if (len_array(pbs_trap_hold_critters) > 0) then begin
         foreach (k: v in pbs_trap_hold_critters) begin
            call dec_trap_hold_critter(k);
         end
         debug_log("Decremented critter hold: "+debug_array_str_deep(pbs_trap_hold_critters, 2));
      end
   end
end

procedure start begin
   variable arr;
   variable i, k, v;
   variable obj, closestCrit;
   variable flag;
   variable n:=0;
   variable len;

   if game_loaded then begin
      //display_msg("traps init yo "+cur_map_index);
      set_global_script_type(0);
      set_global_script_repeat(50);

      //call roll_test(100, 5, -50, 5, 0.2);

      pbs_trap_config := load_traps_config;
      
      assemble_hotkey := pbs_trap_config.assemble_hotkey;

      debug_log_fmt("Loaded config with %d trap types, %d armaments, %d ground types.",
         len_array(pbs_trap_config.types), len_array(pbs_trap_config.armaments), len_array(pbs_trap_config.ground_skill));
      //debug_log(debug_array_str(pbs_trap_config));
      //debug_log("types: "+debug_array_str_deep(pbs_trap_config.types, 2));
      //debug_log("armaments: "+debug_array_str_deep(pbs_trap_config.armaments, 2));
      //debug_log("ground: "+debug_array_str(pbs_trap_config.ground_skill));

      // initialize global and exported arrays
      angry_set := load_create_array(ARR_ANGRY_TEAMS, 0);
      pbs_trap_victims := create_array_map;
      pbs_trap_hold_critters := create_array_map;

      register_hook_proc(HOOK_DESCRIPTIONOBJ, description_hook);
      register_hook_proc(HOOK_KEYPRESS, keypress_hook);
      register_hook_proc(HOOK_USEOBJ, useobj_hook);
      register_hook_proc(HOOK_MOVECOST, movecost_hook);
      register_hook_proc(HOOK_ONDEATH, ondeath_hook);
      register_hook_proc(HOOK_DEATHANIM2, deathanim2_hook);
      register_hook_proc(HOOK_COMBATTURN, combatturn_hook);
      //register_hook_proc(HOOK_USESKILLON, useskill_hook);

  end else begin
      call check_angry_critters;
      call hold_critters_realtime;
   end
end


procedure map_enter_p_proc begin
   clear_array(pbs_trap_victims);
   clear_array(pbs_trap_hold_critters);
end


procedure keypress_hook begin
   variable pressed := get_sfall_arg,
            key := get_sfall_arg;
   if (pressed and not(get_game_mode bwand bwnot(COMBAT + PCOMBAT))) then if (hotkey_pressed_now(assemble_hotkey, key)) then begin
      variable item;
      item := critter_inven_obj(dude_obj, 2 - active_hand);
      if (item) then if (is_trap_kit_pid(obj_pid(item))) then begin
         if (try_assemble_trap(dude_obj, item)) then begin
            variable pid, tmp, n, obj;
            pid := obj_pid(item);
            // manually remove item and replace it with another from inventory
            inven_unwield(dude_obj);
            rm_obj_from_inven(dude_obj, item);
            destroy_object(item);
            obj := obj_carrying_pid_obj(dude_obj, pid);
            if (obj) then begin
               n := obj_is_carrying_obj_pid(dude_obj, pid);
               if (n > 1) then begin
                  // "split" one object from the stack
                  tmp := rm_mult_objs_from_inven(dude_obj, obj, 1);
                  tmp := get_weapon_ammo_count(obj);
                  set_weapon_ammo_count(obj, -1); // this way the following command should not "merge" this object back into existing stack
                  add_obj_to_inven(dude_obj, obj);
                  set_weapon_ammo_count(obj, tmp); // change charges back, but the item will remain in separate stack
               end
               wield_obj_critter(dude_obj, obj);
            end
         end
      end
	end
	/*if (pressed and key == 20) then begin
		variable rf := get_tile_roof_fid(tile_under_cursor, dude_elevation);
		variable gr := get_tile_ground_fid(tile_under_cursor, dude_elevation);
		variable what;
		     if (tile_fid_is_stone(gr)) then what := "stone";
		else if (tile_fid_is_dirt(gr)) then what := "dirt";
		else if (tile_fid_is_grass(gr)) then what := "grass";
		else if (tile_fid_is_wood(gr)) then what := "wood";
		else if (tile_fid_is_cloth_on_dirt(gr)) then what := "cloth_on_dirt";
		else if (tile_fid_is_slime(gr)) then what := "slime";
		else if (tile_fid_is_metal(gr)) then what := "metal";
		else what := "other";
		display_msg(sprintf_array("Ground = %x, Roof = %x, Ground Type = %s", [gr, rf, what]));
	end
	*/
end


procedure useobj_hook begin
   variable critter, item;
   critter := get_sfall_arg;
   item := get_sfall_arg;

   // traps assembly
   if (item and critter) then if (critter == dude_obj and is_trap_kit_pid(obj_pid(item))) then begin
      if (try_assemble_trap(critter, item)) then
         set_sfall_return(1);
   end
end

/*
Runs when calculating the AP cost of movement.

Critter arg0 - the critter doing the moving
int     arg1 - the number of hexes being moved
int     arg2 - the original AP cost

int     ret0 - the new AP cost
*/
procedure movecost_hook begin
   variable
      critter := get_sfall_arg,
		hexes := get_sfall_arg,
		cost := get_sfall_arg;
	//debug_msg(proto_data(obj_pid(critter), cr_name)+" move_by "+hexes+"cost"+cost);

	// Holding critters in place.
   variable hold := pbs_trap_hold_critters[critter]; 
	if hold then begin
      debug_log_fmt("Attemp to prevent critter %d from moving.", critter);
		set_sfall_return(999); // you're not going anywhere, pal..
      set_sfall_arg(2, 999);
      move_to(critter, hold[1], elevation(critter));
   end
end

// TODO: use or remove
procedure ondeath_hook begin
	variable critter := get_sfall_arg;
	debug_log_fmt("ondeath: %d, lastTarget: %d", critter, pbs_trap_last_target);

	if (critter and critter == pbs_trap_last_target) then begin
		pbs_trap_last_target_dead := true;
	end
end

procedure deathanim2_hook begin
   variable weaponPID, attacker, target, damage, animID, rotToAttacker, targetRot;
   variable wpn, kt;

   weaponPID := get_sfall_arg;
   attacker := get_sfall_arg;
   target := get_sfall_arg;
   damage := get_sfall_arg;
   animID := get_sfall_arg;

   debug_msg("deathanim2: wpn: "+weaponPID+", att: "+sprintf("%X",obj_art_fid(attacker))+", targ: "+target+", dam: "+damage+", anim: "+animID+", pbs_trap_last_target: "+pbs_trap_last_target);

   // Override death animation when critter_dmg function is used from a trap
   if (obj_art_fid(attacker) == 0x20001F5 and pbs_trap_last_target == target and animID == ANIM_chunks_of_flesh) then begin
		pbs_trap_last_target_dead := true;
      set_sfall_return(ANIM_fall_front);
		set_sfall_arg(4, ANIM_fall_front);
      return;
   end
end

procedure description_hook begin
	variable item := get_sfall_arg;
	if (not item or not is_trap_kit_pid(obj_pid(item))) then return;

	variable
		pid := obj_pid(item),
		maxUses := get_proto_data(pid, PROTO_MI_CHARGES);
	
	if (maxUses < 2) then return;

	variable 
		uses := get_weapon_ammo_count(item),
		desc = proto_data(obj_pid(item), it_description) + string_format2(traps_mstr(2010), uses, maxUses);

	set_sfall_return(desc);
end


/*
Runs before and after each turn in combat (for both PC and NPC).

int     arg0 - event type:
               1 - start of turn
               0 - normal end of turn
              -1 - combat ends abruptly (by script or by pressing Enter during PC turn)
              -2 - combat ends normally (hook always runs at the end of combat)
Critter arg1 - critter doing the turn
bool    arg2 - 1 at the start/end of the player's turn after loading a game saved in combat mode, 0 otherwise

int     ret0 - pass 1 at the start of turn to skip the turn, pass -1 at the end of turn to force end of combat
*/
procedure combatturn_hook begin
   variable
      eventType := get_sfall_arg,
      critter := get_sfall_arg;
   if eventType == 1 and pbs_trap_hold_critters[critter] then begin
      call dec_trap_hold_critter(critter);
      debug_log("Decremented critter hold: "+debug_array_str_deep(pbs_trap_hold_critters, 2));
   end
end

// TODO: allow traps in combat? new perk?
/* THIS WORKS:
procedure useskill_hook begin
   variable
      user := get_sfall_arg,
      target := get_sfall_arg,
      skill := get_sfall_arg;

   if (user == dude_obj and target and skill == SKILL_TRAPS and get_script(target) == SCRIPT_PBS_TRAPS) then begin
      set_sfall_return(0); // skip first return
      set_sfall_return(1); // allow skill in combat
   end
end
*/
