/*
   Scripting support for various custom weapon features.
*/

#include "../sfall/command_lite.h"
#include "../headers/animcomd.h"
#include "../headers/itempid.h"
#include "../_pbs_headers/ecco.h"
#include "../_pbs_headers/miscpid.h"

#define INI_DAMAGE_TYPE_SECTION   "DAMAGE_TYPE"


// These are used in custom door script.
export variable pbs_last_burst_size;
export variable pbs_last_hit_roll_result;

variable 
   ini_damage_types;

procedure start;
procedure afterhitroll_handler;
procedure ammocost_handler;
procedure combatdamage_handler;
procedure deathanim2_handler;
procedure itemdamage_handler;
procedure load_damage_types_from_ini;
procedure get_weapon_damage_type_override(variable weapon);

procedure start begin
   if game_loaded then begin
      call load_damage_types_from_ini;

      //register_hook_proc(HOOK_AFTERHITROLL, afterhitroll_handler);
      register_hook_proc(HOOK_AMMOCOST, ammocost_handler);
      register_hook_proc(HOOK_COMBATDAMAGE, combatdamage_handler);
      register_hook_proc(HOOK_DEATHANIM2, deathanim2_handler);
      register_hook_proc(HOOK_ITEMDAMAGE, itemdamage_handler);
   end
end


procedure load_damage_types_from_ini begin
   variable section, k, v, pid, dmgType;
   ini_damage_types = create_array_map;
   section = get_ini_section(INI_COMBAT, INI_DAMAGE_TYPE_SECTION);
   foreach (k: v in section) begin
      pid := atoi(k);
      dmgType := atoi(v);
      if (pid > 0 and dmgType >= DMG_normal_dam and dmgType <= DMG_explosion) then begin
         ini_damage_types[pid] := dmgType + 1; // to distinguish normal damage from non-existing key...
      end
   end
end

procedure get_weapon_damage_type_override(variable weapon) begin
   variable dmgType, ammoPid;
   // First, check override for ammo.
   ammoPid := get_weapon_ammo_pid(weapon);
   if (ammoPid and ini_damage_types[ammoPid]) then begin
      return ini_damage_types[ammoPid] - 1;
   end else if (ini_damage_types[obj_pid(weapon)]) then begin  // check override for weapon
      return ini_damage_types[obj_pid(weapon)] - 1;
   end
   return -1;
end


/*
   Runs after Fallout has decided if an attack will hit or miss.

   int     arg0 - If the attack will hit: 0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit
   Critter arg1 - The attacker
   Critter arg2 - The target of the attack
   int     arg3 - The bodypart
   int     arg4 - The hit chance

   int     ret0 - Override the hit/miss
   int     ret1 - Override the targeted bodypart
   Critter ret2 - Override the target of the attack
*/
procedure afterhitroll_handler begin
   variable willHit;
   variable attacker;
   variable target;
   variable bodyPart;
   variable hitChance;

   variable wpn, i;
   variable damageType;

   willHit := get_sfall_arg;
   attacker := get_sfall_arg;
   target := get_sfall_arg;
   bodyPart := get_sfall_arg;
   hitChance := get_sfall_arg;

   // This is needed for custom door script!
   pbs_last_hit_roll_result := willHit;

   /*
   if (target and attacker) then begin

      //debug_msg("afterhitroll: "+willHit+" chance="+hitChance+"%% t="+target+" type="+obj_type(target)+" tpid="+obj_pid(target));
      // for Molotov:
      if (obj_type(target) == OBJ_TYPE_CRITTER and (willHit == 2 or willHit == 3)) then damageType := DMG_fire;
      else damageType := DMG_explosion;
      set_proto_data(PID_MOLOTOV_COCKTAIL, 48, damageType);
      // end Molotov code

      // fix for grenade launcher, this is required because one weapon has different damage types!
      if (damageType == DMG_fire) then begin
         damageType := DMG_explosion;
         for (i:=1; i<=2; i++) begin
            wpn := critter_inven_obj2(attacker, i);
            if (wpn) then
               if (get_weapon_ammo_pid(wpn) == PID_PBS_40MM_IC) then
                  damageType := DMG_fire;
         end
      end
      set_proto_data(PID_PBS_M79, 48, damageType);
      set_proto_data(PID_PBS_MGL, 48, damageType);
   end
   */
end



/*
   Runs when:

   Game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). This happens BEFORE the actual attack animation.
   AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.
   Does not run for misses, or non-combat damage like dynamite explosions.

   Critter arg0  - The target
   Critter arg1  - The attacker
   int     arg2  - The amount of damage to the target
   int     arg3  - The amount of damage to the attacker
   int     arg4  - The special effect flags for the target (use bwand DAM_* to check specific flags)
   int     arg5  - The special effect flags for the attacker (use bwand DAM_* to check specific flags)
   int     arg6  - The weapon used in the attack
   int     arg7  - The bodypart that was struck
   int     arg8  - Damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled)
   int     arg9 - Number of bullets actually hit the target (1 for melee attacks)
   int     arg10 - The amount of knockback to the target
   int     arg11 - Attack Type (see ATKTYPE_* constants)
   mixed   arg12 - computed attack data (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data)

   int     ret0 - The damage to the target
   int     ret1 - The damage to the attacker
   int     ret2 - The special effect flags for the target
   int     ret3 - The special effect flags for the attacker
   int     ret4 - The amount of knockback to the target
*/
procedure combatdamage_handler begin
   variable target;
   variable attacker;
   variable target_damage;
   variable attacker_damage;
   variable target_flags;
   variable attacker_flags;
   variable weapon;
      
   variable weaponPid;

   target := get_sfall_arg;
   attacker := get_sfall_arg;
   target_damage := get_sfall_arg;
   attacker_damage := get_sfall_arg;
   target_flags := get_sfall_arg;
   attacker_flags := get_sfall_arg;
   weapon := get_sfall_arg;

   if (target and attacker) then begin
      if (obj_type(target) == OBJ_TYPE_CRITTER) then begin
         if (weapon) then weaponPid := obj_pid(weapon);
         //debug_msg("combatdamage: "+obj_name(target)+", wpn: "+weaponPid+", flags: "+target_flags+", elec DT: "+get_critter_stat(target, STAT_dmg_thresh_electrical));

         // Taser knockout.
         if (weaponPid == PID_PBS_TASER) then begin
            if ((is_human(target) or is_animal(target)) and get_critter_stat(target, STAT_dmg_thresh_electrical) < 10) then begin
               target_flags := target_flags bwor DAM_LOSE_TURN;
               if (random(0,99) < (110 - 10*get_critter_stat(target, STAT_en))) then begin
                  target_flags := target_flags bwor DAM_CRITICAL bwor DAM_KNOCKED_DOWN;
               end
            end
         end
      end
   end
   
   set_sfall_return(target_damage);
   set_sfall_return(attacker_damage);
   set_sfall_return(target_flags);
   set_sfall_return(attacker_flags);

   set_sfall_arg(4, target_flags);
end


procedure is_hit_from_front(variable attacker, variable target) begin
   variable diff := get_cur_rot(attacker) - get_cur_rot(target);
   if (diff < 0) then
      diff := -diff;

    return diff != 0 and diff != 1 and diff != 5;
end

/*
   Runs after Fallout has calculated the death animation. Lets you set your own custom frame id, so more powerful than HOOK_DEATHANIM1, but performs no validation. When using critter_dmg function, this script will also run. In that case weapon pid will be -1 and attacker will point to an object with obj_art_fid == 0x20001F5.

   Does not run for critters in the knockdown/out state.

   int     arg0 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)
   Critter arg1 - The attacker
   Critter arg2 - The target
   int     arg3 - The amount of damage
   int     arg4 - The death anim id calculated by Fallout
*/
procedure deathanim2_handler begin
   variable weaponPID, attacker, target, damage, animID, rotToAttacker, targetRot;
   variable wpn, kt;

   weaponPID := get_sfall_arg;
   attacker := get_sfall_arg;
   target := get_sfall_arg;
   damage := get_sfall_arg;
   animID := get_sfall_arg;
   
   debug_msg("deathanim2: wpn: "+weaponPID+", att: "+sprintf("%X",obj_art_fid(attacker))+", targ: "+target+", dam: "+damage+", anim: "+animID);
   
   // fix for critter_dmg function
   if (obj_art_fid(attacker) == 0x20001F5 and animID == ANIM_chunks_of_flesh) then begin
      set_sfall_return(ANIM_fall_front);
      return;
   end
   
   // For double-barrels duplet mode: prevent animations that suggest burst fire, since we're actually doing duplet.
   if ((weaponPID == PID_SHOTGUN or weaponPID == PID_SAWED_OFF_SHOTGUN) 
      and (animID == ANIM_chunks_of_flesh or animID == ANIM_dancing_autofire)) then
   begin
      animID := ANIM_fall_front if is_hit_from_front(attacker, target) else ANIM_fall_back;
   end
   
   // Grenade Launcher: use fire death animation when using incendiary grenades.
   if (is_critter(attacker)) then begin
      // Find actual attacker's weapon.
      wpn := critter_inven_obj(attacker, INVEN_TYPE_RIGHT_HAND);
      if (wpn == 0) then
         wpn := critter_inven_obj(attacker, INVEN_TYPE_LEFT_HAND);
      else if (obj_pid(wpn) != weaponPID) then
         wpn := critter_inven_obj(attacker, INVEN_TYPE_LEFT_HAND);
      if (wpn) then if (get_weapon_ammo_pid(wpn) == PID_PBS_40MM_IC) then
      begin
         kt := critter_kill_type(target);
         if (kt == KILL_TYPE_men_kills or kt == KILL_TYPE_women_kills or kt == KILL_TYPE_children_kills or kt == KILL_TYPE_super_mutant_kills or kt == KILL_TYPE_ghoul_kills) then begin
            if (random(0,99) < 50) then
               animID := ANIM_fire_dance;
            else
               animID := ANIM_burned_to_nothing;
         end 
         //else if (is_humanoid(target)) then
         //   animID := ANIM_fire_dance;
         else if (kt != KILL_TYPE_robot_kills) then
            animID := ANIM_charred_body;
      end
   end
   
   //debug_msg("DEATHANIM "+animID);

   // Save last death anim and critter. This can be used in critter's destroy_p_proc
   set_sfall_global(SGVAR_LAST_DEATHANIM, animID);
   set_sfall_global(SGVAR_LAST_DEATHANIM_CRITTER, target);
   
   set_sfall_return(animID);
end

procedure ammocost_handler begin
   pbs_last_burst_size := get_sfall_arg_at(1);
end


/*
   HOOK_ITEMDAMAGE
   Runs when retrieving the damage rating of the player's used weapon. (Which may be their fists.)

   int     arg0 - The default min damage
   int     arg1 - The default max damage
   Item    arg2 - The weapon used (0 if unarmed)
   Critter arg3 - The critter doing the attacking
   int     arg4 - The type of attack
   int     arg5 - non-zero if this is an attack using a melee weapon

   int     ret0 - Either the damage to be used, if ret1 isn't given, or the new minimum damage if it is
   int     ret1 - The new maximum damage
*/
procedure itemdamage_handler begin
   variable dmgMin, dmgMax, weapon, attacker, attackType, isMelee;
   variable weaponPid, damageType;

   dmgMin := get_sfall_arg;
   dmgMax := get_sfall_arg;
   weapon := get_sfall_arg;
   attacker := get_sfall_arg;
   attackType := get_sfall_arg; 
   isMelee := get_sfall_arg;
   
   if (weapon) then begin
      weaponPid := obj_pid(weapon);
      damageType := get_proto_data(weaponPid, PROTO_WP_DMG_TYPE);
      //debug_msg("itemdamage: "+dmgMin+"-"+dmgMax+", wpn: "+weaponPid+", type: "+attackType+", dmg typ: "+damageType);
      // tell engine to make smaller explosion effect for any explosive weapon except rockets
      if not(is_in_array(get_proto_data(weaponPid, PROTO_WP_PROJ_PID), ([PID_PROJ_ROCKET, PID_PROJ_ROBOT_ROCKET]))) then begin
         set_attack_explosion_pattern(1, 0);
      end
      //display_msg("t:"+get_last_target(attacker)+", isMelee:"+isMelee);
      // tell engine to remove knockback for incendiary weapons
      if ((weaponPid == PID_MOLOTOV_COCKTAIL or get_weapon_ammo_pid(weapon) == PID_PBS_40MM_IC)
            and get_proto_data(weaponPid, PROTO_WP_DMG_TYPE) == DMG_fire) then
      begin
         set_weapon_knockback(weapon, 0, 0);
         set_attack_is_explosion_fire;
         //set_proto_data(weaponPid, 48, DMG_explosion);
      end
      // tell engine to reduce explosion damage radius for smaller explosions
      if (get_proto_data(weaponPid, PROTO_WP_CALIBER) == CALIBER_40MM_GRENADE) then begin
         set_attack_explosion_radius(2);
      end
   end
      
   set_sfall_return(dmgMin);
   set_sfall_return(dmgMax);
end
