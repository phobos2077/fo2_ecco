/*
   Scripting support for various custom weapon features in EcCo.
*/

#define SCRIPT_REALNAME       "gl_pbs_weapons"

#include "../sfall/command_lite.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.obj.h"
#include "../sfall/lib.strings.h"
#include "../headers/animcomd.h"
#include "../headers/itempid.h"
#include "../_pbs_headers/ecco.h"
#include "../_pbs_headers/miscpid.h"

#define INI_DAMAGE_TYPE_SECTION   "DAMAGE_TYPE"
#define INI_EFFECTS_SECTION       "EFFECTS"
#define INI_DEATHANIM_SECTION     "DEATHANIM"
#define INI_EXPLOSIVES_SECTION    "EXPLOSIVES"

// These are used in custom door script.
export variable pbs_last_burst_size;
export variable pbs_last_hit_roll_result;

variable
   emp_effect_armor_pids,
   emp_effect_armor_fids,
   duplet_fix_pids;

procedure start;
procedure afterhitroll_handler;
procedure ammocost_handler;
procedure combatdamage_handler;
procedure deathanim2_handler;
procedure itemdamage_handler;
procedure bestweapon_handler;

procedure load_settings begin
   variable pid, pidList, fid;

   pidList := get_int_list_from_ini(INI_COMBAT, INI_DEATHANIM_SECTION, "duplet_fix_pids");
   duplet_fix_pids := create_array_map;
   foreach (pid in pidList) begin
      duplet_fix_pids[pid] := 1;
   end
   //debug_msg("Loaded weapon pids for duplet fix: "+debug_array_str(array_keys(duplet_fix_pids)));

   pidList := get_int_list_from_ini(INI_COMBAT, INI_EFFECTS_SECTION, "emp_effect_armor_pids");
   emp_effect_armor_pids := create_array_map;
   emp_effect_armor_fids := create_array_map;
   foreach (pid in pidList) begin
      emp_effect_armor_pids[pid] := 1;
      emp_effect_armor_fids[get_proto_data(pid, PROTO_AR_FID_MALE) bwand 0xFFF] := 1;
      emp_effect_armor_fids[get_proto_data(pid, PROTO_AR_FID_FEMALE) bwand 0xFFF] := 1;
   end
   //debug_msg("Loaded emp effects for armor pids: "+debug_array_str(array_keys(emp_effect_armor_pids))+" and fids: "+debug_array_str(array_keys(emp_effect_armor_fids)));
end

procedure load_explosives begin
   // Explosion damage
   variable
      section := get_ini_section(INI_COMBAT, INI_EXPLOSIVES_SECTION),
      pid, val, dmg;
   foreach (pid: val in section) begin
      dmg := string_split_ints(val, ",");
      if (pid == PID_DYNAMITE) then begin
         set_dynamite_damage(dmg[0], dmg[1]);
         debug_log(string_format("Dynamite damage: %d-%d.", dmg[0], dmg[1]));
      end else if (pid == PID_PLASTIC_EXPLOSIVES) then begin
         set_plastic_damage(dmg[0], dmg[1]);
         debug_log(string_format("Plastic Explosive damage: %d-%d.", dmg[0], dmg[1]));
      end else begin
         item_make_explosive(pid, dmg[2], dmg[0], dmg[1]);
         debug_log(string_format("Adding custom explosive. Pid: %d (%d), damage: %d-%d.", pid, dmg[2], dmg[0], dmg[1]));
      end
   end
end

procedure start begin
   if game_loaded then begin
      call load_settings;
      call load_explosives;

      register_hook_proc(HOOK_AFTERHITROLL, afterhitroll_handler);
      register_hook_proc(HOOK_AMMOCOST, ammocost_handler);
      register_hook_proc(HOOK_COMBATDAMAGE, combatdamage_handler);
      register_hook_proc(HOOK_DEATHANIM2, deathanim2_handler);
      register_hook_proc(HOOK_ITEMDAMAGE, itemdamage_handler);
      register_hook_proc(HOOK_BESTWEAPON, bestweapon_handler);
   end
end


/*
   Runs after Fallout has decided if an attack will hit or miss.

   int     arg0 - If the attack will hit: 0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit
   Critter arg1 - The attacker
   Critter arg2 - The target of the attack
   int     arg3 - The bodypart
   int     arg4 - The hit chance

   int     ret0 - Override the hit/miss
   int     ret1 - Override the targeted bodypart
   Critter ret2 - Override the target of the attack
*/
procedure afterhitroll_handler begin
   variable willHit;
   variable attacker;
   variable target;
   variable bodyPart;
   variable hitChance;

   variable wpn, i;
   variable damageType;

   willHit := get_sfall_arg;
   attacker := get_sfall_arg;
   target := get_sfall_arg;
   bodyPart := get_sfall_arg;
   hitChance := get_sfall_arg;

   // This is needed for custom door script!
   pbs_last_hit_roll_result := willHit;
end


/*
   Runs when:

   Game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). This happens BEFORE the actual attack animation.
   AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.
   Does not run for misses, or non-combat damage like dynamite explosions.

   Critter arg0  - The target
   Critter arg1  - The attacker
   int     arg2  - The amount of damage to the target
   int     arg3  - The amount of damage to the attacker
   int     arg4  - The special effect flags for the target (use bwand DAM_* to check specific flags)
   int     arg5  - The special effect flags for the attacker (use bwand DAM_* to check specific flags)
   int     arg6  - The weapon used in the attack
   int     arg7  - The bodypart that was struck
   int     arg8  - Damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled)
   int     arg9 - Number of bullets actually hit the target (1 for melee attacks)
   int     arg10 - The amount of knockback to the target
   int     arg11 - Attack Type (see ATKTYPE_* constants)
   mixed   arg12 - computed attack data (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data)

   int     ret0 - The damage to the target
   int     ret1 - The damage to the attacker
   int     ret2 - The special effect flags for the target
   int     ret3 - The special effect flags for the attacker
   int     ret4 - The amount of knockback to the target
*/
procedure combatdamage_handler begin
   variable weaponPid, armorPid, targetFid;
   variable
      target := get_sfall_arg,
      attacker := get_sfall_arg,
      targetDamage := get_sfall_arg,
      attackerDamage := get_sfall_arg,
      targetFlags := get_sfall_arg,
      attackerFlags := get_sfall_arg,
      weapon := get_sfall_arg;

   if (target and attacker and weapon and (attackerFlags bwand DAM_HIT) and obj_type(target) == OBJ_TYPE_CRITTER) then begin
      weaponPid := obj_pid(weapon);
      //debug_msg("combatdamage: "+obj_name(target)+", wpn: "+weaponPid+", flags: "+targetFlags+", elec DT: "+get_critter_stat(target, STAT_dmg_thresh_electrical));

      // Taser knockout.
      if (weaponPid == PID_PBS_TASER) then begin
         if ((is_human(target) or is_animal(target)) and get_critter_stat(target, STAT_dmg_thresh_electrical) < 10) then begin
            targetFlags := targetFlags bwor DAM_LOSE_TURN;
            if (random(0,99) < (110 - 10*get_critter_stat(target, STAT_en))) then begin
               targetFlags := targetFlags bwor DAM_CRITICAL bwor DAM_KNOCKED_DOWN;
            end
         end
      end
      // Power armor EMP disruption.
      armorPid := obj_pid(get_armor(target)) if get_armor(target) else 0;
      targetFid := obj_art_fid(target) bwand 0xFFF;
      //debug_msg("Weapons combat dmg: "+armorPid+", dmg type: "+get_proto_data(weaponPid, PROTO_WP_DMG_TYPE)+", target fid: "+targetFid);
      if (get_proto_data(weaponPid, PROTO_WP_DMG_TYPE) == DMG_emp and ((armorPid and emp_effect_armor_pids[armorPid]) or emp_effect_armor_fids[targetFid])) then begin
         targetFlags := targetFlags bwor DAM_LOSE_TURN;
         //debug_msg("Armor disrupted! losing turn!");
      end

      set_sfall_return(targetDamage);
      set_sfall_return(attackerDamage);
      set_sfall_return(targetFlags);
      set_sfall_return(attackerFlags);
   
      set_sfall_arg(4, targetFlags);
   end
end


procedure is_hit_from_front(variable attacker, variable target) begin
   variable diff := get_cur_rot(attacker) - get_cur_rot(target);
   if (diff < 0) then
      diff := -diff;

    return diff != 0 and diff != 1 and diff != 5;
end

/*
   Runs after Fallout has calculated the death animation. Lets you set your own custom frame id, so more powerful than HOOK_DEATHANIM1, but performs no validation. When using critter_dmg function, this script will also run. In that case weapon pid will be -1 and attacker will point to an object with obj_art_fid == 0x20001F5.

   Does not run for critters in the knockdown/out state.

   int     arg0 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)
   Critter arg1 - The attacker
   Critter arg2 - The target
   int     arg3 - The amount of damage
   int     arg4 - The death anim id calculated by Fallout
*/
procedure deathanim2_handler begin
   variable weaponPID, attacker, target, damage, animID, oldAnimID, rotToAttacker, targetRot;
   variable wpn, kt;

   weaponPID := get_sfall_arg;
   attacker := get_sfall_arg;
   target := get_sfall_arg;
   damage := get_sfall_arg;
   animID := get_sfall_arg;

   oldAnimID := animID;

   //debug_msg("deathanim2: wpn: "+weaponPID+", att: "+sprintf("%X",obj_art_fid(attacker))+", targ: "+target+", dam: "+damage+", anim: "+animID);

   // For double-barrels duplet mode: prevent animations that suggest burst fire, since we're actually doing duplet.
   if (duplet_fix_pids[weaponPID]
      and (animID == ANIM_chunks_of_flesh or animID == ANIM_dancing_autofire)) then
   begin
      animID := ANIM_fall_back if is_hit_from_front(attacker, target) else ANIM_fall_front;
   end

   if (animID != oldAnimID) then begin
      set_sfall_return(animID);
      set_sfall_arg(4, animID);
   end

   // Save last death anim and critter. This can be used in critter's destroy_p_proc
   set_sfall_global(SGVAR_LAST_DEATHANIM, animID);
   set_sfall_global(SGVAR_LAST_DEATHANIM_CRITTER, target);
end

procedure ammocost_handler begin
   pbs_last_burst_size := get_sfall_arg_at(1);
end


/*
   HOOK_ITEMDAMAGE
   Runs when retrieving the damage rating of the player's used weapon. (Which may be their fists.)

   int     arg0 - The default min damage
   int     arg1 - The default max damage
   Item    arg2 - The weapon used (0 if unarmed)
   Critter arg3 - The critter doing the attacking
   int     arg4 - The type of attack
   int     arg5 - non-zero if this is an attack using a melee weapon

   int     ret0 - Either the damage to be used, if ret1 isn't given, or the new minimum damage if it is
   int     ret1 - The new maximum damage
*/
procedure itemdamage_handler begin
   variable dmgMin, dmgMax, weapon, attacker, attackType, attackMode, isMelee;
   variable weaponPid, damageType;

   dmgMin := get_sfall_arg;
   dmgMax := get_sfall_arg;
   weapon := get_sfall_arg;
   attacker := get_sfall_arg;
   attackType := get_sfall_arg;
   isMelee := get_sfall_arg;

   if (weapon) then begin
      weaponPid := obj_pid(weapon);
      damageType := get_proto_data(weaponPid, PROTO_WP_DMG_TYPE);
      attackMode := weapon_attack_mode(weaponPid, attackType);
      //debug_msg("itemdamage: "+dmgMin+"-"+dmgMax+", wpn: "+weaponPid+", atk type: "+attackType+", atk mode: "+attackMode+", dmg typ: "+damageType);
      // tell engine to make smaller explosion effect for any explosive weapon except rockets
      if not(is_in_array(get_proto_data(weaponPid, PROTO_WP_PROJ_PID), ([PID_PROJ_ROCKET, PID_PROJ_ROBOT_ROCKET]))) then begin
         set_attack_explosion_pattern(1, 0);
      end
      //display_msg("t:"+get_last_target(attacker)+", isMelee:"+isMelee);

      // tell engine to reduce explosion damage radius for smaller explosions
      if (get_proto_data(weaponPid, PROTO_WP_CALIBER) == CALIBER_40MM_GRENADE) then begin
         set_attack_explosion_radius(2);
      end else
      // increase radius for EMP grenades
      if (damageType == DMG_emp and attackMode == ATTACK_MODE_THROW) then begin
         set_attack_explosion_radius(4);
      end
   end
end


procedure weapon_type(variable weapon) begin
   variable attackMode, type := WEAPON_TYPE_UNARMED;

   if weapon then begin
      attackMode := weapon_attack_mode(obj_pid(weapon), ATKTYPE_RWEP1);
      if (attackMode >= ATTACK_MODE_SINGLE) then
         type := WEAPON_TYPE_RANGED;
      else if (attackMode == ATTACK_MODE_THROW) then
         type := WEAPON_TYPE_THROWN;
      else if (attackMode >= ATTACK_MODE_SWING) then
         type := WEAPON_TYPE_MELEE;
      else if (attackMode == ATTACK_MODE_NONE) then
         type := WEAPON_TYPE_NONE;
   end

   return type;
end

procedure weapon_rank(variable weapon, variable target) begin
   variable
      pid := obj_pid(weapon),
      avgDmg := (get_proto_data(pid, PROTO_WP_DMG_MIN) + get_proto_data(pid, PROTO_WP_DMG_MAX)) / 2,
      burstSize := get_proto_data(pid, PROTO_WP_BURST) if (weapon_attack_mode1(pid) == ATTACK_MODE_BURST or weapon_attack_mode2(pid) == ATTACK_MODE_BURST) else 1,
      avgBurstSize := (0.66 * burstSize) if burstSize > 1 else 1,
      ammoPid := get_weapon_ammo_pid(weapon),
      ammoDmgMult := (1.0 * get_proto_data(ammoPid, PROTO_AM_DMG_MULT) / get_proto_data(ammoPid, PROTO_AM_DMG_DIV) if (ammoPid > 0) else 1),
      dmgType := get_proto_data(pid, PROTO_WP_DMG_TYPE),
      targetDT := get_critter_stat(target, STAT_dmg_thresh + dmgType) if target != 0 else 0,
      targetDR := get_critter_stat(target, STAT_dmg_resist + dmgType) if target != 0 else 0,
      attackAP := get_proto_data(pid, PROTO_WP_APCOST_2) if (weapon_attack_mode2(pid) == ATTACK_MODE_BURST) else get_proto_data(pid, PROTO_WP_APCOST_1),
      expectedDmgPerAttack := (ammoDmgMult * avgDmg * avgBurstSize - targetDT) * (100 - targetDR) / 100,
      expectedDmgPerAP := expectedDmgPerAttack / attackAP,
      range := get_proto_data(pid, PROTO_WP_RANGE_1);

   // todo account for actual damage mod settings
   return round(expectedDmgPerAP * 10 + range);
end


/*
HOOK_BESTWEAPON
Runs when the AI decides which weapon is the best while searching the inventory for a weapon to equip in combat. This also runs when the player presses the "Use Best Weapon" button on the party member control panel.

Critter arg0 - the critter searching for a weapon
Item    arg1 - the best weapon chosen from two items
Item    arg2 - the first choice of weapon
Item    arg3 - the second choice of weapon
Critter arg4 - the target of the critter (can be 0)

Item    ret0 - overrides the chosen best weapon
*/
procedure bestweapon_handler begin
   variable
      critter := get_sfall_arg,
      weaponChosen := get_sfall_arg,
      weapon1 := get_sfall_arg,
      weapon2 := get_sfall_arg,
      target := get_sfall_arg;
   
   //display_msg(string_format("bestweapon for %s: %s vs %s -> %s (against %s)", obj_name_safe(critter), obj_name_safe(weapon1), obj_name_safe(weapon2), obj_name_safe(weaponChosen), obj_name_safe(target)));

   if (weapon1 == 0 or weapon2 == 0 or weapon_type(weapon1) != weapon_type(weapon2)) then return;

   variable
      weapon1rank := weapon_rank(weapon1, target),
      weapon2rank := weapon_rank(weapon2, target);
   
   debug_log_fmt("%s's bestweapon: %s (%d) vs %s (%d)", obj_name_safe(critter), obj_name_safe(weapon1), weapon1rank, obj_name_safe(weapon2), weapon2rank);
   set_sfall_return(weapon1 if weapon1rank > weapon2rank else weapon2);
end