/*
   Map loot mod:

   - Deterministically reduces certain amount of ammo in containers/ground on first map enter:
      - All weapons are unloaded.
      - Ammo items and ammo stacks in containers are reduced based on custom "pack size for pre-spawned ammo" from ini.
*/

#define SCRIPT_REALNAME     "pbs_map_loot"

#include "../sfall/define_lite.h"
//#include "../sfall/command_lite.h"
#include "../sfall/lib.strings.h"
#include "../sfall/lib.arrays.h"
#include "../sfall/lib.inven.h"
#include "../sfall/lib.math.h"
#include "../sfall/lib.misc.h"

#include "../_pbs_headers/ecco_ids.h"
#include "../_pbs_headers/ecco_ini.h"
#include "../_pbs_headers/ecco_msg.h"

#include "../_pbs_headers/loot_utils.h"

variable begin
   ini_enable_tweaks;
   ini_unload_weapons;
   ini_map_loot_ammo_qty;
end

procedure unload_weapon(variable item) begin
   if (not ini_unload_weapons) then return "";

   variable count := get_weapon_ammo_count(item);
   if (count <= 0) then return "";

   set_weapon_ammo_count(item, 0);
   return string_format("%s mag ammo (%d -> 0)", obj_name(item), count);
end

procedure calc_reduced_ammo_count(variable pid, variable packSize, variable count) begin
   variable
      ammoQtyPerPack := ini_map_loot_ammo_qty[pid];

   if (ammoQtyPerPack <= 0) then return count;
   return count * math_min(ammoQtyPerPack, packSize) / packSize;
end

procedure reduce_ammo_in_stack_by_pack_qty(variable invenObj, variable item) begin
   variable
      pid := obj_pid(item),
      packSize := get_proto_data(pid, PROTO_AM_PACK_SIZE),
      count := (obj_is_carrying_obj(invenObj, item) - 1) * packSize + get_weapon_ammo_count(item),
      newCount := calc_reduced_ammo_count(pid, packSize, count);

   if (newCount >= count) then return "";

   call reduce_item_count(invenObj, item, ceil(1.0 * newCount / packSize));
   // if number of items reduced, object reference will be different
   item := obj_carrying_pid_obj(invenObj, pid);
   if (item and newCount % packSize > 0) then
      set_weapon_ammo_count(item, newCount % packSize);

   return obj_name(item)+" ("+count+" -> "+newCount+")";
end

procedure reduce_ammo_on_ground_by_pack_qty(variable item) begin
   variable
      pid := obj_pid(item),
      packSize := get_proto_data(pid, PROTO_AM_PACK_SIZE),
      count := get_weapon_ammo_count(item),
      newCount := calc_reduced_ammo_count(pid, packSize, count);

   if (newCount >= count) then return "";
   if (newCount > 0) then
      set_weapon_ammo_count(item, newCount);
   else
      destroy_object(item);

   return string_format("%s (%d -> %d)", obj_name(item), count, newCount);
end

procedure reduce_container_loot(variable container) begin
   variable item, list, subType, stats, totalStats := "";
   list := inven_as_array(container);
   foreach item in list begin
      if (item == 0) then
         continue;
      subType := obj_item_subtype(item);
      //debug_log_fmt("processing stack %s (%d)...", obj_name(item), subType);

      switch (subType) begin
         case item_type_weapon:
            stats := unload_weapon(item);
         case item_type_ammo:
            stats := reduce_ammo_in_stack_by_pack_qty(container, item);
         case item_type_container:
            stats := reduce_container_loot(item);
         default:
            stats := "";
      end
      if (stats != "") then begin
         if (totalStats != "") then
            totalStats += ", ";
         totalStats += stats;
      end
   end
   if (totalStats != "") then
      totalStats := obj_name(container) + ": " + totalStats;
   return totalStats;
end

procedure reduce_ground_item_loot(variable item) begin
   variable subType := obj_item_subtype(item), stats;
   //debug_log_fmt("processing %s (%d)...", obj_name(item), subType);
   switch (subType) begin
      case item_type_weapon:
         return unload_weapon(item);
      case item_type_ammo:
         return reduce_ammo_on_ground_by_pack_qty(item);
      case item_type_container: begin
         return reduce_container_loot(item);
      end
      default:
         return "";
   end
end

procedure reduce_loot_on_map begin
   variable obj, stats;
   foreach obj in list_as_array(LIST_GROUNDITEMS) begin
      if (obj and not obj_in_party(obj)) then begin
         stats := reduce_ground_item_loot(obj);
         if (stats != "") then
            debug_log_fmt("Reduce loot [%d-%d] %s", elevation(obj), tile_num(obj), stats);
      end
   end
end


#define INI_FILE        INI_MISC
#define INI_SECTION     "MAP_LOOT"

procedure start begin
   if (game_loaded) then begin
      load_bool_from_ini(enable_tweaks, false);
      if (not ini_enable_tweaks) then return;

      // load_num_from_ini(reduce_ammo_percent, 0, 0, 100);
      // load_num_from_ini(reduce_drugs_percent, 0, 0, 100);
      // load_num_from_ini(reduce_weapons_percent, 0, 0, 100);
      // load_int_list_from_ini(reduce_drugs_pids);
      // load_int_list_from_ini(reduce_weapons_pids);

      load_bool_from_ini(unload_weapons, false);

      ini_map_loot_ammo_qty := get_ini_section_int_to_int(INI_FILE, "MAP_LOOT_AMMO_QTY", true);

      //register_hook_proc(HOOK_USEANIMOBJ, useanimobj_hook);
      //register_hook_proc(HOOK_USESKILLON, useskillon_hook);

      debug_log("Map loot reduction enabled.");

      // DEBUGGING!!!!
      //call reduce_loot_on_map;
   end
end

procedure map_enter_p_proc begin
   //debug_log("cur_town = "+cur_town+", is_loading = "+is_loading_game+", map_first_run = "+map_first_run);
   if (not ini_enable_tweaks or is_loading_game or not map_first_run) then return;

   call reduce_loot_on_map;
end
