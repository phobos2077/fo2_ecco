procedure start;

#include "../headers/itempid.h"
#include "../sfall/define_lite.h"
#include "../sfall/lib.arrays.h"
#include "../_pbs_headers/ecco.h"

/**
	Runs after fallout has decided if an attack will hit or miss

	int     arg1 - If the attack will hit. (0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit)
	critter arg2 - The attacker
	critter arg3 - The target of the attack
	int     arg4 - The bodypart
	int     arg5 - The hit chance

	int     ret1 - Override the hit/miss
	int     ret2 - Override the targeted bodypart
	critter ret3 - Override the target of the attack
*/

export variable pbs_last_hit_roll_result;

procedure start begin
	variable willHit;
	variable attacker;
	variable target;
	variable bodyPart;
	variable hitChance;

	variable wpn, i;
	variable damageType;

    if (init_hook) then begin
	end else
      begin
         willHit := get_sfall_arg;
         attacker := get_sfall_arg;
         target := get_sfall_arg;
         bodyPart := get_sfall_arg;
         hitChance := get_sfall_arg;

         pbs_last_hit_roll_result := willHit;

		 // TODO: move weapon stuff to global script
         if (target and attacker) then begin
            //display_array(pbs_set_who_see_dude);
	         //debug_msg("afterhitroll: "+willHit+" chance="+hitChance+"%% t="+target+" type="+obj_type(target)+" tpid="+obj_pid(target));
	         // for Molotov:
	         if (obj_type(target) == OBJ_TYPE_CRITTER and (willHit == 2 or willHit == 3)) then damageType := DMG_fire;
	         else damageType := DMG_explosion;
	         set_proto_data(PID_MOLOTOV_COCKTAIL, 48, damageType);
	         // end Molotov code

	         // fix for grenade launcher, this is required because one weapon has different damage types!
	         if (damageType == DMG_fire) then begin
	            damageType := DMG_explosion;
   	         for (i:=1; i<=2; i++) begin
                  wpn := critter_inven_obj2(attacker, i);
                  if (wpn) then
                     if (get_weapon_ammo_pid(wpn) == PID_PBS_40MM_IC) then
                        damageType := DMG_fire;
               end
            end
            set_proto_data(PID_PBS_M79, 48, damageType);
            set_proto_data(PID_PBS_MGL, 48, damageType);
         end
      end
end
