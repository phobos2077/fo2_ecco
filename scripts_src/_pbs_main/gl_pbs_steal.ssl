/*
   Steal mechanic tweaks.

   - If catch roll failed but steal roll also failed, then "silently" fail steal instead of succeeding (printing new message).
   - Reduce town reputation on steal attempts (successful or when caught).
   - Moved various constants into ini.
   - Take quantity into account for item size penalty.
   - Optional penalty for sizeless items based on cost (such as money).
*/

#include "../sfall/sfall.h"
#include "../sfall/define_lite.h"
#include "../sfall/command_lite.h"

#include "../sfall/lib.strings.h"
#include "../sfall/lib.math.h"
#include "../sfall/lib.obj.h"

#define SCRIPT_REALNAME    "gl_pbs_steal"
#include "../_pbs_headers/engine_funcs.h"
#include "../_pbs_headers/ecco_log.h"
#include "../_pbs_headers/ecco_ini.h"
#include "../_pbs_headers/math_ext.h"
#include "../_pbs_headers/rep.h"

#define INI_FILE        INI_MISC
#define INI_SECTION     "STEAL"

variable
   ini_town_rep_caught,
   ini_town_rep_steal_price_mult,
   ini_chance_steal_count_mod_mult,
   ini_chance_facing_mod,
   ini_chance_size_mod_mult,
   ini_sizeless_chance_cost_mod_mult,
   ini_exp_mult;

variable
   steal_count,
   steal_size,
   pickup_proc_skip_target;

procedure is_in_front(variable thief, variable target) begin
   variable diff = get_cur_rot(thief) - get_cur_rot(target);
   if (diff < 0) then diff = -diff;
   return diff != 0 and diff != 1 and diff != 5;
end

/*
Runs when checking an attempt to steal or plant an item in other inventory using Steal skill.

This is fired before the default handlers are called, which you can override. In this case you MUST provide message of the result to player ("You steal the %s", "You are caught planting the %s", etc.). Example message (vanilla behavior): display_msg(sprintf(mstr_skill(570 + (isSuccess != false) + arg3 * 2), obj_name(arg2)));

Critter arg0 - Thief
Obj     arg1 - The target
Item    arg2 - Item being stolen/planted
int     arg3 - 0 when stealing, 1 when planting
int     arg4 - quantity of items being stolen

int     ret0 - overrides hard-coded handler (1 - force success, 0 - force fail, -1 - use engine handler)
int     ret1 - overrides experience points gained for stealing this item
*/
procedure steal_hook begin
   variable
      thief := get_sfall_arg,
      target := get_sfall_arg,
      item := get_sfall_arg,
      isPlanting := get_sfall_arg,
      quantity := get_sfall_arg;

   //debug_log_fmt("HOOK_STEAL  thief: %s, target: %s, item: %s, planting: %d, quantity: %d", obj_name_safe(thief), obj_name_safe(target), obj_name_safe(item), isPlanting, quantity);

   variable
      itemSize := get_proto_data(obj_pid(item), PROTO_IT_SIZE) * quantity,
      itemCost := proto_data(obj_pid(item), it_cost) * quantity,
      stealModifier = steal_count * ini_chance_steal_count_mod_mult;

   if (thief != dude_obj or get_perk(thief, PERK_pickpocket) == 0) then begin
      if (itemSize > 0) then
         stealModifier += floor(itemSize * ini_chance_size_mod_mult);
      else
         stealModifier += floor(itemCost * ini_sizeless_chance_cost_mod_mult);

      if (obj_type(target) == OBJ_TYPE_CRITTER) then begin
         // check facing: lower chance if face to face
         if (is_in_front(thief, target)) then begin
            stealModifier += ini_chance_facing_mod;
         end
      end
   end

   if ((get_object_data(target, OBJ_DATA_DAMAGE_FLAGS) bwand (DAM_KNOCKED_OUT bwor DAM_KNOCKED_DOWN)) != 0) then begin
      stealModifier += 20;
   end

   variable stealChance = stealModifier + has_skill(thief, SKILL_STEAL);
   if (obj_type(target) == OBJ_TYPE_CRITTER) then stealChance -= has_skill(target, SKILL_STEAL); // pbs: added target skill subtraction
   if (stealChance > 95) then stealChance = 95;

   variable stealRoll;
   if (thief == dude_obj and party_member_obj(obj_pid(target))) then begin
      stealRoll = ROLL_CRITICAL_SUCCESS;
   end else begin
      stealRoll = roll_check(stealChance, get_critter_stat(thief, STAT_crit_chance));
   end

   variable catchRoll;
   variable catchChance := 0;
   if (stealRoll == ROLL_CRITICAL_SUCCESS) then begin
      catchRoll = ROLL_CRITICAL_FAILURE;
   end else if (stealRoll == ROLL_CRITICAL_FAILURE) then begin
      catchRoll = ROLL_SUCCESS;
   end else begin
      // pbs: changed logic, apply base catch modifier only on failed steal roll.
      if (stealRoll == ROLL_FAILURE) then begin
         if (obj_type(target) == OBJ_TYPE_CRITTER) then begin
            catchChance = get_perception(target) * 4;
         end else begin
            catchChance = 30;
         end
      end
      catchChance -= stealModifier;
      catchRoll = roll_check(catchChance, 0);
   end

   // pbs: added new outcome when steal roll is FAILURE but catch roll is unsuccessful, prevent steal without getting caught.
   variable result := 0, townRepMod := 0;
   if (catchRoll < ROLL_SUCCESS) then begin // we didn't get caught
      result := 1 if stealRoll >= ROLL_SUCCESS else 2;  // success or fail without getting caught
   end
   debug_log_fmt_arr("Result: %d, stealRoll: %d, catchRoll: %d, stealChance: %d = min(%d + %d - %d, 95), catchChance: %d",
      ([result, stealRoll, catchRoll, stealChance, stealModifier, has_skill(thief, SKILL_STEAL), has_skill(target, SKILL_STEAL), catchChance]));

   if (result == 1) then begin
      // Update steal count on successful steal/plant
      steal_count += 1;
      steal_size += itemSize;
      // Change rep if we successfully stole something
      if (not isPlanting) then
         townRepMod := math_round_chance(itemCost * ini_town_rep_steal_price_mult);

      debug_log_fmt("itemCost=%d, priceMult=%.5f, townRepMod=%d, stealCount=%d", itemCost, ini_town_rep_steal_price_mult, townRepMod, steal_count);
   end else if (result == 0) then begin
      // Caught stealing or planting
      townRepMod := ini_town_rep_caught;
   end
   if (townRepMod != 0) then begin
      call inc_town_rep(townRepMod);
   end
   //pickup_proc_skip_target := target;
   set_sfall_return(result);
   set_sfall_return(ini_exp_mult * steal_count);
   variable msgId := (574 + isPlanting) if (result == 2) else (570 + (result != 0) + isPlanting * 2);
   display_msg(sprintf(mstr_skill(msgId), obj_name(item)));
end

procedure stdprocedure_hook begin
   variable
      handle := get_sfall_arg,
      self := get_sfall_arg,
      source := get_sfall_arg;
   
   if (handle == pickup_proc and self == pickup_proc_skip_target) then begin
      debug_msg("Cancelling pickup_p_proc for "+obj_name(self));
      set_sfall_return(-1);
   end
end

/*procedure rollcheck_hook begin
   variable
      type := get_sfall_arg,
      roll := get_sfall_arg,
      chance := get_sfall_arg,
      bonus := get_sfall_arg,
      rndChance := get_sfall_arg;

   if (type == 6 or type == 7) then begin
      debug_log_fmt("HOOK_ROLLCHECK  roll: %d, chance: %d, bonus: %d, rnd: %d", roll, chance, bonus, rndChance);
   end
end*/

procedure gamemodechange_hook begin
   variable prevGameMode := get_sfall_arg_at(1);
   if ((get_game_mode bwand INTFACELOOT) and not(prevGameMode bwand INTFACELOOT) and steal_count > 0) then begin
      debug_log("Resetting steal counters");
      steal_count := 0;
      steal_size := 0;
   end
end

procedure start begin
   if (not game_loaded) then return;

   if (get_int_from_ini(INI_FILE, INI_SECTION, "enable_tweaks") <= 0) then return;

   int_from_ini_file(chance_steal_count_mod_mult, INI_FILE, INI_SECTION);
   int_from_ini_file(chance_facing_mod, INI_FILE, INI_SECTION);
   float_from_ini_file(chance_size_mod_mult, INI_FILE, INI_SECTION);
   float_from_ini_file(sizeless_chance_cost_mod_mult, INI_FILE, INI_SECTION);
   int_from_ini_file_clamped(town_rep_caught, INI_FILE, INI_SECTION, -30, 30);
   float_from_ini_file_clamped(town_rep_steal_price_mult, INI_FILE, INI_SECTION, -10, 10);
   int_from_ini_file_clamped(exp_mult, INI_FILE, INI_SECTION, 0, 1000);

   register_hook_proc(HOOK_STEAL, steal_hook);
   //register_hook_proc(HOOK_ROLLCHECK, rollcheck_hook);
   register_hook_proc(HOOK_GAMEMODECHANGE, gamemodechange_hook);
   register_hook_proc(HOOK_STDPROCEDURE, stdprocedure_hook);

   debug_log("Steal tweaks initailized");
end
