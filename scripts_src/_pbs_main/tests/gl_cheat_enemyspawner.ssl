/*
   
*/

#include "..\..\sfall\sfall.h"
#include "..\..\sfall\dik.h"
#include "..\..\sfall\define_lite.h"
#include "..\..\sfall\command_lite.h"
#include "..\..\sfall\lib.arrays.h"
#include "..\..\sfall\lib.inven.h"
#include "..\..\headers\animcomd.h"
#include "..\..\headers\critrpid.h"
#include "..\..\headers\scenepid.h"
#include "..\..\headers\itempid.h"
#include "..\..\headers\scripts.h"
#include "..\..\_pbs_headers\ecco_ids.h"

#define ENEMY_ENCLAVE   (1)
#define ENEMY_THUG      (2)
#define ENEMY_FARMER    (3)
#define ENEMY_EYEBOT    (4)
#define ENEMY_RAT       (5)
#define ENEMY_ALIEN     (6)
#define ENEMY_MELEE     (7)
#define ENEMY_GECKO     (8)
#define ENEMY_BOSS      (9)
#define ENEMY_DEATHCLAW (10)
#define ENEMY_THROWER   (11)
#define ENEMY_SALVATORE (12)

variable enemy_types;

#define is_throwing_weapon_pid(pid)          (weapon_attack_mode1(pid) == ATTACK_MODE_THROW)

procedure spawn_obj(variable pid, variable tile := 0) begin
   return create_object_sid(pid, tile or tile_under_cursor, dude_elevation, -1);
end

procedure spawn_enemy(variable type, variable tile := 0) begin
   variable critter, pid, sid, weaponPid, weapon, ammoPid, stimpaks, female;
   switch (type) begin
      case ENEMY_ENCLAVE:
         pid := PID_MALE_ENCALVE_PATROL + random(0, 1);
         sid := SCRIPT_ECELVPAT; // ECElvPat
         weaponPid := PID_PLASMA_PISTOL; // plasma pistol
      case ENEMY_THUG:
         pid := PID_GUN_THUG_MALE + random(0, 1);
         sid := SCRIPT_ECBANDIT; // ecbandit
         weaponPid := PID_DESERT_EAGLE; // DE
         stimpaks = 3;
      case ENEMY_SALVATORE:
         pid := PID_SALVATORE_THUG_1 + random(0, 1);
         sid := SCRIPT_NCSALMEN;
         weaponPid := PID_PBS_LASER_PISTOL_LT;
         stimpaks := 4;
      case ENEMY_FARMER:
         pid := PID_MALE_FARMER + random(0, 1);
         sid := SCRIPT_ECFARMER;
         weaponPid := PID_SAWED_OFF_SHOTGUN;
      case ENEMY_EYEBOT:
         pid := PID_EYEBALL;
         sid := SCRIPT_WCSECBOT;
      case ENEMY_RAT:
         pid := PID_RAT;
         sid := SCRIPT_ZCLRAT;
      case ENEMY_GECKO:
         pid := PID_GOLDEN_GECKO;
         sid := SCRIPT_ZCLGECKO;
      case ENEMY_ALIEN:
         pid := PID_ALIEN;
         sid := SCRIPT_ECALIEN;
      case ENEMY_BOSS:
         pid := PID_END_BOSS;
         sid := SCRIPT_QCFRANK;
         weaponPid := 530;
      case ENEMY_DEATHCLAW:
         pid := PID_MOTHER_DEATHCLAW; // PID_TOUGH_DEATHCLAW;
         sid := SCRIPT_ECDTHCLW;
      case ENEMY_THROWER:
         female := random(0, 1);
         pid := PID_AGILE_GUARD_MALE + female;
         sid := SCRIPT_ECRAIDER;
         stimpaks := random(1, 3);
         weaponPid := array_random_value([PID_THROWING_KNIFE, PID_PBS_BOOMERANG] if female else [PID_PBS_THROWING_AXE]);
      case ENEMY_MELEE:
         female := random(0, 1);
         pid := PID_MELEE_GUARD_MALE + female;
         sid := SCRIPT_ECRAIDER;
         stimpaks := random(1, 3);
         weaponPid := array_random_value([PID_COMBAT_KNIFE, PID_PBS_PISTON_SPEAR] if female else [PID_CATTLE_PROD, PID_PBS_SPIKED_SLEDGE]);
      default:
         return;
   end

   critter := create_object_sid(pid, tile or tile_under_cursor, dude_elevation, sid);
   if (weaponPid) then begin
      weapon := add_items_pid(critter, weaponPid, 3 if is_throwing_weapon_pid(weaponPid) else 1);
      //wield_obj_critter(critter, weapon);
      ammoPid := get_proto_data(weaponPid, PROTO_WP_AMMO_PID);
      if (ammoPid > 0) then
         call add_items_pid(critter, ammoPid, random(1, 3));
      wield_obj_critter(critter, weapon);
   end
   if stimpaks then
      call add_items_pid(critter, PID_STIMPAK, stimpaks);
   return critter;
end

procedure spawn_enemies_circle(variable type, variable radius) begin
   variable dir, origin := tile_under_cursor;
   call spawn_enemy(type, origin);
   if (radius > 0) then begin
      for (dir := 0; dir < 6; dir++) begin
         call spawn_enemy(type, tile_num_in_direction(origin, dir, radius));
      end
   end
end

procedure spawn_enemies_line(variable type, variable num, variable dir, variable spacing) begin
   variable i, origin := tile_under_cursor;
   call spawn_enemy(type, origin);
   for (i := 1; i < num; i++) begin
      call spawn_enemy(type, tile_num_in_direction(origin, dir, i*spacing));
   end
end

procedure keypress_handler begin
   variable
      isPressed := get_sfall_arg,
      keyCode := get_sfall_arg;

   if isPressed and get_cursor_mode == 0 and key_pressed(DIK_LSHIFT) then begin
      //display_msg("key pressed "+keyCode);
      if (keyCode == DIK_5) then begin
         //call spawn_enemy(ENEMY_BOSS);
         call spawn_enemy(ENEMY_SALVATORE);
         //call spawn_obj(PID_NS_FORCE_FIELD);
      end
      if (keyCode == DIK_6) then begin
         variable crit := spawn_enemy(ENEMY_DEATHCLAW);
         reg_anim_clear(crit);
         reg_anim_begin();
         reg_anim_obj_move_to_obj(crit, dude_obj, -1);
         reg_anim_end();
      end
      if (keyCode == DIK_7) then
         call spawn_enemy(ENEMY_ENCLAVE);
      if (keyCode == DIK_8) then
         call spawn_enemy(ENEMY_MELEE);
      if (keyCode == DIK_9) then
         call spawn_enemies_circle(ENEMY_ALIEN, 1);
   end
end

procedure start begin
   if (not game_loaded) then return;

   register_hook_proc(HOOK_KEYPRESS, keypress_handler);
end
