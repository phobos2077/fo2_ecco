#include "..\..\sfall\lib.math.h"
#include "..\..\sfall\lib.strings.h"
#include "..\..\sfall\lib.arrays.h"
#include "..\..\sfall\lib.obj.h"
#include "..\..\sfall\sfall.h"
#include "..\..\sfall\dik.h"
#include "..\..\sfall\command_lite.h"


#include "arrays_testcase.ssl"


procedure keypress_hook begin
   variable
      pressed := get_sfall_arg,
      key := get_sfall_arg;
   
   if (not pressed) then return;

   if (key == DIK_F2) then begin
      if (get_cursor_mode == 1 and obj_under_cursor(false, true)) then begin
         variable obj := obj_under_cursor(false, true);
         display_msg(string_format("obj %s [%d] tile %d elev %d map %d scr %d", obj_name(obj), obj_pid(obj), tile_num(obj), elevation(obj), cur_map_index, get_script(obj)));
      end else begin
         display_msg(string_format("tile %d elev %d map %d", tile_under_cursor, elevation(dude_obj), cur_map_index));
      end
   end
   if (key == DIK_F3) then begin
      if (get_cursor_mode == 1) then begin
         if (obj_under_cursor(true, false)) then begin
            obj := obj_under_cursor(true, false);
            //variable tile := tile_num(obj);
            destroy_object(obj);
            //obj := create_object_sid(16777224, tile, dude_elevation, 1313);
            //set_script(obj, 1049); // NIBASDOR
            //display_msg(string_format("Set script for %s to %d", obj_name(obj), 1049));
         end
      end else begin
         move_to(dude_obj, tile_under_cursor, dude_elevation);
      end
      //variable block := obj_blocking_line(Greeting_Watcher, tile_under_cursor, BLOCKING_TYPE_SHOOT);
      //display_msg(string_format("%s blocking: %s", obj_name_safe(Greeting_Watcher), obj_name_safe(block)));
   end
end

procedure start begin
   if not game_loaded then return;

   // call arrays_lib_tests;

   register_hook_proc(HOOK_KEYPRESS, keypress_hook);
   
end
