/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Book shelf
        Locked: Yes
        Trapped: Yes
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/

/* Include Files */
#define SCRIPT_REALNAME "sishelf1"
#include "../headers/define.h"

#define NAME                    SCRIPT_SISHELF1

#include "../headers/command.h"

/* Sets whether the door is locked or trapped */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_ACTIVE
#define DOOR_STATUS                     STATE_WOOD
#define LOCK_STATUS                     STATE_STANDARD_LOCK

#define LVAR_Restock_Time               (7)
#define LVAR_First_Restock              (8)
#define LVAR_Restock_Time_Fix           (9) //added by killap

#define custom_start
#define custom_use_p_proc
#define custom_look_at_p_proc
#define custom_description_p_proc
#define custom_use_skill_on_p_proc
#define custom_use_obj_on_p_proc
#define custom_damage_p_proc
#define custom_map_enter_p_proc
#define custom_map_update_p_proc
#define custom_mstr NAME
#define no_pickup
#include "../headers/containers.h"

#define ANNOYTHRESH 2

import variable buster_obj;
import variable book_obj1;
import variable book_obj_look;

variable Book_Annoy_Count;

procedure start begin
   book_obj1 := self_obj;
end

/********************************************************************
   Any time that a critter tries to use this door will call this
   procedure. it will check to see if the door is trapped and locked.
********************************************************************/

procedure use_p_proc begin
/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */
   if (buster_obj and buster_obj != -1) then begin
      script_overrides;
      book_obj_look := 1;
   end
 end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;

   display_msg(mstr(100));
end

/**********************************************************************************
   Should the player examine the door closely, then he should be allowed a lockpick
   roll, a traps roll and a perception roll. Depending on which rolls are made will
   determine how much information about the door will be given.
**********************************************************************************/

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/**********************************************************************************
   Should the player try using a skill on the door, here are where the skill rolls
   will be made. The ones which need to be in here are: Lockpick and Traps. Science
   and Repair can be added to this list to give more information about the door.
**********************************************************************************/

procedure use_skill_on_p_proc begin
   variable Skill_Used;

   Skill_Used:=action_being_used;

   if (Skill_Used == SKILL_TRAPS) then begin
       script_overrides; //added by killap
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           call Skill_Disarm_Traps;
       end
       else begin
           if (source_obj == dude_obj) then begin
               display_msg(mstr(195));
           end else begin
               display_msg(obj_name(source_obj)+mstr(200));
           end
       end
   end                                                          // End of Skill_Traps
   else begin
      if (buster_obj and buster_obj != -1) then begin
         if (not skill_success(dude_obj, Skill_Used, -35)) then begin
            script_overrides;
            if (Book_Annoy_Count < ANNOYTHRESH) then begin
               if (Book_Annoy_Count == ANNOYTHRESH - 1) then begin
                  float_msg(buster_obj, mstr(207), FLOAT_MSG_RED);
               end else begin
                  float_msg(buster_obj, mstr(208), FLOAT_MSG_RED);
               end
            end else begin
               book_obj_look := 4;
            end
            Book_Annoy_Count += 1;
         end
      end
   end
end

/**********************************************************************************
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
**********************************************************************************/
procedure use_obj_on_p_proc begin
   variable Tool;

   Tool:=obj_pid(obj_being_used_with);

   if ((Tool == PID_DYNAMITE) or (Tool == PID_PLASTIC_EXPLOSIVES)) then begin
      script_overrides; //added by killap
      if (buster_obj and buster_obj != -1) then begin
         float_msg(buster_obj, mstr(206), FLOAT_MSG_RED);
         book_obj_look := 4;
      end
   end else begin
      if (buster_obj and buster_obj != -1) then begin
         script_overrides;
         if (Book_Annoy_Count < ANNOYTHRESH) then begin
            if (Book_Annoy_Count == ANNOYTHRESH - 1) then begin
               float_msg(buster_obj, mstr(207), FLOAT_MSG_WARNING);
            end else begin
               float_msg(buster_obj, mstr(208), FLOAT_MSG_RED);
            end
         end else begin
            book_obj_look := 4;
         end
         Book_Annoy_Count += 1;
      end
   end
end

/******************************************************************************************
   Should the door sustain damage from anything (ie, dynamite, plastic explosives, rockets,
   or any other forms of damage), this procedure will be called to destroy the door and
   free up the space.
******************************************************************************************/

procedure damage_p_proc begin
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called. The main purpose of
   this procedure is to lock the door from the outset, rather than having to worry about
   it through Mapper. After the door has been unlocked, it will remain as such, unless
   the player locks it once more.
***************************************************************************************/

procedure map_enter_p_proc begin
   if (buster_obj != -1 and buster_obj) then begin

      restock_fix
      if (local_var(LVAR_Restock_Time) < game_time) then begin
         ndebug("first restock shelf 1");
         variable tmp_box := move_critical_items();
         check_restock_item(PID_44_MAGNUM_JHP, 7, 10, 40)
         check_restock_item(PID_BBS, 30, 50, 10)
         check_restock_item(PID_AVENGER_MINIGUN, 0, 1, 100)
         check_restock_item(PID_HK_G11, 0, 2, 100)
         check_restock_item(PID_PANCOR_JACKHAMMER, 0, 1, 100)
         check_restock_item(PID_LIGHT_SUPPORT_WEAPON, 0, 1, 100)
         check_restock_item(PID_4_7MM_CASELESS, 1, 4, 25)
         check_restock_item(PID_5MM_JHP, 2, 5, 50)
         check_restock_item(PID_5MM_AP, 1, 3, 50)
         check_restock_item(PID_MICRO_FUSION_CELL, 2, 4, 100) // pbs: high prob
         check_restock_item(PID_SMALL_ENERGY_CELL, 3, 5, 50)
         check_restock_item(PID_10MM_PISTOL, 2, 4, 50)
         check_restock_item(PID_10MM_SMG, 1, 3, 35)
         check_restock_item(PID_HUNTING_RIFLE, 1, 3, 65)
         check_restock_item(PID_SHOTGUN, 1, 1, 60)
         check_restock_item(PID_RED_RYDER_BB_GUN, 1, 1, 30)
         if (dude_luck > 9) then
            check_restock_item(PID_RED_RYDER_LE_BB_GUN, 1, 1, 20) //5 percent chance
         check_restock_item(PID_DESERT_EAGLE, 2, 4, 35)
         check_restock_item(PID_10MM_AP, 7, 10, 40)
         check_restock_item(PID_10MM_JHP, 7, 10, 60)
         check_restock_item(PID_223_FMJ, 7, 10, 60)
         check_restock_item(PID_SHOTGUN_SHELLS, 7, 10, 55)
         call restore_critical_items(tmp_box);
         set_local_var(LVAR_Restock_Time, (random(2,4) * ONE_GAME_DAY) + game_time);
      end
   end
end

/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time. It is used to make
   sure that the door does not lock on it's own and that the player will be able to get
   through once he has unlocked the door. Once more, this is so that locking and
   unlocking do not need to be done in Mapper.
**************************************************************************************/

procedure map_update_p_proc begin
end

