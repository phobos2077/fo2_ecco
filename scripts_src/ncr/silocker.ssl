/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Metal Locker
        Locked: Yes
        Trapped: Yes
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/

/* Include Files */
#define SCRIPT_REALNAME "silocker"

/* Sets whether the door is locked or trapped */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_METAL
#define LOCK_STATUS                     STATE_STANDARD_LOCK

#define Lock_Bonus                      (-70)
#define Crowbar_Bonus                   (-5)

#define custom_use_obj_on_p_proc
#define custom_use_p_proc
#define custom_use_skill_on_p_proc
#define custom_Lockpick_Door
#include "../headers/containers.h"

import variable i_locker_tamper;

/********************************************************************
   Any time that a critter tries to use this door will call this
   procedure. it will check to see if the door is trapped and locked.
********************************************************************/

procedure use_p_proc begin
/* Trap_Roll is a global variable to this script, defined at the beginning
   of the script. */

   i_locker_tamper += 1;

   Traps_Roll:=roll_vs_skill(source_obj,SKILL_TRAPS,Trap_Bonus);

   if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
       if (is_success(Traps_Roll)) then begin
           script_overrides;
           set_local_var(LVAR_Found_Trap,1);
           reg_anim_clear(source_obj);

           if (source_obj == dude_obj) then begin
               display_msg(mstr(204));
           end
           else begin
               display_msg(mstr(205));
           end
       end

       else begin
           if (obj_is_locked(self_obj)) then begin
               script_overrides;
               display_msg(mstr(203));
               call Damage_Critter;
           end
           else begin
               call Damage_Critter;
           end
       end
   end

   else if (obj_is_locked(self_obj)) then begin
       script_overrides;
       display_msg(mstr(203));
   end
end

/**********************************************************************************
   Should the player try using a skill on the door, here are where the skill rolls
   will be made. The ones which need to be in here are: Lockpick and Traps. Science
   and Repair can be added to this list to give more information about the door.
**********************************************************************************/

procedure use_skill_on_p_proc begin
   variable Skill_Used;

   i_locker_tamper += 1;
   Skill_Used:=action_being_used;

   if (Skill_Used == SKILL_LOCKPICK) then begin
       script_overrides; //added by killap
       if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
           call Unlock_Lock;
       end
       else begin
           call Set_Lock;
       end
   end                                                          // End of Skill_Lockpick

   else if (Skill_Used == SKILL_TRAPS) then begin
       script_overrides; //added by killap
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           call Skill_Disarm_Traps;
       end
       else begin
           if (source_obj == dude_obj) then begin
               display_msg(mstr(195));
           end

           else begin
               display_msg(obj_name(source_obj)+mstr(200));
           end
       end
   end                                                          // End of Skill_Traps

end

/**********************************************************************************
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
**********************************************************************************/
procedure use_obj_on_p_proc begin
   variable Tool;
   i_locker_tamper += 1;
   Tool:=obj_pid(obj_being_used_with);
   pry_trap_block
   full_lockpick_block
end

/***************************************************************************
   This procedure will check against the roll_vs_lockpick to see if the
   source_object will unlock the door and display the appropriate messages
***************************************************************************/

procedure Lockpick_Door begin
   if (is_success(Locks_Roll)) then begin
       //Added in for the guards
       i_locker_tamper := 10; //This will force all guards to attack

       set_local_var(LVAR_Locked, STATE_INACTIVE);              // Door is unlocked
       obj_unlock(self_obj);                                    // engine unlock door

       if (source_obj == dude_obj) then begin
           display_msg(mstr(170));
       end

       else begin
           display_msg(obj_name(source_obj)+mstr(173));
       end

       if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
           set_local_var(LVAR_Gave_Locks_XP,1);
           give_xp(Lockpick_Exp);
       end
   end

   else if (is_critical(Locks_Roll)) then begin
       jam_lock(self_obj);

       if (source_obj == dude_obj) then begin
           display_msg(mstr(171));
       end

       else begin
           display_msg(obj_name(source_obj)+mstr(174));
       end
   end

   else begin
       if (source_obj == dude_obj) then begin
           display_msg(mstr(172));
       end

       else begin
           display_msg(obj_name(source_obj)+mstr(175));
       end
   end
end

