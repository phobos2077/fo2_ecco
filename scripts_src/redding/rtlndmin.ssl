/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Wood Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "rtlndmin"
#include "../headers/define.h"
#include "../headers/redwame.h"

#define NAME                    SCRIPT_SPRTRP0
#define CUR_SCRIPT              SCRIPT_RTLNDMIN

#include "../headers/command.h"

// Tile Nums for the Trap
#define LANDMINE_TILE1          (23287)  //was 22387 - killap
#define LANDMINE_TILE2          (23491)
#define LANDMINE_TILE3          (23091)
#define LANDMINE_TILE4          (22491)
#define LANDMINE_TILE5          (23498)
#define LANDMINE_TILE6          (24303)
#define LANDMINE_TILE7          (25107)
#define LANDMINE_TILE8          (26313)
#define LANDMINE_TILE9          (20910)
#define LANDMINE_TILE10         (17702) //was 17503 - killap
#define LANDMINE_TILE11         (16100)
#define LANDMINE_TILE12         (13898)
#define LANDMINE_TILE13         (18667)
#define LANDMINE_TILE14         (17259)
#define LANDMINE_TILE15         (26111)

// Trap Information
#define TRAPS_BONUS                     (-30)
#define PERCEPTION_BONUS                (-4)
#define AGILITY_BONUS                   (0)
#define DIST_BONUS                      (2)

#define TRAP_EXP                        EXP_TRAPS_NEG_30
#define TRAP_TIME                       (0)             // In Seconds

#define MIN_DMG                         (40)
#define MAX_DMG                         (60)
#define DAMAGE_TYPE                     DMG_explosive_dam

#define MINE_ACTIVE                     (0)
#define MINE_DISARMED                   (1)
#define MINE_EXPLODED                   (2)

// Trap Art
#define ART_TRAP_VISIBLE                (PID_CAVE_FLOOR_TRAP_VISIBLE)
#define ART_TRAP_EXPLODED               (PID_CAVE_FLOOR_TRAP_DEPRESSED) // edit by killap - swapped with the one below
#define ART_TRAP_DISARMED               (PID_CAVE_FLOOR_TRAP_DISARMED)  // edit by killap - swapped with the one above

procedure Which_Tile_Var(variable x) begin
   if (cur_map_index == MAP_REDDING_WANAMINGO_ENT) then begin
      if (x == LANDMINE_TILE1) then
         return MVAR_Landmine1;
      else if (x == LANDMINE_TILE2) then
         return MVAR_Landmine2;
      else if (x == LANDMINE_TILE3) then
         return MVAR_Landmine3;
      else if (x == LANDMINE_TILE4) then
         return MVAR_Landmine4;
      else if (x == LANDMINE_TILE5) then
         return MVAR_Landmine5;
      else if (x == LANDMINE_TILE6) then
         return MVAR_Landmine6;
      else if (x == LANDMINE_TILE7) then
         return MVAR_Landmine7;
      else if (x == LANDMINE_TILE8) then
         return MVAR_Landmine8;
      else if (x == LANDMINE_TILE9) then
         return MVAR_Landmine9;
      else if (x == LANDMINE_TILE10) then
         return MVAR_Landmine10;
      else if (x == LANDMINE_TILE11) then
         return MVAR_Landmine11;
      else if (x == LANDMINE_TILE12) then
         return MVAR_Landmine12;
      else if (x == LANDMINE_TILE13) then
         return MVAR_Landmine13;
      else if (x == LANDMINE_TILE14) then
         return MVAR_Landmine14;
      else if (x == LANDMINE_TILE15) then
         return MVAR_Landmine15;
   end
   return 0;
end

procedure start;
procedure spatial_p_proc;
procedure use_skill_on_p_proc;
procedure Check_Active(variable Mine_Var);
procedure Trap_Detection;


// Local Vars
#define LVAR_Trap_Found                 (0)
#define LVAR_Trap_Exploded              (1)
#define LVAR_Gave_Exp                   (2)
#define LVAR_Got_Perception_Roll        (3)
#define LVAR_Extended_Look              (4)
#define LVAR_Mine_Status                (5) // pbs: allow to use mine in other places

procedure start begin
end

procedure spatial_p_proc begin
   if (global_var(GVAR_FROG_MORTON) != 0) then begin
       call Trap_Detection;

       if (tile_distance_objs(self_obj,source_obj) == 0) then begin
           call Check_Active(Which_Tile_Var(self_tile));
       end
   end
end

procedure mine_status(variable mvar) begin
   if (mvar > 0) then 
      return map_var(mvar);

   if (local_var(LVAR_Mine_Status) > 0) then
      return local_var(LVAR_Mine_Status);

   if (tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_DISARMED)) then
      return MINE_DISARMED;

   if (tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_EXPLODED)) then
      return MINE_EXPLODED;

   return 0;
end

procedure set_mine_status(variable mvar, variable val) begin
   if (mvar > 0) then
      set_map_var(mvar, val);
   else
      set_local_var(LVAR_Mine_Status, val);
end

/*
procedure timed_event_p_proc begin
   display_msg(string_format("%d timed event %x", self_obj, fixed_param));
   if ((fixed_param / 0x1000000) == 1) then
      set_local_var(LVAR_Mine_Status, fixed_param);
end
*/

procedure use_skill_on_p_proc begin
   variable Traps_Roll;
   variable Trap;
   variable Landmine_Var;

   if (action_being_used == SKILL_TRAPS) then begin
       Landmine_Var := Which_Tile_Var(self_tile);
       if (mine_status(Landmine_Var) == MINE_ACTIVE) then begin
           script_overrides;
           Traps_Roll:=roll_vs_skill(source_obj,SKILL_TRAPS,TRAPS_BONUS);

           if (is_success(Traps_Roll)) then begin
               //Trap:=create_object_sid(ART_TRAP_DISARMED,tile_num(self_obj),elevation(self_obj),CUR_SCRIPT);
               Trap:=create_object(ART_TRAP_DISARMED,self_tile,self_elevation); // edit by killap
               call set_mine_status(Landmine_Var, MINE_DISARMED);
               if (source_obj == dude_obj) then
                   display_msg(g_mstr(102));
               else
                   display_msg(obj_name(source_obj)+g_mstr(105));
               if (local_var(LVAR_Gave_Exp) == 0) then begin
                   set_local_var(LVAR_Gave_Exp,1);
                   give_xp(TRAP_EXP);
               end
           end

           else if (is_critical(Traps_Roll)) then begin
               call set_mine_status(Landmine_Var, MINE_EXPLODED);
               if (source_obj == dude_obj) then
                  display_msg(g_mstr(104));
               else
                  display_msg(obj_name(source_obj)+g_mstr(107));
               //for some reason this code segment causes issues - killap
               /*if (tile_contains_obj_pid(self_tile,self_elevation,ART_TRAP_VISIBLE)) then begin
                   ndebug("Destroying Visible Trap");
                   destroy_object(tile_contains_pid_obj(self_tile,self_elevation,ART_TRAP_VISIBLE));
                   ndebug("Destroyed Visible Trap");
               end*/
               //Trap:=create_object_sid(ART_TRAP_EXPLODED,tile_num(self_obj),elevation(self_obj),CUR_SCRIPT);
               Trap:=create_object(ART_TRAP_EXPLODED,self_tile,self_elevation); // edit by killap
               explosion(self_tile,self_elevation,random(MIN_DMG,MAX_DMG));
           end

           else begin
               if (source_obj == dude_obj) then
                   display_msg(g_mstr(103));
               else
                   display_msg(obj_name(source_obj)+g_mstr(106));
           end
      end
   end
end

procedure Check_Active(variable Mine_Var) begin
   variable Trap;

   if (mine_status(Mine_Var) == MINE_ACTIVE) then begin
       if (tile_contains_obj_pid(self_tile,self_elevation,ART_TRAP_VISIBLE)) then begin
           ndebug("Destroying Visible Trap");
           destroy_object(tile_contains_pid_obj(self_tile,self_elevation,ART_TRAP_VISIBLE));
           ndebug("Destroyed Visible Trap");
       end
       Trap:=create_object(ART_TRAP_EXPLODED,self_tile,self_elevation);
       //if ((source_obj == dude_obj) and (has_trait(TRAIT_PERK,dude_obj,PERK_light_step_perk)) and (is_success(do_check(dude_obj,STAT_ag,-3)))) then
       if ((source_obj == dude_obj) and (dude_perk(PERK_light_step_perk)) and (random(0,1) == 1)) then //added by killap
           ndebug("Used Light Step.");
       else begin
          if (combat_is_initialized) then
             play_sfx("WHN1XXX1");
          critter_dmg(source_obj,random(MIN_DMG,MAX_DMG),(DMG_normal_dam BWOR DMG_BYPASS_ARMOR BWOR DMG_NOANIMATE));
          explosion(self_tile,self_elevation,1);
       end

       call set_mine_status(Mine_Var, MINE_EXPLODED);
   end
end

procedure Trap_Detection begin
   variable Range;
   variable Range_Mod;
   variable Detection_Roll;
   variable Trap;

   if (obj_type(source_obj) == 1) then begin

       Range:=get_perception(source_obj) + PERCEPTION_BONUS;
       Range_Mod:=Range - (tile_distance_objs(self_obj,source_obj)*DIST_BONUS);

       if ((tile_distance_objs(self_obj,source_obj) <= Range) and
           (local_var(LVAR_Trap_Found) == 0) and (local_var(LVAR_Trap_Exploded) == 0)) then begin

           if (Range_Mod > PERCEPTION_BONUS) then
               Range_Mod:= PERCEPTION_BONUS;

           Detection_Roll = roll_vs_stat(source_obj, STAT_pe, Range_Mod);

           if (is_success(Detection_Roll)) then begin

               set_local_var(LVAR_Trap_Found,1);
               reg_anim_clear(source_obj);
               Trap:=create_object_sid(ART_TRAP_VISIBLE,self_tile,self_elevation,CUR_SCRIPT);

               if (is_critical(Detection_Roll)) then begin
                   if (source_obj == dude_obj) then
                       display_msg(mstr(100));
                   else if ((proto_data(obj_pid(source_obj),cr_body_type) == CR_BODY_BIPED) and (obj_can_see_obj(source_obj,dude_obj))) then
                       display_msg(obj_name(source_obj)+mstr(101));
               end

               else begin
                   if (source_obj == dude_obj) then
                       display_msg(mstr(102));
                   else if ((proto_data(obj_pid(source_obj),cr_body_type) == CR_BODY_BIPED) and (obj_can_see_obj(source_obj,dude_obj))) then
                       display_msg(obj_name(source_obj)+mstr(103));
               end
           end
       end
   end
end
