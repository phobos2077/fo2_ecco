/*
  ***   Script conwerted to Interplay format by Fallout Script Edytor (by Jargo)  ***
*/

#include "..\HEADERS\define.h"
//#include "..\HEADERS\<TownMapName.h>"

#define NAME                    SCRIPT_EPAI7          //Script name from scripts.h
#define TOWN_REP_VAR            GVAR_TOWN_REP_           //Global variable name for this Town

#include "..\HEADERS\command.h"
#include "..\HEADERS\ModReact.h"
#include "..\HEADERS\partybkg.h"

#define LVAR_Herebefore                 (4)
#define LVAR_Jammed                     (5)
#define LVAR_Personal_Enemy             (6)

#define is_jammed_tile(x)     (x == 16882 or x == 31474)

procedure start;
procedure description_p_proc;
procedure look_at_p_proc;
procedure use_obj_on_p_proc;
procedure use_p_proc;
procedure pickup_p_proc;
procedure destroy_p_proc;
procedure drp_proc;
procedure Node999;

procedure start
begin
  obj_lock(self_obj);
end

procedure use_skill_on_p_proc begin

  if (action_being_used == SKILL_LOCKPICK) then begin
   script_overrides;
   if (local_var(LVAR_Jammed) > 0) then
      display_mstr(114);
   else
      display_mstr(200);
  end else if (action_being_used == SKILL_REPAIR and (local_var(LVAR_Jammed) > 0)) then begin
   script_overrides;
   if (local_var(LVAR_Jammed) == 2) then begin
     display_msg(message_str(NAME, 111));
   end else if (skill_success(source_obj, SKILL_REPAIR, -60)) then begin
     display_msg(message_str(NAME, 111));
     set_local_var(LVAR_Jammed, 2);
   end else begin
     display_msg(message_str(NAME, 113));
   end
  end
end

procedure description_p_proc
begin
  script_overrides;
  display_msg(message_str(NAME, 104));
end

procedure look_at_p_proc
begin
  script_overrides;
  display_msg(message_str(NAME, 103));
end

procedure use_obj_on_p_proc
begin
  variable LVar1 := 0;
  reg_anim_clear(source_obj);
  LVar1 := obj_pid(obj_being_used_with);
  if (local_var(LVAR_Herebefore) == 1) then
    display_msg(message_str(NAME, 102));
  if ((LVar1 == PID_SECURITY_ROOMS_KEY_CARD) and (local_var(LVAR_Herebefore) != 1)) then
  begin
    script_overrides;
    if (is_jammed_tile(self_tile)) then begin
       set_local_var(LVAR_Jammed, 1);
    end else begin
       obj_unlock(self_obj);
    end
    display_msg(message_str(NAME, 101));
    set_local_var(LVAR_Herebefore, 1);
    
  end else
  if (local_var(LVAR_Jammed) > 0) then
  begin
    if (LVar1 == PID_ELEC_LOCKPICK_MKII) then begin
       script_overrides;
       if (local_var(LVAR_Jammed) == 2) then begin
          obj_unlock(self_obj);
          set_local_var(LVAR_Jammed, 0);
          display_msg(message_str(NAME, 112));
          give_xp(EXP_LOCKPICK_NORMAL);
       end else begin
          display_mstr(116);
       end
    end else if (LVar1 == PID_ELECTRONIC_LOCKPICKS) then begin
       script_overrides;
       display_mstr(115);
    end
  end
end

procedure use_p_proc
begin
  if (source_obj == dude_obj) then
  begin
    if (local_var(LVAR_Herebefore) == 0) then
    begin
      script_overrides;
      display_msg(message_str(NAME, 100));
    end else if (local_var(LVAR_Jammed) > 0) then begin
      script_overrides;
      display_msg(message_str(NAME, 110));
    end
  end
end

procedure pickup_p_proc
begin
end

procedure destroy_p_proc
begin
end

procedure drp_proc
begin
end

procedure Node999
begin
end