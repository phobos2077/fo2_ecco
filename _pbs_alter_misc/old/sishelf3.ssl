variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable tmp_gen_rep;
variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

#include "stock.h"

procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure Look_Traps_And_Locks;
procedure Look_Traps;
procedure Look_Locks;
procedure Skill_Disarm_Traps;
procedure Disarm_Traps;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Set_Trap;
procedure Pry_Door;
procedure Damage_Critter;

import variable buster_obj;
import variable book_obj3;
import variable book_obj_look;

variable Locks_Roll;
variable Traps_Roll;
variable Book_Annoy_Count;


procedure checkPartyMembersNearDoor
begin
   if (party_member_obj(16777278) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777376) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777377) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777305) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777313) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777323) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777352) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777378) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777368) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777379) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777380) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777295) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777381) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777407) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777411) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777412) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777413) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777481) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777558) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777600) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777718) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777718)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777719) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777719)) <= 5) then begin
         return 1;
      end
   end
   if (party_member_obj(16777720) != 0) then begin
      if (tile_distance_objs(self_obj, party_member_obj(16777720)) <= 5) then begin
         return 1;
      end
   end
   return 0;
end

procedure start
begin
   book_obj3 := self_obj;
end

procedure use_p_proc
begin
   if (buster_obj) then begin
      script_overrides;
      book_obj_look := 3;
   end
end

procedure look_at_p_proc
begin
   script_overrides;
   display_msg(message_str(255, 100));
end

procedure description_p_proc
begin
   script_overrides;
   display_msg(message_str(255, 101));
end

procedure use_skill_on_p_proc
begin
   variable LVar0 := 0;
   LVar0 := action_being_used;
   if (LVar0 == 11) then begin
      script_overrides;
      if (local_var(1) == 0) then begin
         call Skill_Disarm_Traps;
      end
      else begin
         if (source_obj == dude_obj) then begin
            display_msg(message_str(255, 195));
         end
         else begin
            display_msg(obj_name(source_obj) + message_str(255, 200));
         end
      end
   end
   else begin
      if (buster_obj) then begin
         if (not(is_success(roll_vs_skill(dude_obj, LVar0, -35)))) then begin
            script_overrides;
            if (Book_Annoy_Count < 2) then begin
               if (Book_Annoy_Count == (2 - 1)) then begin
                  float_msg(buster_obj, message_str(255, 207), 2);
               end
               else begin
                  float_msg(buster_obj, message_str(255, 208), 2);
               end
            end
            else begin
               book_obj_look := 4;
            end
            Book_Annoy_Count := Book_Annoy_Count + 1;
         end
      end
   end
end

procedure use_obj_on_p_proc
begin
   variable LVar0 := 0;
   LVar0 := obj_pid(obj_being_used_with);
   if ((LVar0 == 51) or (LVar0 == 85)) then begin
      script_overrides;
      if (buster_obj) then begin
         float_msg(buster_obj, message_str(255, 206), 2);
         book_obj_look := 4;
      end
   end
   else begin
      if (buster_obj) then begin
         script_overrides;
         if (Book_Annoy_Count < 2) then begin
            if (Book_Annoy_Count == (2 - 1)) then begin
               float_msg(buster_obj, message_str(255, 207), -2);
            end
            else begin
               float_msg(buster_obj, message_str(255, 208), 2);
            end
         end
         else begin
            book_obj_look := 4;
         end
         Book_Annoy_Count := Book_Annoy_Count + 1;
      end
   end
end

procedure damage_p_proc
begin
end

procedure map_enter_p_proc
begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   if (buster_obj and (buster_obj != -1)) then begin
      if ((game_time < 0) and (local_var(9) == 0)) then begin
         set_local_var(7, game_time - 1);
         set_local_var(9, 1);
      end
      if (local_var(7) < game_time) then begin
         LVar0 := create_object_sid(128, 5, 0, -1);
         if (obj_is_carrying_obj_pid(self_obj, 479) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 479);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 479) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 479);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 356) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 356);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 377) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 377);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 366) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 366);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 446) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 446);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 492) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 492);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 288) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 288);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 253) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 253);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 254) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 254);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 266) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 266);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 267) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 267);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 258) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 258);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 255) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 255);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 256) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 256);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 257) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 257);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 96) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 96);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 97) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 97);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 99) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 99);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 223) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 223);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 252) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 252);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 298) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 298);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 302) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 302);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 303) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 303);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 305) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 305);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 306) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 306);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 307) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 307);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 335) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 335);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 336) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 336);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 337) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 337);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 338) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 338);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 339) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 339);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 340) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 340);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 341) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 341);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 414) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 414);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 422) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 422);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 431);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 431);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 432) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 432);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 431);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 447) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 447);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 448) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 448);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 449) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 449);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 456) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 456);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 468) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 468);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 471) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 471);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 476) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 476);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 488) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 488);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         if (obj_is_carrying_obj_pid(self_obj, 495) > 0) then begin
            LVar1 := obj_carrying_pid_obj(self_obj, 495);
            rm_obj_from_inven(self_obj, LVar1);
            add_obj_to_inven(LVar0, LVar1);
         end
         global_temp := create_object_sid(128, 0, 0, -1);
         move_obj_inven_to_obj(self_obj, global_temp);
         destroy_object(global_temp);
         
         check_restock_item(PID_LEATHER_JACKET, 1, 3, 100)
         check_restock_item(PID_LEATHER_ARMOR, 1, 3, 100)
         check_restock_item(PID_METAL_ARMOR, 1, 1, 100)
         check_restock_item(PID_LOCKPICKS, 1, 1, 100)
         check_restock_item(PID_ROPE, 1, 5, 100)
      
         check_restock_item(PID_DYNAMITE, 1, 1, 40)
   
         check_restock_item(PID_METAL_ARMOR_MK_II, 3, 5, 30)
         check_restock_item(PID_GUNS_AND_BULLETS, 1, 1, 30)
   
         check_restock_item(PID_EXP_LOCKPICK_SET, 1, 4, 20)
         check_restock_item(PID_DECK_OF_TRAGIC_CARDS, 1, 1, 20)
   
         check_restock_item(PID_CURED_LEATHER_ARMOR, 1, 1, 10)
   
         check_restock_item(PID_223_FMJ, 2, 5, 100)
         check_restock_item(PID_7_62MM_AMMO, 3, 8, 100)
         check_restock_item(PID_2MM_EC_AMMO, 1, 5, 25)
         check_restock_item(PID_HN_AP_NEEDLER_CARTRIDGE, 2, 5, 100)
         
         check_restock_item(PID_PBS_50_AMMO, 1, 3, 50)
         check_restock_item(PID_FRAG_GRENADE, 2, 3, 50)
         
         set_local_var(7, (random(1, 4) * (24 * (60 * (60 * 10)))) + game_time);
         move_obj_inven_to_obj(LVar0, self_obj);
         destroy_object(LVar0);
      end
   end
end

procedure map_update_p_proc
begin
end

procedure Look_Traps_And_Locks
begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   variable LVar2 := 0;
   LVar0 := do_check(dude_obj, 1, 0);
   LVar1 := roll_vs_skill(dude_obj, 11, 0);
   LVar2 := roll_vs_skill(dude_obj, 9, 0);
   if (is_success(LVar0)) then begin
      if (is_critical(LVar0)) then begin
         if (is_success(LVar1)) then begin
            set_local_var(2, 1);
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 102));
                  end
                  else begin
                     display_msg(message_str(255, 103));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 104));
                  end
                  else begin
                     display_msg(message_str(255, 105));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 106));
                  end
                  else begin
                     display_msg(message_str(255, 107));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 108));
                  end
                  else begin
                     display_msg(message_str(255, 109));
                  end
               end
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 110));
                  end
                  else begin
                     display_msg(message_str(255, 111));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 112));
                  end
                  else begin
                     display_msg(message_str(255, 113));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 114));
                  end
                  else begin
                     display_msg(message_str(255, 115));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 116));
                  end
                  else begin
                     display_msg(message_str(255, 117));
                  end
               end
            end
         end
      end
      else begin
         if (is_success(LVar1)) then begin
            set_local_var(2, 1);
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 118));
                  end
                  else begin
                     display_msg(message_str(255, 119));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 120));
                  end
                  else begin
                     display_msg(message_str(255, 121));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 122));
                  end
                  else begin
                     display_msg(message_str(255, 123));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 124));
                  end
                  else begin
                     display_msg(message_str(255, 125));
                  end
               end
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 126));
                  end
                  else begin
                     display_msg(message_str(255, 127));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 128));
                  end
                  else begin
                     display_msg(message_str(255, 129));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 130));
                  end
                  else begin
                     display_msg(message_str(255, 131));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 132));
                  end
                  else begin
                     display_msg(message_str(255, 133));
                  end
               end
            end
         end
      end
   end
   else begin
      if (is_critical(LVar0)) then begin
         if (is_success(LVar1)) then begin
            set_local_var(2, 1);
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 134));
                  end
                  else begin
                     display_msg(message_str(255, 135));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 136));
                  end
                  else begin
                     display_msg(message_str(255, 137));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 138));
                  end
                  else begin
                     display_msg(message_str(255, 139));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 140));
                  end
                  else begin
                     display_msg(message_str(255, 141));
                  end
               end
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 142));
                  end
                  else begin
                     display_msg(message_str(255, 143));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 144));
                  end
                  else begin
                     display_msg(message_str(255, 145));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 146));
                  end
                  else begin
                     display_msg(message_str(255, 147));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 148));
                  end
                  else begin
                     display_msg(message_str(255, 149));
                  end
               end
            end
         end
      end
      else begin
         if (is_success(LVar1)) then begin
            set_local_var(2, 1);
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 150));
                  end
                  else begin
                     display_msg(message_str(255, 151));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 152));
                  end
                  else begin
                     display_msg(message_str(255, 153));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 154));
                  end
                  else begin
                     display_msg(message_str(255, 155));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 156));
                  end
                  else begin
                     display_msg(message_str(255, 157));
                  end
               end
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 158));
                  end
                  else begin
                     display_msg(message_str(255, 159));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 160));
                  end
                  else begin
                     display_msg(message_str(255, 161));
                  end
               end
            end
            else begin
               if (is_success(LVar2)) then begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 162));
                  end
                  else begin
                     display_msg(message_str(255, 163));
                  end
               end
               else begin
                  if (is_critical(LVar2)) then begin
                     display_msg(message_str(255, 164));
                  end
                  else begin
                     display_msg(message_str(255, 165));
                  end
               end
            end
         end
      end
   end
end

procedure Look_Traps
begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   LVar0 := do_check(dude_obj, 1, 0);
   LVar1 := roll_vs_skill(dude_obj, 11, 0);
   if (is_success(LVar0)) then begin
      if (is_critical(LVar0)) then begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 104));
            end
            else begin
               display_msg(message_str(255, 108));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 112));
            end
            else begin
               display_msg(message_str(255, 116));
            end
         end
      end
      else begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 120));
            end
            else begin
               display_msg(message_str(255, 124));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 128));
            end
            else begin
               display_msg(message_str(255, 132));
            end
         end
      end
   end
   else begin
      if (is_critical(LVar0)) then begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 136));
            end
            else begin
               display_msg(message_str(255, 140));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 144));
            end
            else begin
               display_msg(message_str(255, 148));
            end
         end
      end
      else begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 152));
            end
            else begin
               display_msg(message_str(255, 156));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 160));
            end
            else begin
               display_msg(message_str(255, 164));
            end
         end
      end
   end
end

procedure Look_Locks
begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   LVar0 := do_check(dude_obj, 1, 0);
   LVar1 := roll_vs_skill(dude_obj, 9, 0);
   if (is_success(LVar0)) then begin
      if (is_critical(LVar0)) then begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 114));
            end
            else begin
               display_msg(message_str(255, 115));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 116));
            end
            else begin
               display_msg(message_str(255, 117));
            end
         end
      end
      else begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 130));
            end
            else begin
               display_msg(message_str(255, 131));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 132));
            end
            else begin
               display_msg(message_str(255, 133));
            end
         end
      end
   end
   else begin
      if (is_critical(LVar0)) then begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 146));
            end
            else begin
               display_msg(message_str(255, 147));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 148));
            end
            else begin
               display_msg(message_str(255, 149));
            end
         end
      end
      else begin
         if (is_success(LVar1)) then begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 162));
            end
            else begin
               display_msg(message_str(255, 163));
            end
         end
         else begin
            if (is_critical(LVar1)) then begin
               display_msg(message_str(255, 164));
            end
            else begin
               display_msg(message_str(255, 165));
            end
         end
      end
   end
end

procedure Skill_Disarm_Traps
begin
   Traps_Roll := roll_vs_skill(source_obj, 11, 0);
   call Disarm_Traps;
end

procedure Disarm_Traps
begin
   if (is_success(Traps_Roll)) then begin
      if (local_var(2) == 0) then begin
         set_local_var(2, 1);
         if (source_obj == dude_obj) then begin
            display_msg(message_str(255, 194));
         end
         else begin
            display_msg(message_str(255, 199));
         end
         if (local_var(6) == 0) then begin
            set_local_var(6, 1);
            give_exp_points(25);
            display_msg(message_str(14, 100) + 25 + message_str(14, 101));
         end
      end
      else begin
         set_local_var(1, 1);
         if (source_obj == dude_obj) then begin
            display_msg(message_str(255, 196));
         end
         else begin
            display_msg(obj_name(source_obj) + message_str(255, 201));
         end
      end
   end
   else begin
      if (is_critical(Traps_Roll)) then begin
         call Damage_Critter;
      end
      else begin
         if (local_var(2) == 0) then begin
            if (source_obj == dude_obj) then begin
               display_msg(message_str(255, 195));
            end
            else begin
               display_msg(obj_name(source_obj) + message_str(255, 200));
            end
         end
         else begin
            display_msg(obj_name(source_obj) + message_str(255, 202));
         end
      end
   end
end

procedure Unlock_Lock
begin
   Locks_Roll := roll_vs_skill(source_obj, 9, -20);
   call Lockpick_Door;
end

procedure Lockpick_Lock
begin
   Locks_Roll := roll_vs_skill(source_obj, 9, 0);
   call Lockpick_Door;
end

procedure Lockpick_Door
begin
   if (is_success(Locks_Roll)) then begin
      set_local_var(0, 1);
      obj_unlock(self_obj);
      if (source_obj == dude_obj) then begin
         display_msg(message_str(255, 170));
      end
      else begin
         display_msg(obj_name(source_obj) + message_str(255, 173));
      end
      if (local_var(5) == 0) then begin
         set_local_var(5, 1);
         give_exp_points(25);
         display_msg(message_str(14, 100) + 25 + message_str(14, 101));
      end
   end
   else begin
      if (is_critical(Locks_Roll)) then begin
         jam_lock(self_obj);
         if (source_obj == dude_obj) then begin
            display_msg(message_str(255, 171));
         end
         else begin
            display_msg(obj_name(source_obj) + message_str(255, 174));
         end
      end
      else begin
         if (source_obj == dude_obj) then begin
            display_msg(message_str(255, 172));
         end
         else begin
            display_msg(obj_name(source_obj) + message_str(255, 175));
         end
      end
   end
end

procedure Lock_Door
begin
   if (is_success(Locks_Roll)) then begin
      set_local_var(0, 0);
      obj_lock(self_obj);
      if (source_obj == dude_obj) then begin
         display_msg(message_str(255, 189));
      end
      else begin
         display_msg(obj_name(source_obj) + message_str(255, 191));
      end
      if (local_var(5) == 0) then begin
         set_local_var(5, 1);
         give_exp_points(25);
         display_msg(message_str(14, 100) + 25 + message_str(14, 101));
      end
   end
   else begin
      if (source_obj == dude_obj) then begin
         display_msg(message_str(255, 190));
      end
      else begin
         display_msg(obj_name(source_obj) + message_str(255, 192));
      end
   end
end

procedure Set_Lock
begin
   Locks_Roll := roll_vs_skill(source_obj, 9, -20);
   call Lock_Door;
end

procedure Set_Lockpick_Lock
begin
   Locks_Roll := roll_vs_skill(source_obj, 9, 0);
   call Lock_Door;
end

procedure Set_Trap
begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   Traps_Roll := roll_vs_skill(source_obj, 11, -10);
   LVar0 := obj_being_used_with;
   if (obj_is_open(self_obj)) then begin
      script_overrides;
      if (source_obj == dude_obj) then begin
         display_msg(message_str(255, 206));
      end
      else begin
         display_msg(obj_name(source_obj) + message_str(255, 207));
      end
   end
   else begin
      script_overrides;
      LVar1 := rm_mult_objs_from_inven(source_obj, LVar0, 1);
      if (is_success(Traps_Roll)) then begin
         set_local_var(1, 0);
         if (source_obj == dude_obj) then begin
            display_msg(message_str(255, 208));
         end
         else begin
            display_msg(obj_name(source_obj) + message_str(255, 210));
         end
      end
      else begin
         if (is_critical(Traps_Roll)) then begin
            call Damage_Critter;
         end
         else begin
            if (source_obj == dude_obj) then begin
               display_msg(message_str(255, 209));
            end
            else begin
               display_msg(obj_name(source_obj) + message_str(255, 211));
            end
         end
      end
   end
end

procedure Pry_Door
begin
   variable LVar0 := 0;
   LVar0 := do_check(source_obj, 0, 0);
   if (is_success(LVar0)) then begin
      set_local_var(0, 1);
      obj_unlock(self_obj);
      if (source_obj == dude_obj) then begin
         display_msg(message_str(255, 176));
      end
      else begin
         display_msg(message_str(255, 181));
      end
   end
   else begin
      if (is_critical(LVar0)) then begin
         critter_dmg(source_obj, 2, 0 bwor 256);
         if (source_obj == dude_obj) then begin
            if (2 == 1) then begin
               display_msg(message_str(255, 177));
            end
            else begin
               display_msg(message_str(255, 178) + 2 + message_str(255, 179));
            end
         end
         else begin
            if (get_critter_stat(source_obj, 34) == 0) then begin
               if (2 == 1) then begin
                  display_msg(message_str(255, 182));
               end
               else begin
                  display_msg(message_str(255, 183) + 2 + message_str(255, 184));
               end
            end
            else begin
               if (2 == 1) then begin
                  display_msg(message_str(255, 186));
               end
               else begin
                  display_msg(message_str(255, 187) + 2 + message_str(255, 188));
               end
            end
         end
      end
      else begin
         if (source_obj == dude_obj) then begin
            display_msg(message_str(255, 180));
         end
         else begin
            display_msg(message_str(255, 185));
         end
      end
   end
end

procedure Damage_Critter
begin
   variable LVar0 := 0;
   LVar0 := random(10, 20);
   if (source_obj == dude_obj) then begin
      critter_dmg(dude_obj, LVar0, 6 bwor 256);
      display_msg(message_str(255, 166) + LVar0 + message_str(255, 167));
   end
   else begin
      critter_dmg(source_obj, LVar0, 6 bwor 256);
      display_msg(obj_name(source_obj) + message_str(255, 168) + LVar0 + message_str(255, 169));
   end
   set_local_var(1, 1);
end

