/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Dorothy
        Location: NCR 1
        Description: Power plant mechanic

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#include "..\headers\define.h"
#include "..\headers\ncr1.h"

#define NAME                    SCRIPT_SCDOROTH
#define TOWN_REP_VAR         GVAR_TOWN_REP_NCR

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

#include "..\headers\ncr.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure walkToPos;
procedure getTimeBit;
procedure checkHere;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool
#define WARP_PLANT 1
#define WARP_PARTS 2
#define FIX_GENERATOR 3
#define WARP_GENERATOR 4

#define CHECK_PLANT_STATE 1
#define CHECK_NODE1_RANGE 2
#define TIMER_FIX_OBJ     3

#define TIME_AT_PLANT T8HRm(bit_8, bit_9, bit_10, bit_11, bit_12, bit_13, bit_14, bit_15)

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Doing_power_plant          (7)
#define LVAR_Warped_to_fix              (8)


/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
import variable i_jack_obj;
import variable i_toto_obj;

/* Local variables which do not need to be saved between map changes. */
variable Only_Once := 0;
variable response  := 0;
variable Node14Rep := 0;
variable Node19Rep := 0;
variable waitTime  := 0;

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == CHECK_PLANT_STATE) then begin
      if (global_var(GVAR_NCR_POWERPLANT) == PP_DAMAGED and i_jack_obj == -1) then begin
         if (waitTime == 0) then begin
            waitTime := 1;
            add_timer_event(self_obj, game_ticks(1), CHECK_PLANT_STATE);
         end else begin
            if (obj_can_see_obj(dude_obj, self_obj) and not is_critter_dead(dude_obj)) then begin
               rm_fixed_timer_event(self_obj, CHECK_PLANT_STATE);
               dialogue_system_enter;
            end else
               call walkToPos;
         end
      end else if (global_var(GVAR_NCR_POWERPLANT) != PP_DONE) then begin
         add_timer_event(self_obj, game_ticks(1), CHECK_PLANT_STATE);
      end
   end else if (fixed_param == CHECK_NODE1_RANGE) then begin
      if (i_jack_obj != -1) then begin
         if (tile_distance_objs(self_obj, dude_obj) <= 5 and self_visible) then begin
            if (tile_num(i_jack_obj) == POS_POWER) then begin
               dialogue_system_enter;
            end
         end else begin
            add_timer_event(self_obj, 1, CHECK_NODE1_RANGE);
         end
      end
   end else if (fixed_param == TIMER_FIX_OBJ) then begin
   end
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_NCR);
   critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET,AI_TOUGH_CITIZEN);

   add_timer_event(self_obj, game_ticks(1), CHECK_PLANT_STATE);
   if (i_jack_obj != -1 and jack_state != JACK_SURRENDER) then begin
      add_timer_event(self_obj, 1, CHECK_NODE1_RANGE);
   end

   if (is_loading_game == FALSE) then begin
      call checkHere;
   end

end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (obj_can_see_obj(self_obj,dude_obj))) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

   if (not combat_is_initialized) then begin
      if (i_toto_obj != -1) then begin
         if (not anim_busy(i_toto_obj)) then begin
            if (tile_distance_objs(self_obj, i_toto_obj) > 3) then begin
               reg_anim_clear(i_toto_obj);
               reg_anim_begin();
               animate_move_obj_to_tile(i_toto_obj, tile_num_in_direction(self_tile, Random(1, 2), Random(0, 5)), 1);
               reg_anim_end();
            end
         end
      end
   end

   if (local_var(LVAR_Warped_to_fix) == 1 and self_tile != DOROTHY_FIX_POS) then begin
      if (not anim_busy(self_obj)) then
         call WalkToPos;
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
      SET_NCR_ENEMY;
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_INTOLERANT;
   Karma_Perception:=KARMA_PERCEPTION2;

   CheckKarma;

   GetReaction;

   if (jack_state == JACK_SURRENDER) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node020;
      gSay_End;
      end_dialogue;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_ACCEPT) then begin
      call Node022;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_REFUSED) then begin
      call Node023;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_DAMAGED) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node006;
      gSay_End;
      end_dialogue;
      if (local_var(LVAR_Warped_to_fix) == 0) then
         call walkToPos;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_DEFUSED) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node015;
      gSay_End;
      end_dialogue;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_DESTROYED) then begin
      call Node014;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_REPAIRED) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node010;
      gSay_End;
      end_dialogue;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_REPAIR_FAILED) then begin
      call Node021;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_DONE) then begin
      call Node013;
   end else if (global_var(GVAR_NCR_POWERPLANT) == PP_MURDER) then begin
      call Node018;
   end else if (i_jack_obj != -1) then begin
      if (tile_num(i_jack_obj) == POS_POWER) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
         set_jack_state(JACK_CRAZY);
         if (response == WARP_GENERATOR) then begin
            fadeout(1);
            move_to(self_obj, DOROTHY_CRAZY_POS, 0);
            move_to(dude_obj, DUDE_CRAZY_POS, 0);
            fadein(1);
         end
      end else begin
         call Node019;
      end
   end else if (global_var(GVAR_NCR_POWERPLANT) == 0) then begin
      call Node019;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   Reply(103);
   NLowOption(104, Node002);
   NOption(105, Node003, 4);
end

procedure NodeWarpA begin
   set_global_var(GVAR_NCR_POWERPLANT, PP_ACCEPT);
   response := WARP_GENERATOR;
end

procedure NodeWarpB begin
   set_global_var(GVAR_NCR_POWERPLANT, PP_REFUSED);
end

procedure Node002 begin
   Reply(106);
   GOption(107, NodeWarpA, 1);
   BOption(108, NodeWarpB, 1);
end
/*
 */


procedure Node003 begin
   Reply(109);
   GOption(110, NodeWarpA, 4);
   BOption(111, NodeWarpB, 4);
end

procedure Node004 begin
   Reply(112);
   NOption(113, Node005, 4);
   NOption(114, Node999, 4);
end

procedure Node005 begin
   Reply(115);
   ENDOPTION;
end

procedure Node006 begin
   Reply(116);
   NLowOption(117, Node007);
   if (has_skill(dude_obj, SKILL_REPAIR) > 64) then
      NOption(118, Node008, 4);
   NOption(119, Node009, 4);
end

procedure Node007 begin
   ncr_set_global_state(NCR_GENERATOR_COUNT);
   Reply(120);
   ENDOPTION;
end

procedure Node008 begin
   ncr_set_global_state(NCR_GENERATOR_COUNT);
   Reply(121);
   ENDOPTION;
   response := WARP_PARTS;
end

procedure Node009 begin
   Reply(122);
   ENDOPTION;
   response := FIX_GENERATOR;
end

procedure Node010 begin
   Reply(123);
   NLowOption(124, Node011);
   NOption(125, Node012, 4);
end

procedure NodePowerDone begin
   move_obj_inven_to_obj(self_obj, dude_obj);
   add_obj_to_inven(dude_obj, create_object(PID_BIG_BOOK_OF_SCIENCE, self_tile, 0));
   add_obj_to_inven(dude_obj, create_object(PID_FIRST_AID_BOOK, self_tile, 0));

   give_xp(FIX_GENERATOR_POINTS); //killap's fix: changed to "give_xp"
   inc_general_rep(REP_BONUS_FIX_NCR_GENERATOR);
   set_global_var(GVAR_NCR_POWERPLANT, PP_DONE);
   call Node999;
end

procedure Node011 begin
   Reply(126);
   NOption(ENDSTRING, NodePowerDone, 1);
end

procedure Node012 begin
   Reply(127);
   NOption(ENDSTRING, NodePowerDone, 1);
end

procedure Node013 begin
   if (dude_is_male) then
      float_msg(self_obj, mstr(128), FLOAT_MSG_NORMAL);
   else
      float_msg(self_obj, mstr(142), FLOAT_MSG_NORMAL);
end

procedure Node014 begin
   Node14Rep += 1;
   if (Node14Rep == 1) then
      float_msg(self_obj, mstr(129), FLOAT_MSG_NORMAL);
   else
      float_msg(self_obj, mstr(130), FLOAT_MSG_NORMAL);
end

procedure Node015 begin
   Reply(131);
   NOption(132, Node016, 1);
   NOption(133, Node017, 1);
end

procedure NodeMurder begin
   set_global_var(GVAR_NCR_POWERPLANT, PP_MURDER);
   inc_general_rep(REP_BONUS_NCR_KILL_JACK);
   call Node999;
end

procedure NodeMurderButOk begin
   move_obj_inven_to_obj(self_obj, dude_obj);
   add_obj_to_inven(dude_obj, create_object(PID_BIG_BOOK_OF_SCIENCE, self_tile, 0));
   add_obj_to_inven(dude_obj, create_object(PID_FIRST_AID_BOOK, self_tile, 0));

   give_xp(1000); // pbs: lowered from 3000
   // inc_general_rep(REP_BONUS_FIX_NCR_GENERATOR); // no point in huge reputation bonus
   set_global_var(GVAR_NCR_POWERPLANT, PP_DONE);

   call Node999;
end

procedure Node016 begin
   Reply(134);
   NOption(ENDSTRING, NodeMurder, 1);
end

procedure Node017 begin
   Reply(135);
   NOption(ENDSTRING, NodeMurderButOk, 1);
end

procedure Node018 begin
   float_msg(self_obj, mstr(136), FLOAT_MSG_NORMAL);
end

procedure Node019 begin
   Node19Rep += 1;
   if (Node19Rep == 1) then
      float_msg(self_obj, mstr(137), FLOAT_MSG_NORMAL);
   else
      float_msg(self_obj, mstr(138), FLOAT_MSG_NORMAL);
end

procedure Node020 begin
   if (global_var(GVAR_NCR_POWERPLANT) != PP_DONE) then begin
      if (dude_is_male) then
         Reply(mstr(139));
      else
         Reply(mstr(143));
      // pbs: changed node for lower EXP reward in this case (already got enough from the guy)
      NOption(ENDSTRING, NodeMurderButOk, 1);
   end else begin
      Reply(140);
      ENDOPTION;
   end
end

procedure Node021 begin
   float_msg(self_obj, mstr(141), FLOAT_MSG_NORMAL);
end

procedure Node022 begin
   float_msg(self_obj, mstr(144 + Random(0, 2)), FLOAT_MSG_NORMAL);
end

procedure Node023 begin
   float_msg(self_obj, mstr(147 + Random(0, 2)), FLOAT_MSG_RED);
end

procedure walkToPos begin
   if (self_tile != DOROTHY_FIX_POS) then begin
      if (not anim_busy(self_obj)) then begin
         set_local_var(LVAR_Warped_to_fix, 1);
         reg_anim_clear(self_obj);
         reg_anim_begin();
         animate_move_to_tile(DOROTHY_FIX_POS);
         reg_anim_end();
      end
   end
end

procedure checkHere begin
   if (getTimeBit bwand TIME_AT_PLANT) then begin
      if (i_jack_obj != -1 and jack_state != JACK_SURRENDER) then begin
         move_to(self_obj, DOROTHY_JACK_C1, 0);
      end else begin
         move_to(self_obj, DOROTHY_NORM_POS, 0);
      end
      set_obj_visibility(self_obj, OBJ_VIS);
   end else begin
      set_obj_visibility(self_obj, OBJ_INVIS);
      move_to(self_obj, DORTHY_POS_INVIS, 0);
   end
end

procedure getTimeBit begin
   variable time := 0;

   time := game_time_hour;
   if (time >= 100 and time <= 159) then return bit_1;
   if (time >= 200 and time <= 259) then return bit_2;
   if (time >= 300 and time <= 359) then return bit_3;
   if (time >= 400 and time <= 459) then return bit_4;
   if (time >= 500 and time <= 559) then return bit_5;
   if (time >= 600 and time <= 659) then return bit_6;
   if (time >= 700 and time <= 759) then return bit_7;
   if (time >= 800 and time <= 859) then return bit_8;
   if (time >= 900 and time <= 959) then return bit_9;
   if (time >= 1000 and time <= 1059) then return bit_10;
   if (time >= 1100 and time <= 1159) then return bit_11;
   if (time >= 1200 and time <= 1259) then return bit_12;
   if (time >= 1300 and time <= 1359) then return bit_13;
   if (time >= 1400 and time <= 1459) then return bit_14;
   if (time >= 1500 and time <= 1559) then return bit_15;
   if (time >= 1600 and time <= 1659) then return bit_16;
   if (time >= 1700 and time <= 1759) then return bit_17;
   if (time >= 1800 and time <= 1859) then return bit_18;
   if (time >= 1900 and time <= 1959) then return bit_19;
   if (time >= 2000 and time <= 2059) then return bit_20;
   if (time >= 2100 and time <= 2159) then return bit_21;
   if (time >= 2200 and time <= 2259) then return bit_22;
   if (time >= 2300 and time <= 2359) then return bit_23;
   if (time >= 2400 and time <= 2459) then return bit_24;
   return -1;
end
//xxxxxxxxxxxxxxxxxxxx