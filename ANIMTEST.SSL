// Animation Test
//
// This script, when attached to a critter, will cycle through the animation sequences
// when the critter is clicked on (talked to). Each click moves to the next animation.
//
//  Notes:
//
//   1) Fallout 1 Included animations for stairs (at least for the hero character).
//      These were not included in Fallout2. Copying the HMJPMS and HFJMPS FRMs from
//      Fallout 1 makes these animations work on Fallout 2 for the hero characters
//
//   2) There is a bug in mapper's \scripts\headers\animcond.h header file.
//      The following animations should have these numbers:
//
//         #define ANIM_fall_back_blood_sf (62)
//         #define ANIM_fall_front_blood_sf (63)
//         #define ANIM_called_shot_pic (64) 
//
//      For these 3 animations to work using those names, you need to change the 
//      header to these numbers. Or alternatively, use these numbers rather than 
//      the names in your scripts. 
//
//   3) These are several animations that haven't done anything. I don't know if 
//      they aren't implemented or if there is some condition I haven't met when 
//      trying them (not the right weapon or circumstance etc). These are:
//
//         ANIM_jump_begin
//         ANIM_jump_end
//         ANIM_falling
//         ANIM_magic_hands_up
//         ANIM_bad_landing
//         ANIM_bad_landing_sf    
//         ANIM_fire_continuous
//         ANIM_max_anim
//


#include "..\headers\define.h"
#define NAME                    SCRIPT_ANIMTEST
#include "..\headers\command.h"
#include "..\headers\animcomd.h"

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;

#define br_mstr(x)                              message_str(SCRIPT_ANIMTEST,x)

/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable Counter :=0;
variable sound;
variable item;
variable inv;

procedure start
begin
end

procedure critter_p_proc begin
end

procedure pickup_p_proc begin
end
procedure talk_p_proc begin
   reg_anim_clear(self_obj);
   inven_unwield(self_obj);
   if (Counter == 0) then begin 
       float_msg( self_obj, mstr(200), FLOAT_MSG_GREEN );
   end
   if (Counter == 1) then begin 
       float_msg( self_obj, mstr(300), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_stand,-1);
       reg_anim_end();
   end
   if (Counter == 2) then begin 
       float_msg( self_obj, mstr(301), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_walk,-1);
       reg_anim_end();
   end
   if (Counter == 3) then begin 
       float_msg( self_obj, mstr(302), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_running,-1);
       reg_anim_end();
   end
   if (Counter == 4) then begin 
       float_msg( self_obj, mstr(303), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_prone_to_standing,-1);
       reg_anim_end();
   end
   if (Counter == 5) then begin 
       float_msg( self_obj, mstr(304), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_back_to_standing,-1);
       reg_anim_end();
   end
   if (Counter == 6) then begin 
       float_msg( self_obj, mstr(305), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_climb_ladder,-1);
       reg_anim_end();
   end
   if (Counter == 7) then begin 
       float_msg( self_obj, mstr(306), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_magic_hands_middle,-1);
       reg_anim_end();
   end
   if (Counter == 8) then begin 
       float_msg( self_obj, mstr(307), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_magic_hands_ground,-1);
       reg_anim_end();
   end
   if (Counter == 9) then begin 
       float_msg( self_obj, mstr(308), FLOAT_MSG_GREEN );
       item:=create_object(PID_THROWING_KNIFE,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       sound := sfx_build_weapon_name(snd_weapon_attack, item, hit_left_weapon_primary, self_obj);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_throw_anim,-1);
           reg_anim_play_sfx(self_obj, sound, 0);
       reg_anim_end();
   end
   if (Counter == 10) then begin 
       float_msg( self_obj, mstr(309), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_throw_punch,-1);
       reg_anim_end();
   end
   if (Counter == 11) then begin 
       float_msg( self_obj, mstr(310), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_kick_leg,-1);
       reg_anim_end();
   end
   if (Counter == 12) then begin 
       float_msg( self_obj, mstr(311), FLOAT_MSG_GREEN );
       item:=create_object(PID_SPEAR,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_parry_anim,-1);
       reg_anim_end();
   end
   if (Counter == 13) then begin 
       float_msg( self_obj, mstr(312), FLOAT_MSG_GREEN );
       item:=create_object(PID_COMBAT_KNIFE,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_thrust_anim,-1);
       reg_anim_end();
   end
   if (Counter == 14) then begin 
       float_msg( self_obj, mstr(313), FLOAT_MSG_GREEN );
       item:=create_object(PID_SUPER_SLEDGE,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_swing_anim,-1);
       reg_anim_end();
   end
   if (Counter == 15) then begin 
       float_msg( self_obj, mstr(314), FLOAT_MSG_GREEN );
       item:=create_object(PID_GATLING_LASER,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_take_out,-1);
       reg_anim_end();
   end
   if (Counter == 16) then begin 
       float_msg( self_obj, mstr(315), FLOAT_MSG_GREEN );
       item:=create_object(PID_GATLING_LASER,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_put_away,-1);
       reg_anim_end();
   end
   if (Counter == 17) then begin 
       float_msg( self_obj, mstr(316), FLOAT_MSG_GREEN );
       item:=create_object(PID_GATLING_LASER,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_point,-1);
       reg_anim_end();
   end
   if (Counter == 18) then begin 
       float_msg( self_obj, mstr(317), FLOAT_MSG_GREEN );
       item:=create_object(PID_GATLING_LASER,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_unpoint,-1);
       reg_anim_end();
   end
   if (Counter == 19) then begin 
       float_msg( self_obj, mstr(318), FLOAT_MSG_GREEN );
       item:=create_object(PID_GATLING_LASER,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       sound := sfx_build_weapon_name(snd_weapon_attack, item, hit_left_weapon_primary, self_obj);
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fire_single,-1);
           reg_anim_play_sfx(self_obj, sound, 0);
       reg_anim_end();
   end
   if (Counter == 20) then begin 
       float_msg( self_obj, mstr(319), FLOAT_MSG_GREEN );
       item:=create_object(PID_GATLING_LASER,0,0);
       add_mult_objs_to_inven(self_obj,item,1); 
       wield_obj(item);
       sound := sfx_build_weapon_name(snd_weapon_attack, item, hit_left_weapon_primary, self_obj);
       reg_anim_clear(self_obj);
       reg_anim_begin();
           reg_anim_animate(self_obj, ANIM_fire_burst, -1);
           reg_anim_play_sfx(self_obj, sound, 0);
       reg_anim_end();
   end
   if (Counter == 21) then begin 
       float_msg( self_obj, mstr(320), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_dodge_anim,-1);
       reg_anim_end();
   end
   if (Counter == 22) then begin 
       float_msg( self_obj, mstr(321), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_hit_from_front,-1);
       reg_anim_end();
   end
   if (Counter == 23) then begin 
       float_msg( self_obj, mstr(322), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_hit_from_back,-1);
       reg_anim_end();
   end
   if (Counter == 24) then begin 
       float_msg( self_obj, mstr(323), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_back,-1);
       reg_anim_end();
   end
   if (Counter == 25) then begin 
       float_msg( self_obj, mstr(324), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_back_sf,-1);
       reg_anim_end();
   end
   if (Counter == 26) then begin 
       float_msg( self_obj, mstr(325), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_back_blood,-1);
       reg_anim_end();
   end
   if (Counter == 27) then begin 
       float_msg( self_obj, mstr(326), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_back_blood_sf,-1);
       reg_anim_end();
   end
   if (Counter == 28) then begin 
       float_msg( self_obj, mstr(327), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_front,-1);
       reg_anim_end();
   end
   if (Counter == 29) then begin 
       float_msg( self_obj, mstr(328), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_front_sf,-1);
       reg_anim_end();
   end
   if (Counter == 30) then begin 
       float_msg( self_obj, mstr(329), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_front_blood,-1);
       reg_anim_end();
   end
   if (Counter == 31) then begin 
       float_msg( self_obj, mstr(330), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fall_front_blood_sf,-1);
       reg_anim_end();
   end
   if (Counter == 32) then begin 
       float_msg( self_obj, mstr(331), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_big_hole,-1);
       reg_anim_end();
   end
   if (Counter == 33) then begin 
       float_msg( self_obj, mstr(332), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_big_hole_sf,-1);
       reg_anim_end();
   end
   if (Counter == 34) then begin 
       float_msg( self_obj, mstr(333), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_chunks_of_flesh,-1);
       reg_anim_end();
   end
   if (Counter == 35) then begin 
       float_msg( self_obj, mstr(334), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_chunks_of_flesh_sf,-1);
       reg_anim_end();
   end
   if (Counter == 36) then begin 
       float_msg( self_obj, mstr(335), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_dancing_autofire,-1);
       reg_anim_end();
   end
   if (Counter == 37) then begin 
       float_msg( self_obj, mstr(336), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_dancing_autofire_sf,-1);
       reg_anim_end();
   end
   if (Counter == 38) then begin 
       float_msg( self_obj, mstr(337), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_sliced_in_half,-1);
       reg_anim_end();
   end
   if (Counter == 39) then begin 
       float_msg( self_obj, mstr(338), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_sliced_in_half_sf,-1);
       reg_anim_end();
   end
   if (Counter == 40) then begin 
       float_msg( self_obj, mstr(339), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fire_dance,-1);
       reg_anim_end();
   end
   if (Counter == 41) then begin 
       float_msg( self_obj, mstr(340), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_burned_to_nothing,-1);
       reg_anim_end();
   end
   if (Counter == 42) then begin 
       float_msg( self_obj, mstr(341), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_burned_to_nothing_sf,-1);
       reg_anim_end();
   end
   if (Counter == 43) then begin 
       float_msg( self_obj, mstr(342), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_charred_body,-1);
       reg_anim_end();
   end
   if (Counter == 44) then begin 
       float_msg( self_obj, mstr(343), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_charred_body_sf,-1);
       reg_anim_end();
   end
   if (Counter == 45) then begin 
       float_msg( self_obj, mstr(344), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_electrify,-1);
       reg_anim_end();
   end
   if (Counter == 46) then begin 
       float_msg( self_obj, mstr(345), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_electrify_sf,-1);
       reg_anim_end();
   end
   if (Counter == 47) then begin 
       float_msg( self_obj, mstr(346), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_electrified_to_nothing,-1);
       reg_anim_end();
   end
   if (Counter == 48) then begin 
       float_msg( self_obj, mstr(347), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_electrified_to_nothing_sf,-1);
       reg_anim_end();
   end
   if (Counter == 49) then begin 
       float_msg( self_obj, mstr(348), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_exploded_to_nothing,-1);
       reg_anim_end();
   end
   if (Counter == 50) then begin 
       float_msg( self_obj, mstr(349), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_exploded_to_nothing_sf,-1);
       reg_anim_end();
   end
   if (Counter == 51) then begin 
       float_msg( self_obj, mstr(350), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_melted_to_nothing,-1);
       reg_anim_end();
   end
   if (Counter == 52) then begin 
       float_msg( self_obj, mstr(351), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_melted_to_nothing_sf,-1);
       reg_anim_end();
   end
   if (Counter == 53) then begin 
       float_msg( self_obj, mstr(352), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_up_stairs_right,-1);
       reg_anim_end();
   end
   if (Counter == 54) then begin 
       float_msg( self_obj, mstr(353), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_up_stairs_left,-1);
       reg_anim_end();
   end
   if (Counter == 55) then begin 
       float_msg( self_obj, mstr(354), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_down_stairs_right,-1);
       reg_anim_end();
   end
   if (Counter == 56) then begin 
       float_msg( self_obj, mstr(355), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_down_stairs_left,-1);
       reg_anim_end();
   end
   if (Counter == 57) then begin 
       float_msg( self_obj, mstr(356), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_called_shot_pic,-1);
       reg_anim_end();
   end

   // These animations didn't seem to work

   if (Counter == 58) then begin
       float_msg( self_obj, mstr(357), FLOAT_MSG_GREEN );
       item:=create_object(PID_VINDICATOR_MINIGUN,0,0);
       wield_obj(item);
       sound := sfx_build_weapon_name(snd_weapon_attack, item, hit_left_weapon_primary, self_obj); 
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_fire_continuous,-1);
           reg_anim_play_sfx(self_obj, sound, 0);
       reg_anim_end();
   end
   if (Counter == 59) then begin 
       float_msg( self_obj, mstr(358), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_jump_begin,-1);
       reg_anim_end();
   end
   if (Counter == 60) then begin 
       float_msg( self_obj, mstr(359), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_jump_end,-1);
       reg_anim_end();
   end
   if (Counter == 61) then begin 
       float_msg( self_obj, mstr(360), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_falling,-1);
       reg_anim_end();
   end
   if (Counter == 62) then begin 
       float_msg( self_obj, mstr(361), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_magic_hands_up,-1);
       reg_anim_end();
   end
   if (Counter == 63) then begin 
       float_msg( self_obj, mstr(362), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_bad_landing,-1);
       reg_anim_end();
   end
   if (Counter == 64) then begin 
       float_msg( self_obj, mstr(363), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_bad_landing_sf,-1);
       reg_anim_end();
   end
   if (Counter == 65) then begin 
       float_msg( self_obj, mstr(364), FLOAT_MSG_GREEN );
       reg_anim_begin();
           reg_anim_animate(self_obj,ANIM_max_anim,-1);
       reg_anim_end();
   end

   flush_add_timer_event_sec(self_obj, 3, 1);
   Counter+=1;
   if (Counter > 65) then Counter :=0;
end

procedure timed_event_p_proc begin
   if (anim_busy(self_obj) == false) then begin
      reg_anim_clear(self_obj);
      reg_anim_begin();
         reg_anim_animate(self_obj,ANIM_stand,-3);
      reg_anim_end();
   end
   flush_add_timer_event_sec(self_obj, 3, 1);
end

procedure destroy_p_proc begin
end

procedure damage_p_proc begin
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(br_mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(br_mstr(101));
end

procedure use_obj_on_p_proc begin
end

procedure use_skill_on_p_proc begin

end

procedure map_enter_p_proc begin
   Only_Once:=0;
end